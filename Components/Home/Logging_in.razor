@page "/Logging_in"
@attribute [Authorize(Roles="Administrator, User, Employee")]
@rendermode InteractiveServer

@inject ClaimsHelperService claimsHelperService
@inject UserControlledSessionService userControlledSessionService
@inject UserSessionService userSessionService
@inject PageRedirectService redirectService

<h3>Logging_in</h3>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; } = default!;

	private ClaimsPrincipal? user;

	protected override async Task OnInitializedAsync() 
	{
		AuthenticationState authState = await authenticationState;
		user = authState.User;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender) 
	{
		try 
		{
			if (firstRender) 
			{
				if (user is not null)
				{
					//	Start session.
					await userSessionService.StartSessionBasedOnRole(user);

					//	If a user started a session, set the active account 
					//	to the first account in their accounts list by default.
					if (claimsHelperService.GetRoleId(user) == (int)RoleTypes.User)
						await userControlledSessionService.SetActiveAccountSessionAsync();
					// NOTE:
					// StartSessionBasedOnRole uses ProtectedSessionStorage,
					// which internally relies on JavaScript interop.
					// In Blazor Server, JS interop is only safe AFTER the first render,
					// because the circuit isn't guaranteed to be connected before that.
					//
					// That's why this logic must be placed in OnAfterRenderAsync (not OnInitializedAsync),
					// and any navigation must also be wrapped in InvokeAsync to avoid JSDisconnectedException.
					await Task.Delay(500);
					var redirectUrl = redirectService.GetRedirectBasedOnRole(user);
					await InvokeAsync(() => redirectService.redirectWithNavigationManager(redirectUrl));	//	Redirect based on role.
					return;
				}
				else
					//	if sign in failed.
					throw new NullReferenceException("CLAIMS PRINCIPAL IS NULL");
			}
		}
		catch (UserNotFoundException)
		{
			//	Redirect to LANDING_PAGE if cookie is expired and claims principal is not found.
			redirectService.redirectWithNavigationManager(PageRoutes.LANDING_PAGE);	
		}
		catch (NullReferenceException ex)
		{
			//	Redirect to LANDING_PAGE page if claims principal is null.
			Console.WriteLine("ERROR: " + ex.Message);
			redirectService.redirectWithNavigationManager(PageRoutes.LANDING_PAGE);
		}
		catch (ArgumentOutOfRangeException ex)
		{
			Console.WriteLine("ERROR: " + ex.Message);
			//	Redirect to LOG_OUT_PAGE if role id is invalid.
			redirectService.redirectWithNavigationManager(PageRoutes.LOG_OUT_PAGE);
		}
	}
}
