@using Services
@using Exceptions

@page "/Sign_up_page"
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject HttpClient HttpClient
@using Layout
@layout PlainLayout

<div class="page">
	<main>

		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center">
				<h3 class="fw-bold text-light">User Registration</h3>

				<!-- Close Button -->
				<NavLink href="/">
					<button class="btn-close" aria-label="Close"></button> 
				</NavLink>
			</div>

			@if (!string.IsNullOrWhiteSpace(error))
			{
				<div class="alert alert-danger mt-2">@error</div>
			}


			<div class="information_box">

				<!-- Row 1 -->
				<div class="row g-2">
					<div class="col-3">
						<label class="text-light">First Name</label>
						<input class="form-control" @bind="firstName" placeholder="First Name" required>
					</div>
					<div class="col-3">
						<label class="text-light">Middle Name</label>
						<input class="form-control" @bind="middleName" placeholder="Middle Name">
					</div>
					<div class="col-3">
						<label class="text-light">Last Name</label>
						<input class="form-control" @bind="lastName" placeholder="Last Name" required>
					</div>
					<div class="col-1">
						<label class="text-light">Suffix</label>
						<input class="form-control" @bind="suffix" placeholder="Suffix">
					</div>
				</div>

				<!-- Row 2 -->
				<div class="row g-2 mt-2">
					<div class="col-1">
						<label class="text-light">Age</label>
						<input class="form-control" @bind="age" type="number" placeholder="Age" required>
					</div>
					<div class="col-3">
						<label class="text-light">Birth Date</label>
						<input class="form-control" @bind="birthDate" type="date" placeholder="mm/dd/yyyy" required>
					</div>
					<div class="col-4">
						<label class="text-light">Birth Place</label>
						<input class="form-control" placeholder="Full Address" required>
					</div>
					<div class="col-2">
						<label class="text-light">Sex</label>
						<select class="form-select" @bind="selectedSex" required>
							<option>Male</option>
							<option>Female</option>
						</select>
					</div>
					<div class="col-2">
						<label class="text-light">Civil Status</label>
						<select class="form-select" @bind="selectedCivilStatus" required>
							<option>Single</option>
							<option>Married</option>
							<option>Separated</option>
							<option>Widowed</option>
						</select>
					</div>
				</div>

				<!-- Row 3 -->
				<div class="row g-2 mt-2">

					<!-- Religion -->
					<div class="col-3">
						<label class="text-light">Religion</label>
						<select class="form-select" @bind="selectedReligion">
							@foreach (var option in religionOptions)
							{
								<option value="@option">@option</option>
							}
						</select>
					</div>

					<!--Region-->
					<div class="col-3">
						<label class="text-light">Region</label>
						<select class="form-select" @onchange="async _ => await LoadProvinceAsync()" required>
							@foreach (var r in regions)
							{
								<option value="@r.RegionId">@r.RegionName</option>
							}
						</select>
					</div>

					<!-- Province -->
					<div class="col-3">
						<label class="text-light">Province</label>
						<select class="form-select" @onchange="async _ => await LoadCitiesAsync()" required>
							@foreach (var p in provinces)
							{
								<option value="@p.ProvinceId">@p.ProvinceName</option>
							}
						</select>
					</div>

					<!-- City -->
					<div class="col-3">
						<label class="text-light">City</label>
						<select class="form-select" @onchange="async _ => await LoadBarangaysAsync()" required>
							@foreach (var c in cities)
							{
								<option value="@c.CityId">@c.CityName</option>
							}
						</select>
					</div>

					<!-- Barangay -->
					<div class="col-3">
						<label class="text-light">Barangay</label>
						<select class="form-select" @bind="selectedBarangay" required>
							@foreach (var b in barangays)
							{
								<option value="@b.BarangayId">@b.BarangayName</option>
							}
						</select>
					</div>

				</div>

				<!-- Row 4 -->
				<div class="row g-2 mt-2">
					<div class="col-3">
						<label class="text-light">Street No.</label>
						<input class="form-control" @bind="streetNo" placeholder="Street No." required>
					</div>
					<div class="col-3">
						<label class="text-light">House No.</label>
						<input class="form-control" @bind="houseNo" placeholder="House No." required>
					</div>
					<div class="col-3">
						<label class="text-light">Email</label>
						<input type="email" class="form-control" @bind="email" placeholder="Email" required>
					</div>
					<div class="col-3">
						<label class="text-light">Contact No.</label>
						<input class="form-control" @bind="contactNumber" placeholder="Contact No." required>
					</div>
				</div>

				<!-- Row 5 (Father's Name)-->
				<div class="row g-2 mt-2">
					<div class="col-12">
						<label class="text-light">Father's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control" @bind="fatherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="fatherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="fatherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control" @bind="fatherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>

					<!-- Row 6 (Mother's Name)-->
					<div class="col-12">
						<label class="text-light">Mother's Maiden Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control" @bind="motherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="motherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="motherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control" @bind="motherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>

					<!-- Row 7 (Beneficiary's Name) -->
					<div class="col-12">
						<label class="text-light">Beneficiary's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control" @bind="beneficiaryFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="beneficiaryMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control" @bind="beneficiaryLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control" @bind="beneficiarySuffix" placeholder="Suffix">
							</div>
						</div>
					</div>
				</div>

				<div class="row g-3 mt-3">
					<!-- Upload Government ID -->
					<div class="col-md-4">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>
						<div class="d-flex gap-2">
							<input type="file" class="btn btn-light w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>

					<!-- Upload 1x1 Picture -->
					<div class="col-md-4">
						<label class="text-light">Upload 1x1 Picture</label>
						<div class="d-flex gap-2">
							<input type="file" class="btn btn-light w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>
				</div>

				<!-- Terms and Conditions Checkbox -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Register Button -->
				<div class="text-end mt-3">
					<button class="btn btn-primary btn-lg"> Register</button>
				</div>

			</div>
		</div>
	</main>
</div>



@code {

	private string error = string.Empty;

	public string firstName = "";
	public string middleName = "";
	public string lastName = "";
	public string suffix = "";

	public int age;
	public DateTime birthDate;
	public string selectedBirthCity = "";
	public string selectedBirthProvince = "";
	public string selectedBirthRegion = "";

	public string email = "";
	public string selectedSex = "";
	public string selectedCivilStatus = "";
	public string selectedReligion = "";
	public string contactNumber = "";
	public string Occupation = "";
	//address info
	public string houseNo = "";
	public string streetNo = "";
	public string selectedRegion = "";
	public string selectedProvince = "";
	public string selectedCity = "";
	public string selectedBarangay = "";

	//Parents Name
	public string fatherFirstName = "";
	public string fatherMiddleName = "";
	public string fatherLastName = "";
	public string fatherSuffix = "";

	public string motherFirstName = "";
	public string motherMiddleName = "";
	public string motherLastName = "";
	public string motherSuffix = "";

	public string beneficiaryFirstName = "";
	public string beneficiaryMiddleName = "";
	public string beneficiaryLastName = "";
	public string beneficiarySuffix = "";

	private List<Region> regions = new List<Region>();
	private List<Province> provinces = new List<Province>();
	private List<City> cities = new List<City>();
	private List<Barangay> barangays = new List<Barangay>();

	// For birth place of user

	// For Full address of user
	private async Task OnInitializedAsync()
	{
		await LoadRegionAsync();	
	}

	private async Task LoadRegionAsync()
	{
		var regionResponse = await HttpClient.GetFromJsonAsync<List<Region>>("https://psgc.gitlab.io/api/regions/");
		regions = regionResponse ?? new List<Region>();
		await LoadProvinceAsync();
	}

	private async Task LoadProvinceAsync()
	{
		var provinceResponse = await HttpClient.GetFromJsonAsync<List<Province>>($"https://psgc.gitlab.io/api/regions/{selectedRegion}/provinces/");
		provinces = provinceResponse ?? new List<Province>();
		await LoadCitiesAsync();
	}

	private async Task LoadCitiesAsync()
	{
		var citiesResponse = await HttpClient.GetFromJsonAsync<List<City>>($"https://psgc.gitlab.io/api/provinces/{selectedProvince}/municipalities/");
		cities = citiesResponse ?? new List<City>();
		await LoadBarangaysAsync();
	}

	private async Task LoadBarangaysAsync()
	{
		var barangayResponse = await HttpClient.GetFromJsonAsync<List<Barangay>>($"https://psgc.gitlab.io/api/municipalities/{selectedCity}/barangays/");
		barangays = barangayResponse ?? new List<Barangay>();
	}

	private int GetIdFromSelected(string selectedCode, List<dynamic> options)
	{
		foreach (var item in options)
		{
			if (item?.Code == selectedCode)
			{
				return item?.Id ?? 0;
			}
		}

		return 0;
	}

	///private int GetIdFromSelected(string selectedCode, List<dynamic> options)
	///{
		///var selected = options.FirstOrDefault(item => item.Code == selectedCode);
		///return selected?.id ?? 0;
	///}

	private async Task LoginAsync()
	{
		try
		{
			await RegistrationService.RegisterAsync
			(
				userFirstName: firstName,
				userMiddleName: middleName,
				userLastName: lastName,
				userSuffix: suffix,
				birthDate: birthDate,
				birthCityId: 1,
				birthProvinceId: 1,
				houseNo: houseNo,
				streetNo: streetNo,
				barangayId: GetIdFromSelected(selectedBarangay, barangays.Cast<dynamic>().ToList()),
				cityId: GetIdFromSelected(selectedCity, cities.Cast<dynamic>().ToList()),
				provinceId: GetIdFromSelected(selectedProvince, provinces.Cast<dynamic>().ToList()),
				regionId: GetIdFromSelected(selectedRegion, regions.Cast<dynamic>().ToList()),
				postalCode: 1000,
				age: age,
				sex: selectedSex,
				contactNumber: contactNumber,
				Occupation: Occupation,
				email: email, 
				civilStatus: selectedCivilStatus,
				ReligionId: 1,
				fatherFirstName: fatherFirstName,
				fatherMiddleName: fatherMiddleName,
				fatherLastName: fatherLastName,
				fatherSuffix: fatherSuffix,
				motherFirstName: motherFirstName,
				motherMiddleName: motherMiddleName,
				motherLastName: motherLastName,
				motherSuffix: motherSuffix,
				beneficiaryFirstName: beneficiaryFirstName,
				beneficiaryMiddleName: beneficiaryMiddleName,
				beneficiaryLastName: beneficiaryLastName,
				beneficiarySuffix: beneficiarySuffix
			);
			NavigationManager.NavigateTo("/");

		}

		catch (MissingFieldException ex)
		{
			error = ex.Message;
		}
		catch (Exception ex)
		{
			error = "Error occurred: " + ex.Message;
		}
	}

}

