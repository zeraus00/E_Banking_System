@using Data;
@using Layout
@using Services;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;

@page "/Login_page"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject EBankingContext _context
@inject IHttpContextAccessor HttpContextAccessor
@inject LogInService _logInService
@layout PlainLayout

<div class="page">
	<main>

		<!-- Login Box -->
		<div class="card login p-4 shadow-lg">
			<div class="d-flex justify-content-end">

				<!-- Close Button -->
				<NavLink href="/">
					<button type="button" class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>
			<h2 class="text-center fw-bold">User Login</h2>

			<!-- Error Handling (Draft) -->
			@if (error.Length > 0)
			{
				<div class="alert alert-danger alert-dismissible fade show" role="alert">
					<strong>@error</strong>
				</div>
			} 

			<!-- Authentication -->
			<div class="loginform px-4">
				<input class="form-control form-control-custom form-control-lg mb-3" @bind="email" placeholder="Email">

				<div class="position-relative">
					<input type="@passwordInputType"
					@bind="password"
					class="form-control form-control-custom form-control-lg pe-5"
					placeholder="Password" />

					<button type="button"
					class="btn position-absolute end-0 top-50 translate-middle-y me-3 p-0 border-0 bg-transparent"
					style="z-index: 10;"
					@onclick="TogglePasswordVisibility">
						<i class="bi @eyeIconClass text-muted"></i>
					</button>
				</div>


				<div class="col d-flex align-items-center mt-1">

					<!-- Remember Me Checkbox -->
					<div class="form-check">
						<input class="form-check-input" type="checkbox" id="rememberMe">
						<label class="form-check-label" for="rememberMe">
							Remember me
						</label>
					</div>

					<!-- Forgot Password Link -->
					<NavLink class="nav-link ms-auto" href="/Forgot_password">
						Forget Password?
					</NavLink>

				</div>
			</div>

			<!-- Login Button -->
			<div class="mb-2 mx-auto px-4 w-100">
				<button class="btn btn-primary w-100" @onclick="LoginAsync"> Log in</button>
			</div>

			<!-- Sign Up Link -->
			<div class="rpw px-4">
				<div class="col d-flex align-items-center">
					<p class="mb-0">Do not have an account?</p>
					<NavLink class="nav-link ms-auto" href="Sign_up_page">
						Register
					</NavLink>
				</div>
			</div>

		</div>
	</main>
</div>

@code {

	public string email = "";
	public string password = "";
	public string error = "";

	private string passwordInputType = "password";
	private string eyeIconClass = "bi-eye-slash";

	private void TogglePasswordVisibility()
	{
		if (passwordInputType == "password")
		{
			passwordInputType = "text"; // See password
			eyeIconClass = "bi-eye"; // Change icon to open eye
		}
		else
		{
			passwordInputType = "password"; // Hide password
			eyeIconClass = "bi-eye-slash"; // Change icon to closed eye
		}
	}

	private async Task LoginAsync()
	{
		try {
			// Perform login logic here, such as checking credentials
			UserAuth? userAuth = await _logInService.TryAuthenticateUserAsync(email, password);
			if (userAuth == null) {
				error = "Invalid email or password. Please try again.";
				return;
				// Handle failed login attempt (e.g., show error message)
			}
			string name = userAuth.Account == null ? "DefaultName" : userAuth.Account.AccountName;
			string role = userAuth.Role.RoleName;
			var claims = new List<Claim>
			{
				new Claim(ClaimTypes.Name, name),
				new Claim(ClaimTypes.Role, role)
			};
			var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
			var principal = new ClaimsPrincipal(identity);
			//await HttpContextAccessor.HttpContext!.SignInAsync(
			//	principal);

			NavigateBasedOnRole(userAuth.Role.RoleId);


		} catch (Exception ex) {
			Console.WriteLine($"Error during login: {ex.Message}");
			error = "An error occurred during login. Please try again.";
		}

	}

	/// <summary>
	/// Handles Role-Based Access Control for log-in.
	/// Navigates the home pages with User RoleIds.
	/// </summary>
	/// <param name="roleId"></param>
	private void NavigateBasedOnRole(int roleId) 
	{
		if (_logInService.IsAdmin(roleId)) {
			// go to admin home
		} else if (_logInService.IsUser(roleId)) {
			NavigationManager.NavigateTo("/Client_home");
		} else if (_logInService.IsEmployee(roleId)) {
			// go to employee home
		} else {
			throw new Exception("User Role not Found.");
		}

	}
}
