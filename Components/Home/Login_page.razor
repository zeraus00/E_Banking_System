@using Data;
@using Services;
@using Layout

@page "/Login_page"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject EBankingContext context
@inject AuthenticationService authenticationService
@layout PlainLayout

<div class="page">
	<main>

		<!-- Login Box -->
		<div class="card login p-4 shadow-lg">
			<div class="d-flex justify-content-end">

				<!-- Close Button -->
				<NavLink href="/">
					<button type="button" class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>
			<h2 class="text-center fw-bold">User Login</h2>

			<!-- Error Handling (Draft) -->
			@if (error.Length > 0)
			{
				<div class="alert alert-danger alert-dismissible fade show" role="alert">
					<strong>@error</strong>
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>
			} 

			<!-- Authentication -->
			<div class="loginform px-4">
				<input class="form-control form-control-custom form-control-lg mb-3" @bind="email" placeholder="Email">
				<input class="form-control form-control-custom form-control-lg" type="password" @bind="password" placeholder="Password">

				<div class="col d-flex align-items-center mt-1">

					<!-- Remember Me Checkbox -->
					<div class="form-check">
						<input class="form-check-input" type="checkbox" id="rememberMe">
						<label class="form-check-label" for="rememberMe">
							Remember me
						</label>
					</div>

					<!-- Forgot Password Link -->
					<NavLink class="nav-link ms-auto" href="/Forgot_password">
						<span class="bi bi-info-circle-fill"></span> Forget Password?
					</NavLink>

				</div>
			</div>

			<!-- Login Button -->
			<div class="rpw mb-2 px-4">
				<NavLink href="Client_home">
				<button class="btn btn-primary" @onclick="LoginAsync"> Log in</button>
				</NavLink>
			</div>

			<!-- Sign Up Link -->
			<div class="rpw px-4">
				<div class="col d-flex align-items-center">
					<p class="mb-0">Do not have an account?</p>
					<NavLink class="nav-link ms-auto" href="Sign_up_page">
						Register
					</NavLink>
				</div>
			</div>

		</div>
	</main>
</div>

@code {
	public string email = "";
	public string password = "";
	public string error = "";



	private async Task LoginAsync()
	{
		try {
			// Perform login logic here, such as checking credentials
			bool isLoginSuccessful = await authenticationService.IsAuthenticatedAsync(email, password);

			if (!isLoginSuccessful) {
				error = "Invalid email or password. Please try again.";
				return;
				// Handle failed login attempt (e.g., show error message)
			}

			int roleId = await authenticationService.GetUserRoleIdAsync(email);

			NavigateBasedOnRole(roleId);


		} catch (Exception ex) {
			Console.WriteLine($"Error during login: {ex.Message}");
			error = "An error occurred during login. Please try again.";
		}

	}

	/// <summary>
	/// Handles Role-Based Access Control for log-in.
	/// Navigates the home pages with User RoleIds.
	/// </summary>
	/// <param name="roleId"></param>
	private void NavigateBasedOnRole(int roleId) 
	{
		if (authenticationService.IsAdmin(roleId)) {
			// go to admin home
		} else if (authenticationService.IsUser(roleId)) {
			NavigationManager.NavigateTo("/Client_home");
		} else if (authenticationService.IsEmployee(roleId)) {
			// go to employee home
		} else {
			throw new Exception("User Role not Found.");
		}

	}
}
