@using Layout
@using ViewModels;

@page "/Login_page"
@* @rendermode InteractiveServer *@
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject HttpClient http
@inject ClaimsHelperService _claimsHelper
@inject CredentialValidationService _validationService
@inject PageRedirectService _redirectService
@inject SignInService _signInService
@layout PlainLayout

<EditForm Model="_loginModel" OnValidSubmit="LogInAsync" FormName="LogInForm">
	<DataAnnotationsValidator />
	<div class="page">
		<main>

			<!-- Login Box -->
			<div class="card login p-4 shadow-lg">
				<div class="d-flex justify-content-end">

					<!-- Close Button -->
					<NavLink href="/">
						<button type="button" class="btn-close" aria-label="Close"></button>
					</NavLink>
				</div>
				<h2 class="text-center fw-bold">User Login</h2>

				<!-- Error Handling (Draft) -->
				@if (error.Length > 0)
				{
					<div class="alert alert-danger alert-dismissible fade show" role="alert">
						<strong>@error</strong>
					</div>
				}

				<!-- Authentication -->
				<div class="loginform px-4">
					<InputText id="email" class="form-control form-control-custom form-control-lg mb-3" @bind-Value="_loginModel.Email" />
					<ValidationMessage For="() => _loginModel.Email" />
					@* 
					<input class="form-control form-control-custom form-control-lg mb-3" @bind="loginModel.Email" placeholder="Email">
						*@
					<div class="position-relative">
						<InputText id="password" 
						type="password"
						class="form-control form-control-custom form-control-lg pe-5"
						@bind-Value="_loginModel.Password" />
						<ValidationMessage For="() => _loginModel.Password" />

						@* <input type="@passwordInputType"
						@bind="loginModel.Password"
						class="form-control form-control-custom form-control-lg pe-5"
						placeholder="Password" /> *@

						<button type="button"
						class="btn position-absolute end-0 top-50 translate-middle-y me-3 p-0 border-0 bg-transparent"
						style="z-index: 10;"
						@onclick="TogglePasswordVisibility">
							<i class="bi @eyeIconClass text-muted"></i>
						</button>
					</div>


					<div class="col d-flex align-items-center mt-1">

						<!-- Remember Me Checkbox -->
						<div class="form-check">
							<input class="form-check-input" type="checkbox" id="rememberMe">
							<label class="form-check-label" for="rememberMe">
								Remember me
							</label>
						</div>

						<!-- Forgot Password Link -->
						<NavLink class="nav-link ms-auto" href="/Forgot_password">
							Forget Password?
						</NavLink>

					</div>
				</div>

				<!-- Login Button -->
				<div class="mb-2 mx-auto px-4 w-100">
					<button type="submit" class="btn btn-primary w-100">Login</button>
					@* <button class="btn btn-primary w-100" @onclick="TryLogInAsync"> Log in</button> *@
				</div>

				<!-- Sign Up Link -->
				<div class="rpw px-4">
					<div class="col d-flex align-items-center">
						<p class="mb-0">Do not have an account?</p>
						<NavLink class="nav-link ms-auto" href="/Account_opening">
							Register
						</NavLink>
					</div>
				</div>

			</div>
		</main>
	</div>
</EditForm>


@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; } = default!;

	[SupplyParameterFromForm]
	public LogInViewModel _loginModel { get; set; } = new();

	public string error = "";


	private string passwordInputType = "password";
	private string eyeIconClass = "bi-eye-slash";

	private void TogglePasswordVisibility()
	{
		if (passwordInputType == "password")
		{
			passwordInputType = "text"; // See password
			eyeIconClass = "bi-eye"; // Change icon to open eye
		}
		else
		{
			passwordInputType = "password"; // Hide password
			eyeIconClass = "bi-eye-slash"; // Change icon to closed eye
		}
	}

	protected override async Task OnInitializedAsync() 
	{
		AuthenticationState authState = await authenticationState;
		ClaimsPrincipal? user = authState.User;
		if (_claimsHelper.IsAuthenticated(user)) {
			_redirectService.RedirectBasedOnRole(user);
		}
	}

	private async Task LogInAsync()
	{
		try
		{
			var redirectUrl = string.Empty;
			//  Validate the credentials.
			var email = (_loginModel.Email ?? string.Empty).Trim();
			var password = (_loginModel.Password ?? string.Empty).Trim();
			var userAuth = await _validationService.TryValidateUserAsync(email, password);
			if (userAuth == null)
			{
				//  Handle failed validation
				//  Redirect to log in page.
				error = "Invalid Username or Password";
				redirectUrl = _redirectService.GetRedirectToLogInPage();
				_redirectService.redirectWithHttpContext(redirectUrl);
				return;
			}

			//  Handle Sign In logic.
			await _signInService.TrySignInAsync(userAuth);

			//	Redirect based on role.
			redirectUrl = _redirectService.GetRedirectBasedOnRole(userAuth.RoleId);
			_redirectService.redirectWithHttpContext(redirectUrl);

			return;
		}
		catch (Exception ex)
		{
			Console.WriteLine("ERRORRRR: " + ex.Message);

			var redirectUrl = _redirectService.GetRedirectToLogInPage();
			_redirectService.redirectWithHttpContext(redirectUrl);
			return;
		}

	}

}
