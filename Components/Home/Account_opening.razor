@using Services
@using Exceptions
@using System.Text.Json;
@using Data.Constants
@using Microsoft.AspNetCore.Components.Forms

@page "/Account_opening"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject HttpClient HttpClient
@using Layout
@layout PlainLayout

<div class="page">
	<main>

		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center">
				<h3 class="fw-bold text-light">Online Account Opening</h3>

				<!-- Close Button -->
				<NavLink href="/">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<!--to show the error in the UI-->
			@if (!string.IsNullOrEmpty(error))
			{
				<div class="alert alert-danger" role="alert">@error</div>
			}

			<!-- Account Holder Details Border -->
			<div class="d-flex align-items-center my-3">
				<span class="text-light me-2">Account Holder's Details</span>
				<div class="flex-grow-1">
					<hr class="m-0" style="border: 1px solid white; opacity: 100%;">
				</div>
			</div>


			<div class="information_box">


				<!-- Row 1 -->
				<div class="row g-2 mt-2">

					<!-- Account Sub Type -->
					<div class="col-2">
						<label class="text-light">Account Sub-Type</label>
						<select class="form-select form-select-sm" @bind="selectedAccountTypeName" required>
							<option value="" disabled hidden>--select account type--</option>
							@foreach (var accountType in accountTypeNames.AccountTypeNameList)
							{
								<option value="@accountType">@accountType</option>
							}
						</select>
					</div>

					<!-- Account Product Type -->
					<div class="col-2">
						<label class="text-light">Account Product Type</label>
						<select class="form-select form-select-sm" @bind="selectedAccountProductTypeName" required>
							<option value="" disabled hidden>-- Select Product Type --</option>
							@foreach (var productType in accountProductTypeNames.AccountProductTypeNameList)
							{
								<option value="@productType">@productType</option>
							}
						</select>
					</div>
				</div>


				<!-- Row 2 -->
				<div class="row g-2 mt-2">

					<!-- Primary Accouunt Name -->
					<label class="text-light">Primary Account Name</label>
					<div class="row g-2">

						<!-- First Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userFirstName" placeholder="First Name">
						</div>

						<!-- Middle Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userMiddleName" placeholder="Middle Name">
						</div>

						<!-- Last Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userLastName" placeholder="Last Name">
						</div>

						<!-- Suffix Name -->
						<div class="col-1">
							<input class="form-control form-control-sm" @bind="userSuffix" placeholder="Suffix">
						</div>

					</div>

				</div>




				<!-- Row 3 -->
				<div class="row g-2 mt-2">

					<!-- Age -->
					<div class="col-1">
						<label class="text-light">Age</label>
						<input class="form-control form-control-sm" type="number" placeholder="Age" required>
					</div>

					<!-- Sex -->
					<div class="col-1">
						<label class="text-light">Sex</label>
						<select class="form-select form-select-sm" required>
							<option>Male</option>
							<option>Female</option>
						</select>
					</div>

					<!-- Civil  Status -->
					<div class="col-2">
						<label class="text-light">Civil Status</label>
						<select class="form-select form-select-sm" required>
							<option>Single</option>
							<option>Married</option>
							<option>Separated</option>
							<option>Widowed</option>
						</select>
					</div>

					<!-- Religion -->
					<div class="col">
						<label class="text-light">Religion</label>
						<select class="form-select form-select-sm" @bind="selectedReligion">
							@foreach (var religion in religionOptions)
							{
								<option value="@religion">@religion</option>
							}
						</select>
					</div>
					@if (selectedReligion == "Others")
					{
						<div class="mt-2">
							<label for="customReligion">Please specify your religon:</label>
							<input type="text" @bind="customReligion" class="form-control" placeholder="Enter your religion"/>
						</div>
					}
					<!-- Contact No -->
					<div class="col">
						<label class="text-light">Contact No.</label>
						<input class="form-control form-control-sm" @bind="contactNumber" placeholder="Contact No." required>
					</div>

					<!-- Email Address -->
					<div class="col">
						<label class="text-light">Email Address</label>
						<input type="email" class="form-control form-control-sm" @bind="email" placeholder="Email" required>
					</div>
				</div>


				<!-- Row 4 -->
				<div class="row g-2 mt-3">

					<!-- Full Address -->
					<label class="text-light">Full Address</label>

					<!-- Region -->
					<div class="col">
						<label class="text-light">Region</label>
						<select class="form-select form-select-sm" value="@selectedRegion" @onchange="async _ => await LoadProvinceAsync(_)" required>
							<option value="" disabled hidden>@regionPlaceHolder</option>
							@foreach (var r in regions)
							{
								<option value="@r.code">@r.regionName</option>
							}
						</select>
					</div>

					<!-- Province -->
					<div class="col">
						<label class="text-light">Province</label>
						<select class="form-select form-select-sm" value="@selectedProvince" @onchange="async _ => await LoadCitiesAsync(_)" required>
							<option value="" disabled hidden>@provincePlaceHolder</option>
							@foreach (var p in provincesFromRegion)
							{
								<option value="@p.code">@p.name</option>
							}
						</select>
					</div>

					<!-- Postal Code -->
					<div class="col">
						<label class="text-light">Postal Code</label>
						<select class="form-select form-select-sm" value="#" required>
							<option value="" disabled hidden> # </option>

						</select>
					</div>

					<!-- Municipality/City -->
					<div class="col">
						<label class="text-light">Municipality/City</label>
						<select class="form-select form-select-sm" value="@selectedCity" @onchange="async _ => await LoadBarangaysAsync(_)" required>
							<option value="" disabled hidden>@cityPlaceHolder</option>
							@foreach (var c in citiesFromProvince)
							{
								<option value="@c.code">@c.name</option>
							}
						</select>
					</div>

					<!-- Barangay -->
					<div class="col">
						<label class="text-light">Barangay</label>
						<select class="form-select form-select-sm" value="@selectedBarangay" required>
							<option value="" disabled hidden>@barangayPlaceHolder</option>
							@foreach (var b in barangaysFromCities)
							{
								<option value="@b.code">@b.name</option>
							}
						</select>
					</div>

					<!-- Street No. -->
					<div class="col">
						<label class="text-light">Street No.</label>
						<input class="form-control form-control-sm" @bind="street" placeholder="Street No." required>
					</div>

					<!-- House No. -->
					<div class="col">
						<label class="text-light">House No.</label>
						<input class="form-control form-control-sm" @bind="houseNo" placeholder="House No." required>
					</div>

				</div>


				<!-- Row 5 -->
				<!--Birth Place address-->
				<div class="row g-2 mt-3">

					<label class="text-light">Birth Place</label>
					<!-- Region -->
					<div class="col">
						<label class="text-light">Region</label>
						<select class="form-select form-select-sm" value="@selectedBirthRegion" @onchange="async _ => LoadBirthProvincesAsync(_)" required>
							<option value="" disabled hidden>@regionPlaceHolder</option>
							@foreach (var r in regions)
							{
								<option value="@r.code">@r.regionName</option>
							}
						</select>
					</div>

					<!-- Province -->
					<div class="col">
						<label class="text-light">Province</label>
						<select class="form-select form-select-sm" value="@selectedBirthProvince" @onchange="async _ => LoadCitiesAsync(_)" required>
							<option value="" disabled hidden>@provincePlaceHolder</option>
							@foreach (var p in provincesFromRegion)
							{
								<option value="@p.code">@p.name</option>
							}
						</select>
					</div>

					<!-- City -->
					<div class="col">
						<label class="text-light" >City</label>
						<select class="form-select form-select-sm" value="@selectedBirthCity" required>
							<option value="" disabled hidden>@cityPlaceHolder</option>
							@foreach (var c in citiesFromProvince)
							{
								<option value="@c.code">@c.name</option>
							}
						</select>
					</div>

					<!-- Birth Date -->
					<div class="col">
						<label class="text-light">Birth Date</label>
						<input class="form-control form-control-sm" @bind="birthDate" type="date" required>
					</div>

					<!-- Occupation -->
					<div class="col">
						<label class="text-light">Occupation</label>
						<input class="form-control form-control-sm" @bind="Occupation" placeholder="Occupation" required>
					</div>

				</div>


				<div class="row g-2 mt-2">


					<!-- Row 6 (Father's Name)-->
					<div class="col-12">

						<label class="text-light">Father's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="fatherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>


					<!-- Row 7 (Mother's Name)-->
					<div class="col-12">
						<label class="text-light">Mother's Maiden Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="motherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>


					<!-- Row 8 (Beneficiary's Name) -->
					<div class="col-12">
						<label class="text-light">Beneficiary's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="beneficiarySuffix" placeholder="Suffix">
							</div>
						</div>
					</div>
				</div>

				<div class="row g-3 mt-3">
					<!-- Upload Government ID -->
					<div class="col-md-4">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>

						<!-- View Button -->
						<div class="d-flex gap-2">
							<input type="file" @bind="governmentId" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>

					<!-- Upload 1x1 Picture -->
					<div class="col-md-4">
						<label class="text-light">Upload 1x1 Picture</label>

						<!-- View BUtton -->
						<div class="d-flex gap-2">
							<input type="file" @bind="profilePicture" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>

					<!-- TIN -->
					<div class="col-md-3">
						<label class="text-light">Tax Identification Number</label>
						<input class="form-control" @bind="taxIdentificationNumber" placeholder="Tax Identification Number" required>
					</div>

				</div>

				<!-- Border -->
				<div class="d-flex align-items-center mt-5 mb-3">
					<span class="text-light me-2">Setup Sign In Credentials</span>
					<div class="flex-grow-1">
						<hr class="m-0" style="border: 1px solid white; opacity: 100%;" />
					</div>
				</div>

				<!-- Credentials Inputs -->
				<div class="row g-2 mb-3">

					<!-- Username -->
					<div class="col-3">
						<label class="text-light">Username</label>
						<input class="form-control form-control-sm" @bind="userName" placeholder="Username" required>
					</div>

					<!-- Password -->
					<div class="col-3">
						<label class="text-light">Password</label>
						<input type="password" class="form-control form-control-sm" placeholder="Password" required>
					</div>
				</div>

				<!-- Terms and Conditions Checkbox -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Register Button -->
				<div class="text-end mt-3">
					<button class="btn btn-primary btn-secondary">Submit Application</button>
				</div>

			</div>
		</div>
	</main>
</div>



@code {

	private string error = string.Empty;


	// user basic info
	public string userFirstName = string.Empty;
	public string userMiddleName = string.Empty;
	public string userLastName = string.Empty;
	public string userSuffix = string.Empty;
	public string userName = string.Empty;
	public string password = string.Empty;
	public string email = string.Empty;
	public string contactNumber = string.Empty;
	public string Occupation = string.Empty;
	public string taxIdentificationNumber = string.Empty;
	public string selectedSex = string.Empty;
	public string selectedCivilStatus = string.Empty;
	public string selectedReligion = string.Empty;
	public string customReligion = string.Empty;

	// user profile picture and government id
	private byte[] profilePicture;
	private byte[] governmentId;

	// Account
	private AccountTypeNames accountTypeNames = new();
	private AccountProductTypeNames accountProductTypeNames = new();
	private string selectedAccountTypeName = string.Empty;
	private string selectedAccountProductTypeName = string.Empty;
	public int accountTypeId;
	public int accountProductTypeId;



	// user Birth Info
	public int age;
	public DateTime birthDate;
	public string selectedBirthCity = string.Empty;
	public string selectedBirthProvince = string.Empty;
	public string selectedBirthRegion = string.Empty;
	public int birthCityId;
	public int birthProvinceId;
	public int birthRegionId;


	//address info
	public string houseNo = string.Empty;
	public string street = string.Empty;
	public string selectedRegion = string.Empty;
	public string selectedProvince = string.Empty;
	public string selectedCity = string.Empty;
	public string selectedBarangay = string.Empty;
	public string userPostalCode = string.Empty;
	public int postalCode;
	public int regionId;
	public int provinceId;
	public int cityId;
	public int barangayId;

	//drop down selection place holders
	public const string regionPlaceHolder = "--Select Region--";
	public const string provincePlaceHolder = "--Select Province--";
	public const string cityPlaceHolder = "--Select City--";
	public const string barangayPlaceHolder = "--Select Barangay--";

	//Parents Name And Beneficiary
	public string fatherFirstName = string.Empty;
	public string fatherMiddleName = string.Empty;
	public string fatherLastName = string.Empty;
	public string fatherSuffix = string.Empty;

	public string motherFirstName = string.Empty;
	public string motherMiddleName = string.Empty;
	public string motherLastName = string.Empty;
	public string motherSuffix = string.Empty;

	public string beneficiaryFirstName = string.Empty;
	public string beneficiaryMiddleName = string.Empty;
	public string beneficiaryLastName = string.Empty;
	public string beneficiarySuffix = string.Empty;

	<!--user birth info address--> 
	private List<RegionViewModel>? birthRegions = new();
	private List<ProvinceViewModel>? birthProvinces = new();
	private List<CityViewModel>? birthCities = new();
	<!--user full address-->
	private List<RegionViewModel>? regions = new List<RegionViewModel>();
	private List<ProvinceViewModel>? provinces = new List<ProvinceViewModel>();
	private List<ProvinceViewModel>? provincesFromRegion = new();	//	use this for the drop down selection
	private List<CityViewModel>? cities = new List<CityViewModel>();
	private List<CityViewModel>? citiesFromProvince = new();
	private List<BarangayViewModel>? barangays = new List<BarangayViewModel>();
	private List<BarangayViewModel>? barangaysFromCities = new();


	// method for getting user address
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await LoadRegionAsync();
		}
		catch (FieldMissingException ex)
		{
			error = "Error Loading Regions" + ex.Message;
		}

	}

	// For Full address of user
	private async Task LoadRegionAsync()
	{
		try
		{
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/regions/");
			if (string.IsNullOrWhiteSpace(json))
			{
				error = "No regions data found.";
				return;
			}
			regions = JsonSerializer.Deserialize<List<RegionViewModel>>(json);
			if (regions is null) return;
		}
		catch (FieldMissingException ex)
		{
			error = "Error loading Regions" + ex.Message;
		}	
	}

	//	Pass the ChangeEventArgs instance ONLY FOR drop down selections that need updating.
	private async Task LoadProvinceAsync(ChangeEventArgs? e = null)
	{
		try
		{
			error = string.Empty; // reset previous error
			//	Get the value of the selection
			selectedRegion = e?.Value?.ToString() ?? "";
			if (string.IsNullOrWhiteSpace(selectedRegion))
			{
				error = "Please select a valid region.";
				return;
			}
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/provinces/");
			provinces = JsonSerializer.Deserialize<List<ProvinceViewModel>>(json);
			if (provinces is null) return;

			//	Get the list of provinces with the selected region's region code
			provincesFromRegion = provinces.Where(p => p.regionCode.ToString() == selectedRegion).ToList();
			if (provincesFromRegion.Any())
			{
				selectedProvince = provincesFromRegion[0].code.ToString();
			}
			//	Rerender component
			StateHasChanged();
		}
		catch (FieldMissingException ex)
		{
			error = "Error loading Provinces" + ex.Message;
		}
	}

	private async Task LoadCitiesAsync(ChangeEventArgs? e = null)
	{
		try
		{
			error = string.Empty; // reset previous error
			//	Get the value of the selection
			selectedProvince = e?.Value?.ToString() ?? "";
			if (string.IsNullOrWhiteSpace(selectedProvince))
			{
				error = "Please select a valid Province.";
				return;
			}
			//	Get the municipalities from the api.
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/municipalities/");
			cities = JsonSerializer.Deserialize<List<CityViewModel>>(json);
			if (cities is null) return;
			//	Get the list of provinces with the selected region's region code
			citiesFromProvince = cities.Where(c => c.provinceCode.ToString() == selectedProvince).ToList();

			//	Default the selection to the first option each time provinces are updated.
			if (citiesFromProvince.Any())
			{
				selectedCity = citiesFromProvince[0].code.ToString();
			}
			//	Rerender component
			StateHasChanged();
		}
		catch (FieldMissingException ex)
		{
			error = "Error loading cities" + ex.Message;
		}
	}

	private async Task LoadBarangaysAsync(ChangeEventArgs? e = null)
	{
		try
		{
			error = string.Empty; // reset previous error
			selectedCity = e?.Value?.ToString() ?? "";
			if (string.IsNullOrWhiteSpace(selectedCity))
			{
				error = "Select a valid city.";
				return;
			}
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/barangays/");
			barangays = JsonSerializer.Deserialize<List<BarangayViewModel>>(json);
			if (barangays is null) return;

			barangaysFromCities = barangays.Where(b => b.municipalityCode.ToString() == selectedCity).ToList();
			if (barangaysFromCities.Any())
			{
				selectedBarangay = barangaysFromCities[0].code.ToString();
			}
			//	Rerender component
			StateHasChanged();
		}
		catch (FieldMissingException ex)
		{
			error = "Error loading barangays" + ex.Message;
		}
	}

	// method to get user birth place
	private async Task LoadBirthProvincesAsync(ChangeEventArgs? e = null)
	{
		try
		{
			error = string.Empty; // reset previous error
			selectedBirthRegion = e?.Value?.ToString() ?? "";
			if (string.IsNullOrWhiteSpace(selectedBirthRegion))
			{
				error = "Please select a valid Region.";
				return;
			}
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/provinces/");
			provinces = JsonSerializer.Deserialize<List<ProvinceViewModel>>(json);
			if (provinces is null) return;
			provincesFromRegion = provinces.Where(p => p.regionCode.ToString() == selectedBirthRegion).ToList();
			if (provincesFromRegion.Any())
			{
				selectedBirthProvince = provincesFromRegion[0].code.ToString();
			}
			StateHasChanged();
		}
		catch (FieldMissingException ex)
		{
			error = "Error loading Provinces" + ex.Message;
		}
	}

	private async Task LoadBirthCitiesAsync(ChangeEventArgs? e = null)
	{
		try
		{
			error = string.Empty; // reset previous error
			selectedBirthProvince = e?.Value?.ToString() ?? "";
			if (string.IsNullOrWhiteSpace(selectedBirthProvince))
			{
				error = "Please select a valid Province.";
				return;
			}

			//	Get the municipalities from the api.
			var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/municipalities/");
			cities = JsonSerializer.Deserialize<List<CityViewModel>>(json);
			if (cities is null) return;

			//	Get the list of provinces with the selected region's region code
			citiesFromProvince = cities.Where(c => c.provinceCode.ToString() == selectedBirthProvince).ToList();
			//	Default the selection to the first option each time provinces are updated.
			if (citiesFromProvince.Any())
			{
				selectedBirthCity = citiesFromProvince[0].code.ToString();
			}
			//	Rerender component
			StateHasChanged();
		}
		catch (FieldMissingException ex)
		{
			error = "Error Loading cities" + ex.Message;
		}
	}

	private int GetIdFromSelected(string selectedCode, List<dynamic> options)
	{
		foreach (var item in options)
		{
			if (item?.Code == selectedCode)
			{
				return item?.Id ?? 0;
			}
		}

		return 0;
	}

	// handling the uploaded picture
	private async Task UploadGovernmentId(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // allow up to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				governmentId = ms.ToArray();
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading Government ID:" + ex.Message;
		}
	}

	private async Task UploadProfilePicture(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // allow u to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				profilePicture = ms.ToArray();
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading profile Picture: " + ex.Message;
		}
	}

	private List<string> religionOptions = new List<string>
	{
		"Roman Catholic",
		"Islam",
		"Iglesia ni Cristo",
		"Evangelical",
		"Seventh-day Adventist",
		"Born Again",
		"Buddhism",
		"Hinduism",
		"Judaism",
		"Orthodox",
		"Others"
	};

	private async Task RegisterUserAsync()
	{
		try
		{
			error = string.Empty;

			if (string.IsNullOrWhiteSpace(userFirstName))
			{
				error = "First name is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(userFirstName))
			{
				error = "Last name is required.";
				return;
			}

			if (string.IsNullOrWhiteSpace(userName))
			{
				error = "Username is required.";
				return;
			}
			if (age < 18)
			{
				error = "Invalid age, at least 18 years old is required.";
				return;
			}

			if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
			{
				error = "Invalid password, at least 6 character length is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(email))
			{
				error = "Email is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(contactNumber))
			{
				error = "Contact number is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(Occupation))
			{
				error = "Occupation is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(taxIdentificationNumber))
			{
				error = "Tax Identification Number is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(selectedSex))
			{
				error = "Sex is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(selectedCivilStatus))
			{
				error = "Civil status is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(selectedReligion))
			{
				error = "Religion is required.";
				return;
			}

			// Validation for names
			if (string.IsNullOrWhiteSpace(fatherFirstName) || string.IsNullOrWhiteSpace(fatherLastName))
			{
				error = "Father's full name is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(motherFirstName) || string.IsNullOrWhiteSpace(motherLastName))
			{
				error = "Mother's full name is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(beneficiaryFirstName) || string.IsNullOrWhiteSpace(beneficiaryLastName))
			{
				error = "Beneficiary's full name is required.";
				return;
			}

			// Validation for address
			if (string.IsNullOrWhiteSpace(houseNo))
			{
				error = "House number is required.";
				return;
			}
			if (string.IsNullOrWhiteSpace(street))
			{
				error = "Street name is required.";
				return;
			}
			if (regionId == 0 || provinceId == 0 || cityId == 0 || barangayId == 0)
			{
				error = "Complete address (region, province, city, barangay) is required.";
				return;
			}
			if (postalCode == 0)
			{
				error = "Postal code is required.";
				return;
			}

			if (birthDate == DateTime.MinValue)
			{
				error = "Valid birth date is required.";
				return;
			}

			if (string.IsNullOrEmpty(customReligion))
			{
				error = "Religon is required.";
				return;
			}

			

			accountTypeId = accountTypeNames.AccountTypeNameList.IndexOf(selectedAccountTypeName) + 1;
			accountProductTypeId = accountProductTypeNames.AccountProductTypeNameList.IndexOf(selectedAccountProductTypeName) + 1;

			regionId = GetIdFromSelected(selectedRegion, regions.Cast<dynamic>().ToList());
			provinceId = GetIdFromSelected(selectedProvince, provinces.Cast<dynamic>().ToList());
			cityId = GetIdFromSelected(selectedCity, cities.Cast<dynamic>().ToList());
			barangayId = GetIdFromSelected(selectedBarangay, barangays.Cast<dynamic>().ToList()); 

			birthRegionId = GetIdFromSelected(selectedBirthRegion, regions.Cast<dynamic>().ToList());
			birthProvinceId = GetIdFromSelected(selectedBirthProvince, provinces.Cast<dynamic>().ToList());
			birthCityId = GetIdFromSelected(selectedBirthCity, cities.Cast<dynamic>().ToList());

			Account userAccount = await RegistrationService.RegisterAccount(accountTypeId, accountProductTypeId);
			Name UserName = await RegistrationService.RegisterName(userFirstName, userMiddleName, userLastName, userSuffix);
			Name FatherName = await RegistrationService.RegisterName(fatherFirstName, fatherMiddleName, fatherLastName, fatherSuffix);
			Name MotherName = await RegistrationService.RegisterName(motherFirstName, motherMiddleName, motherLastName, motherSuffix);
			Name BeneficiaryName = await RegistrationService.RegisterName(beneficiaryFirstName, beneficiaryMiddleName, beneficiaryLastName, beneficiarySuffix);

			UserAuth userAuth = await RegistrationService.RegisterUserAuth(userName, email, password);
			BirthInfo UserBirthInfo = await RegistrationService.RegisterBirthInfo(birthDate, birthCityId, birthProvinceId, birthRegionId);
			Address UserAddress = await RegistrationService.RegisterAddress(houseNo, street, barangayId, cityId, provinceId, regionId, postalCode);

			string religionToSave = selectedRegion == "others" ? customReligion : selectedReligion;
			Religion UserReligion = await RegistrationService.RegisterReligion(religionToSave);



			UserInfo UserInfo = await RegistrationService.RegisterUserInfo(
				userAuth.UserAuthId,
				userAccount.AccountTypeId,
				userAccount.AccountProductTypeId,
				UserName.NameId,
				MotherName.NameId,
				FatherName.NameId,
				UserBirthInfo.BirthInfoId,
				UserAddress.AddressId,
				UserReligion.ReligionId,
				age,
				selectedSex,
				contactNumber,
				Occupation,
				taxIdentificationNumber,
				selectedCivilStatus,
				profilePicture,
				governmentId
				);
			NavigationManager.NavigateTo("/PendingApproval");
		}
		catch (MissingFieldException ex)
		{
			error = ex.Message;
		}
		catch (Exception ex)
		{
			error = "Registration failed: " + ex.Message;
		}
	}

}