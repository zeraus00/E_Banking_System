@using Services
@using Exceptions
@using System.Text.Json;


@page "/Account_opening"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject HttpClient HttpClient
@using Layout
@layout PlainLayout

<div class="page">
	<main>

		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center">
				<h3 class="fw-bold text-light">Online Account Opening</h3>

				<!-- Close Button -->
				<NavLink href="/">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			@if (!string.IsNullOrEmpty(error))
			{
				<div class="alert alert-danger">@error</div>
			}

			<!-- Account Holder Details Border -->
			<div class="d-flex align-items-center my-3">
				<span class="text-light me-2">Account Holder's Details</span>
				<div class="flex-grow-1">
					<hr class="m-0" style="border: 1px solid white; opacity: 100%;">
				</div>
			</div>


			<div class="information_box">


				<!-- Row 1 -->
				<div class="row g-2 mt-2">

					<!-- Account Sub Type -->
					<div class="col-2">
						<label class="text-light">Account Sub-Type</label>
						<select class="form-select form-select-sm" required>
							<option>Personal Account</option>
							<option>Joint Account</option>
						</select>
					</div>

					<!-- Account Product Type -->
					<div class="col-2">
						<label class="text-light">Account Product Type</label>
						<select class="form-select form-select-sm" required>
							<option>Product Type 1</option>
							<option>Product Type 2</option>
							<option>Product Type 3</option>
							<option>Product Type 4</option>
						</select>
					</div>
				</div>


				<!-- Row 2 -->
				<div class="row g-2 mt-2">

					<!-- Primary Accouunt Name -->
					<label class="text-light">Primary Account Name</label>
					<div class="row g-2">

						<!-- First Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="firstName" placeholder="First Name">
						</div>

						<!-- Middle Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="middleName" placeholder="Middle Name">
						</div>

						<!-- Last Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="lastName" placeholder="Last Name">
						</div>

						<!-- Suffix Name -->
						<div class="col-1">
							<input class="form-control form-control-sm" @bind="suffix" placeholder="Suffix">
						</div>

					</div>

				</div>




				<!-- Row 3 -->
				<div class="row g-2 mt-2">

					<!-- Age -->
					<div class="col-1">
						<label class="text-light">Age</label>
						<input class="form-control form-control-sm" type="number" placeholder="Age" required>
					</div>

					<!-- Sex -->
					<div class="col-1">
						<label class="text-light">Sex</label>
						<select class="form-select form-select-sm" required>
							<option>Male</option>
							<option>Female</option>
						</select>
					</div>

					<!-- Civil  Status -->
					<div class="col-2">
						<label class="text-light">Civil Status</label>
						<select class="form-select form-select-sm" required>
							<option>Single</option>
							<option>Married</option>
							<option>Separated</option>
							<option>Widowed</option>
						</select>
					</div>

					<!-- Religion -->
					<div class="col">
						<label class="text-light">Religion</label>
						<select class="form-select form-select-sm" @bind="selectedReligion">
							@foreach (var option in religionOptions)
							{
								<option value="@option">@option</option>
							}
						</select>
					</div>

					<!-- Contact No -->
					<div class="col">
						<label class="text-light">Contact No.</label>
						<input class="form-control form-control-sm" @bind="contactNumber" placeholder="Contact No." required>
					</div>

					<!-- Email Address -->
					<div class="col">
						<label class="text-light">Email Address</label>
						<input type="email" class="form-control form-control-sm" @bind="email" placeholder="Email" required>
					</div>
				</div>


				<!-- Row 4 -->
				<div class="row g-2 mt-3">

					<!-- Full Address -->
					<label class="text-light">Full Address</label>

					<!-- Region -->
					<div class="col">
						<label class="text-light">Region</label>
						<select class="form-select form-select-sm" value="@selectedRegion" @onchange="async _ => await LoadProvinceAsync(_)" required>
							<option value="" disabled hidden>@regionPlaceHolder</option>
							@foreach (var r in regions)
							{
								<option value="@r.code">@r.regionName</option>
							}
						</select>
					</div>

					<!-- Province -->
					<div class="col">
						<label class="text-light">Province</label>
						<select class="form-select form-select-sm" value="@selectedProvince" @onchange="async _ => await LoadCitiesAsync(_)" required>
							<option value="" disabled hidden>@provincePlaceHolder</option>
							@foreach (var p in provincesFromRegion)
							{
								<option value="@p.code">@p.name</option>
							}
						</select>
					</div>

					<!-- City -->
					<div class="col">
						<label class="text-light">City</label>
						<select class="form-select form-select-sm" value="@selectedCity" @onchange="async _ => await LoadBarangaysAsync(_)" required>
							<option value="" disabled hidden>@cityPlaceHolder</option>
							@foreach (var c in citiesFromProvince)
							{
								<option value="@c.code">@c.name</option>
							}
						</select>
					</div>

					<!-- Barangay -->
					<div class="col-3">
						<label class="text-light">Barangay</label>
						<select class="form-select form-select-sm" value="@selectedBarangay" required>
							<option value="" disabled hidden>@barangayPlaceHolder</option>
							@foreach (var b in barangaysFromCities)
							{
								<option value="@b.code">@b.name</option>
							}
						</select>
					</div>

					<!-- Street No. -->
					<div class="col">
						<label class="text-light">Street No.</label>
						<input class="form-control form-control-sm" @bind="streetNo" placeholder="Street No." required>
					</div>

					<!-- House No. -->
					<div class="col">
						<label class="text-light">House No.</label>
						<input class="form-control form-control-sm" @bind="houseNo" placeholder="House No." required>
					</div>

				</div>


				<!-- Row 5 -->
				<!--Birth Place address-->
				<div class="row g-2 mt-3">

					<label class="text-light">Birth Place</label>
					<!-- Region -->
					<div class="col">
						<label class="text-light">Region</label>
						<select class="form-select form-select-sm" value="@selectedBirthRegion" @onchange="async _ => LoadBirthProvincesAsync(_)" required>
							<option value="" disabled hidden>@regionPlaceHolder</option>
							@foreach (var r in regions)
							{
								<option value="@r.code">@r.regionName</option>
							}
						</select>
					</div>

					<!-- Province -->
					<div class="col">
						<label class="text-light">Province</label>
						<select class="form-select form-select-sm" value="@selectedBirthProvince" @onchange="async _ => LoadCitiesAsync(_)" required>
							<option value="" disabled hidden>@provincePlaceHolder</option>
							@foreach (var p in provincesFromRegion)
							{
								<option value="@p.code">@p.name</option>
							}
						</select>
					</div>

					<!-- City -->
					<div class="col">
						<label class="text-light" >City</label>
						<select class="form-select form-select-sm" value="@selectedBirthCity" required>
							<option value="" disabled hidden>@cityPlaceHolder</option>
							@foreach (var c in citiesFromProvince)
							{
								<option value="@c.code">@c.name.ToString()</option>
							}
						</select>
					</div>

					@*<!-- Barangay -->
					<div class="col-3">
						<label class="text-light">Barangay</label>
						<select class="form-select form-select-sm" @bind="selectedBarangay" required>
							@foreach (var b in barangays)
							{
								<option value="@b.BarangayId">@b.BarangayName</option>
							}
						</select>
					</div>*@

					<!-- Birth Date -->
					<div class="col">
						<label class="text-light">Birth Date</label>
						<input class="form-control form-control-sm" @bind="birthDate" type="date" required>
					</div>

					<!-- Occupation -->
					<div class="col">
						<label class="text-light">Occupation</label>
						<input class="form-control form-control-sm" @bind="Occupation" placeholder="Occupation" required>
					</div>

				</div>


				<div class="row g-2 mt-2">


					<!-- Row 6 (Father's Name)-->
					<div class="col-12">

						<label class="text-light">Father's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="fatherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="fatherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>


					<!-- Row 7 (Mother's Name)-->
					<div class="col-12">
						<label class="text-light">Mother's Maiden Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="motherLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="motherSuffix" placeholder="Suffix">
							</div>
						</div>
					</div>


					<!-- Row 8 (Beneficiary's Name) -->
					<div class="col-12">
						<label class="text-light">Beneficiary's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryFirstName" placeholder="First Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryMiddleName" placeholder="Middle Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryLastName" placeholder="Last Name">
							</div>
							<div class="col-1">
								<input class="form-control form-control-sm" @bind="beneficiarySuffix" placeholder="Suffix">
							</div>
						</div>
					</div>
				</div>

				<div class="row g-3 mt-3">
					<!-- Upload Government ID -->
					<div class="col-md-4">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>

						<!-- View Button -->
						<div class="d-flex gap-2">
							<input type="file" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>

					<!-- Upload 1x1 Picture -->
					<div class="col-md-4">
						<label class="text-light">Upload 1x1 Picture</label>

						<!-- View BUtton -->
						<div class="d-flex gap-2">
							<input type="file" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light">View</button>
						</div>
					</div>

					<!-- TIN -->
					<div class="col-md-3">
						<label class="text-light">Tax Identification Number</label>
						<input class="form-control" @bind="taxIdentificationNumber" placeholder="Tax Identification Number" required>
					</div>

				</div>

				<!-- Border -->
				<div class="d-flex align-items-center mt-5 mb-3">
					<span class="text-light me-2">Setup Sign In Credentials</span>
					<div class="flex-grow-1">
						<hr class="m-0" style="border: 1px solid white; opacity: 100%;" />
					</div>
				</div>

				<!-- Credentials Inputs -->
				<div class="row g-2 mb-3">

					<!-- Username -->
					<div class="col-3">
						<label class="text-light">Username</label>
						<input class="form-control form-control-sm" placeholder="Username" required>
					</div>

					<!-- Password -->
					<div class="col-3">
						<label class="text-light">Password</label>
						<input type="password" class="form-control form-control-sm" placeholder="Password" required>
					</div>
				</div>

				<!-- Terms and Conditions Checkbox -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Register Button -->
				<div class="text-end mt-3">
					<button class="btn btn-primary btn-secondary" @onclick="LoginAsync">Submit Application</button>
				</div>

			</div>
		</div>
	</main>
</div>



@code {

	private string error = string.Empty;

	public string firstName = string.Empty;
	public string middleName = string.Empty;
	public string lastName = string.Empty;
	public string suffix = string.Empty;

	public int age;
	public DateTime birthDate;
	public string selectedBirthCity = string.Empty;
	public string selectedBirthProvince = string.Empty;
	public string selectedBirthRegion = string.Empty;

	public string email = string.Empty;
	public string selectedSex = string.Empty;
	public string selectedCivilStatus = string.Empty;
	public string selectedReligion = string.Empty;
	public string contactNumber = string.Empty;
	public string Occupation = string.Empty;

	//address info
	public string houseNo = string.Empty;
	public string streetNo = string.Empty;
	public string selectedRegion = string.Empty;
	public string selectedProvince = string.Empty;
	public string selectedCity = string.Empty;
	public string selectedBarangay = string.Empty;

	//drop down selection place holders
	public const string regionPlaceHolder = "--Select Region--";
	public const string provincePlaceHolder = "--Select Province--";
	public const string cityPlaceHolder = "--Select City--";
	public const string barangayPlaceHolder = "--Select Barangay--";

	//Parents Name
	public string fatherFirstName = string.Empty;
	public string fatherMiddleName = string.Empty;
	public string fatherLastName = string.Empty;
	public string fatherSuffix = string.Empty;

	public string motherFirstName = string.Empty;
	public string motherMiddleName = string.Empty;
	public string motherLastName = string.Empty;
	public string motherSuffix = string.Empty;

	public string beneficiaryFirstName = string.Empty;
	public string beneficiaryMiddleName = string.Empty;
	public string beneficiaryLastName = string.Empty;
	public string beneficiarySuffix = string.Empty;
	public string userName = string.Empty;
	public string password = string.Empty;
	public string taxIdentificationNumber = string.Empty;

	<!--user birth info address--> 
	private List<RegionViewModel>? birthRegions = new();
	private List<ProvinceViewModel>? birthProvinces = new();
	private List<CityViewModel>? birthCities = new();
	<!--user full address-->
	private List<RegionViewModel>? regions = new List<RegionViewModel>();
	private List<ProvinceViewModel>? provinces = new List<ProvinceViewModel>();
	private List<ProvinceViewModel>? provincesFromRegion = new();	//	use this for the drop down selection
	private List<CityViewModel>? cities = new List<CityViewModel>();
	private List<CityViewModel>? citiesFromProvince = new();
	private List<BarangayViewModel>? barangays = new List<BarangayViewModel>();
	private List<BarangayViewModel>? barangaysFromCities = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadRegionAsync();
	}

	// For Full address of user
	private async Task LoadRegionAsync()
	{
		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/regions/");
		regions = JsonSerializer.Deserialize<List<RegionViewModel>>(json);
		if (regions is null) return;
	}

	//	Pass the ChangeEventArgs instance ONLY FOR drop down selections that need updating.
	private async Task LoadProvinceAsync(ChangeEventArgs? e = null)
	{

		//	Get the value of the selection
		selectedRegion = e?.Value?.ToString() ?? "";

		//	Get the provinces from the api.
		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/provinces/");
		provinces = JsonSerializer.Deserialize<List<ProvinceViewModel>>(json);
		if (provinces is null) return;

		//	Get the list of provinces with the selected region's region code
		provincesFromRegion = provinces.Where(p => p.regionCode.ToString() == selectedRegion).ToList();

		//	Default the selection to the first option each time provinces are updated.
		if (provincesFromRegion.Any())
		{
			selectedProvince = provincesFromRegion[0].code.ToString();
		} else
		{
			selectedProvince = string.Empty;
		}

		//	Rerender component
		StateHasChanged();
	}

	private async Task LoadCitiesAsync(ChangeEventArgs? e = null)
	{

		//	Get the value of the selection
		selectedProvince = e?.Value?.ToString() ?? "";

		//	Get the municipalities from the api.
		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/municipalities/");
		cities = JsonSerializer.Deserialize<List<CityViewModel>>(json);
		if (cities is null) return;

		//	Get the list of provinces with the selected region's region code
		citiesFromProvince = cities.Where(c => c.provinceCode.ToString() == selectedProvince).ToList();
		//	Default the selection to the first option each time provinces are updated.
		if (citiesFromProvince.Any())
		{
			selectedCity = citiesFromProvince[0].code.ToString();
		}
		else
		{
			selectedCity = string.Empty;
		}

		//	Rerender component
		StateHasChanged();
	}

	private async Task LoadBarangaysAsync(ChangeEventArgs? e = null)
	{
		selectedCity = e?.Value?.ToString() ?? "";
		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/barangays/");
		barangays = JsonSerializer.Deserialize<List<BarangayViewModel>>(json);
		if (barangays is null) return;

		barangaysFromCities = barangays.Where(b => b.municipalityCode.ToString() == selectedCity).ToList();
		if (barangaysFromCities.Any())
		{
			selectedBarangay = barangaysFromCities[0].code.ToString();
		}
		else
		{
			selectedBarangay = string.Empty;
		}

		//	Rerender component
		StateHasChanged();
	}

	// method to get user birth place
	private async Task LoadBirthProvincesAsync(ChangeEventArgs? e = null)
	{
		selectedBirthRegion = e?.Value?.ToString() ?? "";

		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/provinces/");
		provinces = JsonSerializer.Deserialize<List<ProvinceViewModel>>(json);
		if (provinces is null) return;
		provincesFromRegion = provinces.Where(p => p.regionCode.ToString() == selectedBirthRegion).ToList();
		if (provincesFromRegion.Any())
		{
			selectedBirthProvince = provincesFromRegion[0].code.ToString();
		}
		else
		{
			selectedBirthProvince = string.Empty;
		}
	}

	private async Task LoadBirthCitiesAsync(ChangeEventArgs? e = null)
	{

		//	Get the value of the selection
		selectedBirthProvince = e?.Value?.ToString() ?? "";

		//	Get the municipalities from the api.
		var json = await HttpClient.GetStringAsync("https://psgc.gitlab.io/api/municipalities/");
		cities = JsonSerializer.Deserialize<List<CityViewModel>>(json);
		if (cities is null) return;

		//	Get the list of provinces with the selected region's region code
		citiesFromProvince = cities.Where(c => c.provinceCode.ToString() == selectedBirthProvince).ToList();
		//	Default the selection to the first option each time provinces are updated.
		if (citiesFromProvince.Any())
		{
			selectedBirthCity = citiesFromProvince[0].code.ToString();
		}
		else
		{
			selectedBirthCity = string.Empty;
		}

		//	Rerender component
		StateHasChanged();
	}

	private int GetIdFromSelected(string selectedCode, List<dynamic> options)
	{
		foreach (var item in options)
		{
			if (item?.Code == selectedCode)
			{
				return item?.Id ?? 0;
			}
		}

		return 0;
	}

	private List<string> religionOptions = new List<string>
	{
		"Religion 1",
		"Religion 2",
		"Religion 3",
		"Religion 4"
	};

	private async Task LoginAsync()
	{
		try
		{
			await RegistrationService.RegisterAsync
			(
				userFirstName: firstName,
				userMiddleName: middleName,
				userLastName: lastName,
				userSuffix: suffix,
				birthDate: birthDate,
				birthCityId: GetIdFromSelected(selectedBirthCity, birthCities.Cast<dynamic>().ToList()),
				birthProvinceId: GetIdFromSelected(selectedBirthProvince, birthProvinces.Cast<dynamic>().ToList()),
				birthRegionId: GetIdFromSelected(selectedBirthRegion, birthRegions.Cast<dynamic>().ToList()), 
				houseNo: houseNo,
				street: streetNo,
				barangayId: GetIdFromSelected(selectedBarangay, barangays.Cast<dynamic>().ToList()),
				cityId: GetIdFromSelected(selectedCity, cities.Cast<dynamic>().ToList()),
				provinceId: GetIdFromSelected(selectedProvince, provinces.Cast<dynamic>().ToList()),
				regionId: GetIdFromSelected(selectedRegion, regions.Cast<dynamic>().ToList()),
				postalCode: 1000,
				age: age,
				sex: selectedSex,
				contactNumber: contactNumber,
				Occupation: Occupation,
				email: email, 
				civilStatus: selectedCivilStatus,
				userReligion: selectedReligion,
				fatherFirstName: fatherFirstName,
				fatherMiddleName: fatherMiddleName,
				fatherLastName: fatherLastName,
				fatherSuffix: fatherSuffix,
				motherFirstName: motherFirstName,
				motherMiddleName: motherMiddleName,
				motherLastName: motherLastName,
				motherSuffix: motherSuffix,
				beneficiaryFirstName: beneficiaryFirstName,
				beneficiaryMiddleName: beneficiaryMiddleName,
				beneficiaryLastName: beneficiaryLastName,
				beneficiarySuffix: beneficiarySuffix,
				username: userName,
				password: password,
				taxIdentificationNumber: taxIdentificationNumber
			);
			NavigationManager.NavigateTo("/");

		}

		catch (MissingFieldException ex)
		{
			error = ex.Message;
		}
		catch (Exception ex)
		{
			error = "Error occurred: " + ex.Message;
		}
	}

}