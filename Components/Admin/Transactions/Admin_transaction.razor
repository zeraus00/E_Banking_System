@page "/Admin_transaction"
@using Helpers;
@using Layout

@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

@inject AdminDataService adminDataService
@inject PageRedirectService redirectService
@inject AdminControlledSessionService adminControlledSessionService
@inject UserSessionService userSessionService
@inject UserDataService userDataService
@inject AuthenticationStateProvider AuthStateProvider



<div class="page">
    <header class="custom-card-clientpage clientheader py-4 align-items-start">
        <div class="px-5">
            <div class="d-flex align-items-center my-4">
                <h2>Admin - Transactions</h2>
            </div>
        </div>
    </header>

    <div class="d-flex align-items-center gap-3 m-3 flex-wrap">
        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
            <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
            <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Transaction Type</label>
            <select class="form-select form-select-sm" @bind="selectedTransactionTypeId">
                <option value="0" hidden>All</option>
                <option value="0">All</option>
                @foreach (var (typeName, index) in transactionTypes.Select((name, i) => (name, i + 1)))
                {
                    <option value="@index">@typeName</option>
                }
            </select>
        </div>

        <button class="btn btn-primary btn-sm shadow-sm" @onclick="OnFilterAsync">Filter</button>
        <button class="btn btn-danger btn-sm shadow-sm" @onclick="OnClearFilterAsync">Clear Filter</button>
    </div>

    <hr class="m-3" style="border: 1px solid white; opacity: 100%;" />

    <div class="table-responsive m-4 rounded">
        <table class="table table-bordered text-center">
            <thead class="table-info">
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Transaction Type</th>
                    <th>Status</th>
                    <th>Amount</th>
                    <th>Receiver ID</th>
                    <th>Sender ID</th>
                    <th>Previous Balance</th>
                    <th>New Balance</th>
                    <th>Transaction Fee</th>
                </tr>
            </thead>
            <tbody>
                @if (transactionList.Any())
                {
                    @foreach (var transaction in transactionList)
                    {
                        <tr class="bg-light">
                            <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                            <td>@transaction.TransactionTime.ToString(@"hh\:mm\:ss")</td>
                            <td>@transaction.TransactionType.TransactionTypeName</td>
                            <td>@transaction.Status</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.Amount)</td>

                            @switch ((TransactionTypeIDs)transaction.TransactionType.TransactionTypeId)
                            {
                                case TransactionTypeIDs.Outgoing_Transfer:
                                    <td>@transaction.CounterAccount?.AccountName</td>
                                    <td>@transaction.MainAccount?.AccountName</td>
                                    break;
                                case TransactionTypeIDs.Incoming_Transfer:
                                    <td>@transaction.MainAccount?.AccountName</td>
                                    <td>@transaction.CounterAccount?.AccountName</td>
                                    break;
                                case TransactionTypeIDs.Withdrawal:
                                    <td>@(transaction.ExternalVendor?.VendorName ?? "--")</td>
                                    <td>--</td>
                                    break;
                                case TransactionTypeIDs.Deposit:
                                    <td>--</td>
                                    <td>@(transaction.ExternalVendor?.VendorName ?? "--")</td>
                                    break;
                                default:
                                    <td>--</td>
                                    <td>--</td>
                                    break;
                            }

                            <td>@FormatHelper.BalanceFormatter(transaction.PreviousBalance)</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.NewBalance)</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.TransactionFee)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-white">No transactions found.</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="scroll-container gap-3 mx-5">
            <button class="arrow-ud" @onclick="PreviousPage" disabled="@isPreviousDisabled">
                <i class="bi bi-chevron-left text-light"></i>
            </button>
            <button class="arrow-ud" @onclick="NextPage" disabled="@isNextDisabled">
                <i class="bi bi-chevron-right text-light"></i>
            </button>
        </div>

        <div class="page-container text-center text-light mt-2 mb-3 mx-5">
            Page @pageNumber of @availablePages
        </div>
    </div>
</div>

@code {
    private AdminSession? adminSession;
    private List<string> transactionTypes = new();

    private string message = "";

    //  Filters.
    private int selectedTransactionTypeId;
    private DateTime? startDate = DateTime.Now.Date.AddDays(-DateTime.Now.Day + 1);
    private DateTime? endDate = DateTime.Now.Date;

    //  Transaction List.
    private List<Transaction> transactionList = new();

    private int remainingTransactionsCount;

    //  Pagination.
    private int pageSize = 5;
    private int pageNumber = 1;
    private int availablePages = 0;

    private bool isNextDisabled = false;
    private bool isPreviousDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        transactionTypes = TransactionTypes.AS_STRING_LIST;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                adminSession = await userSessionService.GetAdminSession();

                //  Get transaction list from database.
                await LoadTransactionsAsync();
                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect Admin to DASHBOARD if there is no ongoing admin session.
                redirectService.redirectWithNavigationManager(PageRoutes.DASHBOARD);
            }
        }
    }
    private async Task NextPage()
    {
        isPreviousDisabled = false;
        pageNumber++;
        await LoadTransactionsAsync();
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            isNextDisabled = false;
            pageNumber--;
            if (pageNumber == 1)
                isPreviousDisabled = true;
            await LoadTransactionsAsync();
            StateHasChanged();
        }
    }
    private async Task OnFilterAsync()
    {
        if (startDate > endDate)
        {
            await DisplayMessage("Start date cannot be later than end date.");
            return;
        }
        pageNumber = 1;
        await LoadTransactionsAsync();
    }
    private async Task OnClearFilterAsync()
    {
        startDate = DateTime.Now.Date.AddDays(-DateTime.Now.Day + 1);
        endDate = DateTime.Now.Date;
        selectedTransactionTypeId = 0;
        pageNumber = 1;
        await LoadTransactionsAsync();
    }
    private async Task LoadTransactionsAsync()
    {
        //  Load the filtered transaction list from the database.
        transactionList = await adminDataService
            .AdminLoadTransactionsListAsync(
                pageSize: pageSize,
                pageNumber: pageNumber,
                transactionStartDate: startDate,
                transactionEndDate: endDate,
                transactionTypeId: selectedTransactionTypeId
            );
        //  Get the remaining transactions count after the current page.
        remainingTransactionsCount = await adminDataService
            .AdminCountRemainingTransactionsAsync(
                pageSize: pageSize,
                pageNumber: pageNumber,
                transactionStartDate: startDate,
                transactionEndDate: endDate,
                transactionTypeId: selectedTransactionTypeId
            );
        //  Calculate the number of remaining pages.
        availablePages = remainingTransactionsCount == 0 && pageNumber == 1 ?
            1 :
            pageNumber + ((int)Math.Ceiling((double)remainingTransactionsCount / pageSize));

        if (!transactionList.Any() || remainingTransactionsCount == 0)
            //  Disable the next button if the list is empty or if there are no
            //  more transactions after the current page.
            isNextDisabled = true;
        else
            isNextDisabled = false;
    }
    private async Task DisplayMessage(string msg)
    {
        message = msg;
        StateHasChanged();
        await Task.Delay(3000);
        message = "";
        StateHasChanged();
    }
}
