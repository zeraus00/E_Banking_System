@using Layout

@page "/Manage_accounts"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject AdminDataService adminDataService

<div class="main">
    <div class="dashboard-container">

        <div class="top-bar mx-3">
            <h2>Manage Accounts</h2>
        </div>

        <hr class="divider" />

        <div class="d-flex align-items-center gap-3 m-3 flex-wrap">
            <div class="d-flex align-items-center gap-3">
                <input class="form-control form-control-sm" @bind="searchAccount" placeholder="Search specific account" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Account Type</label>
                <select class="form-select form-select-sm" @bind="selectedType">
                    <option value="0">All</option>
                    <option value="1">Personal Account</option>
                    <option value="2">Joint Account</option>
                </select>
            </div>

            <button class="btn btn-primary btn-sm shadow-sm" @onclick="Filter">Filter</button>
            <button class="btn btn-danger btn-sm shadow-sm" @onclick="ClearFilter">Clear Filter</button>
        </div>

        <hr class="divider" />

        <div class="table-responsive m-4 rounded">
            <table class="table table-bordered text-center">
                <thead class="table-info">
                    <tr>
                        <th>Date of<br />Registration</th>
                        <th>Account No.</th>
                        <th>Name</th>
                        <th>Account Type</th>
                        <th>Operation</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (accountList != null && accountList.Any())
                    {
                        @foreach (var a in accountList)
                        {
                            <tr class="bg-light">
                                <td>@a.DateOpened.ToString("MM/dd/yyyy")</td>
                                <td>@a.AccountNumber</td>
                                <td>@a.AccountName</td>
                                <td>@a.AccountType.AccountTypeName</td>
                                <td>
                                    <a href="/View_account" class="btn btn-info btn-secondary btn-sm rounded text-dark shadow-sm" style="border: 2px solid cyan">View</a>
                                    <button class="btn btn-danger btn-secondary btn-sm rounded text-light shadow-sm" style="border: 2px solid red" @onclick="() => DeleteAccount(a)">Delete</button>
                                </td>
                                <td class="text-secondary">@a.AccountStatusType.AccountStatusTypeName</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-muted">No accounts found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DateTime? startDate ;
    private DateTime? endDate;
    private int selectedType = 0;
    private string searchAccount = "";

    private List<Account> accountList = new();
    private List<Account> mockAccounts = new();

    protected override async Task OnInitializedAsync()
    {
        mockAccounts = new List<Account>
        {
            new Account
            {
                AccountNumber = "1234-5678",
                AccountName = "Sample Name 1",
                AccountType = new AccountType(){AccountTypeName="Personal Account"},
                AccountStatusType = new AccountStatusType() {AccountStatusTypeName = "Active"},
                DateOpened = DateTime.Today.AddDays(-1)
            },
            new Account
            {
                AccountNumber = "0987-6543",
                AccountName = "Sample Name 2",
                AccountType = new AccountType(){AccountTypeName="Joint Account"},
                AccountStatusType = new AccountStatusType() {AccountStatusTypeName = "Deactivated"},
                DateOpened = DateTime.Today.AddDays(-1)
            }
        };
        accountList = await adminDataService.FilterAccountsAsync();
        if (!accountList.Any())
            accountList = mockAccounts;
    }

    private async Task Filter()
    {
        accountList = await adminDataService
            .FilterAccountsAsync(
                searchAccount,
                startDate,
                endDate,
                selectedType
            );
    }

    private async Task ClearFilter()
    {
        startDate = null;
        endDate = null;
        selectedType = 0;
        searchAccount = "";
        accountList = await adminDataService.FilterAccountsAsync();
    }

    private void ViewAccount(Account account)
    {
        Navigation.NavigateTo($"/View_account");
    }

    private void DeleteAccount(Account account)
    {
    }
}
