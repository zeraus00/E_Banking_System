@page "/View_account"

@using E_BankingSystem.Components.Client_page.Accounts
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

@inject AdminControlledSessionService adminControlledSessionService
@inject AdminDataService adminDataService
@inject NavigationManager navigationManager
@inject UserDataService userDataService

<div class="page">
    <main>
        <div class="dashboard-container">

            <!-- Top Bar -->
            <div class="top-bar mx-3">
                <h2>View Account</h2>
            </div>

            <hr class="divider" />

            <!-- Card Section -->
            <div class="card-section justify-content-between align-items-center mx-4">
                <!-- Account Card -->
                @if (accountViewSession.AccountId != 0)
                {
                    <AccountCard LinkedAccount="@accountViewSession" ContactNumber="@accountViewSession.AccountContactNo" IsEditable="true" />
                }

                <!-- Data Card -->
                <div class="main-chart">
                    <label>Transaction History</label>
                    <E_BankingSystem.Components.Admin.Dashboard.Charts.User_LinerChart Labels="LineLabels" WithdrawData="LineWithdrawData" DepositData="LineDepositData" OutgoingTransfer="LineOutgoingTransferData" IncomingTransfer="LineIncomingTransferData" />
                </div>
            </div>

            <hr class="divider" />

            <!-- Filter Bar -->
            <div class="top-bar-right mb-4">
                <div class="d-flex align-items-center gap-3 flex-wrap">
                    <!-- Start Date -->
                    <div class="d-flex align-items-center gap-3">
                        <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                        <input class="form-control form-control-sm"/>
                    </div>

                    <!-- End Date -->
                    <div class="d-flex align-items-center gap-3">
                        <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                        <input class="form-control form-control-sm"/>
                    </div>

                    <!-- Filter Buttons -->
                    <button class="btn btn-primary btn-sm shadow-sm">Filter</button>
                    <button class="btn btn-danger btn-sm shadow-sm">Clear Filter</button>
                </div>
            </div>

            <div class="table-responsive m-4 rounded">
                <table class="table table-bordered text-center">
                    <thead class="table-info">
                        <tr>
                            <th>Account No.</th>
                            <th>Name</th>
                            <th>Account Type</th>
                            <th>Status</th>
                            <th>Date of<br />Registration</th>
                            <th>Time of<br />Registration</th>
                        </tr>
                    </thead>
                </table>
            </div>

        </div>
    </main>
</div>

@code {
    private decimal savingsAmount = 0.0m;

    private LinkedAccount accountViewSession = new();

    private List<string> LineLabels = new();
    private List<decimal> LineWithdrawData = new();
    private List<decimal> LineDepositData = new();
    private List<decimal> LineOutgoingTransferData = new();
    private List<decimal> LineIncomingTransferData = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                accountViewSession = await adminControlledSessionService.GetAccountViewSession();
                savingsAmount = await adminDataService.GetAccountBalanceAsync(accountViewSession.AccountId);

                var LineChartData = await adminDataService.GetTransactionsVolumeByTimeFilter(
                    AdminDashboardTimeFilters.DAILY,
                    DateTime.Now,
                    accountViewSession.AccountId,
                    false
                );

                // mockup data
                LineLabels = LineChartData.Select(lcd => lcd.Label).ToList();
                LineWithdrawData = LineChartData.Select(lcd => lcd.DataUnits[0].Value).ToList();
                LineDepositData = LineChartData.Select(lcd => lcd.DataUnits[1].Value).ToList();
                LineOutgoingTransferData = LineChartData.Select(lcd => lcd.DataUnits[2].Value).ToList();
                LineIncomingTransferData = LineChartData.Select(lcd => lcd.DataUnits[3].Value).ToList();

                StateHasChanged();
            }
            catch (ControlledSessionNotFound)
            {
                navigationManager.NavigateTo(PageRoutes.MANAGE_ACCOUNTS);
            }
        }
    }

}
