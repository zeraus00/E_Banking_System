@page "/AdminSettings_contact_password"
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

@inject CredentialValidationService credentialValidationService
@inject PageRedirectService redirectService
@inject UserSessionService adminSessionService


<div class="page">
	<main>
		<!-- Header -->
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Verification</h2>
				</div>
			</div>
		</header>


		<EditForm Model="loginModel" OnValidSubmit="ValidatePassword" FormName="ChangeEmailPassword">
			<DataAnnotationsValidator />
			<!-- Verification Card Container -->
			<div class="card registration shadow-lg mt-3">
				<h3 class="fw-bold text-light mt-5 mx-5">Enter Password</h3>

				<!-- Instructions -->
				<h5 class="indent fw-light text-light my-3 mx-5">
					To verify your identity, enter your password to continue.
				</h5>

				<!-- Password Input Field -->
				<div class="loginform loginform sm">
					<InputText type="password" class="form-control form-control-custom form-control-lg form-control_custom mb-3" @bind-Value="loginModel.Password" placeholder="Password" />
					<ValidationMessage For="() => loginModel.Password" />
				</div>

				<!-- Submit Button -->

				<button type="submit" class="btn btn-primary btn-lg d-grid col-4 mx-auto mt-3 mb-5">
					Submit
				</button>

				@* <NavLink class="btn btn-primary btn-lg d-grid col-4 mx-auto mt-3 mb-5" href="/Settings_change_email">
					Submit
				</NavLink> *@

				<!-- try Another Way Navlink -->
				@* 			<NavLink class="nav-link custom-nav-link-2 fw-lighter mx-auto mb-5" href="Settings_otp_verification">
					Try another way
				</NavLink> *@

				<!-- Go Back Navlink -->
				<NavLink class="nav-link custom-nav-link margin" href="/AdminSettings_page">
					← Go Back
				</NavLink>

			</div>
		</EditForm>
	</main>
</div>

@code
{
[SupplyParameterFromForm]
public LogInViewModel loginModel { get; set; } = new();

private string password = string.Empty;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
	if (firstRender)
	{
		try
		{
			//	Get admin session details from session storage.
			//	Throws SessionNotFoundException if session is not found.
			AdminSession adminSession = await adminSessionService.GetAdminSession();

			//	Get email of current admin.
			loginModel.Email = adminSession.Email;

			//	Reload component.
			StateHasChanged();
		}
		catch (SessionNotFoundException)
		{
			//	Redirect to LOGGING_IN_PAGE if session is not found.
			redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
		}
	}
}

private async Task ValidatePassword()
{
	//	Validate admin password.
	UserAuth? adminAuth = await credentialValidationService.TryValidateUserAsync(loginModel.Email!, loginModel.Password!);

	if (adminAuth is not null)
	{
		//	Redirect to ADMINSETTINGS_CHANGE_CONTACT if password is correct.
		redirectService.redirectWithNavigationManager(PageRoutes.ADMINSETTINGS_CHANGE_CONTACT);
	}
}
}