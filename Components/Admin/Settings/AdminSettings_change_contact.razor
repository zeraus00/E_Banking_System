@using ViewModels;

@page "/AdminSettings_change_contact"
@attribute [Authorize(Roles = "Administrator")]

@inject ClaimsHelperService claimsHelper
@inject PageRedirectService redirectService
@inject UserSessionService adminSessionService

<div class="page">
	<main>
		<!-- Header -->
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Update Contact Number</h2>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<div class="card registration shadow mt-3">
			<div class="mt-3 mx-5">

				<!-- Password Conditions -->
				<h5 class="text-start fw-light text-light my-3">
					Enter your new contact number.
				</h5>
				<ul class="fs-6 fw-light">
					<li>
						A one-time password (OTP) code will be sent to the new contact number.
					</li>
				</ul>
			</div>

			<!-- Password Fields -->
			<EditForm Model="contactModel" OnValidSubmit="ValidateContact" FormName="ChangeContactConfirm">
				<DataAnnotationsValidator />
				<!-- Password Fields -->
				<div class="loginform sm mt-1">

					<InputText class="form-control form-control-custom form-control-lg mb-3" type="email" @bind-Value="contactModel.ContactNew" placeholder="New Contact No." />
					<ValidationMessage For="() => contactModel.ContactNew" />
					<InputText class="form-control form-control-custom form-control-lg mb-3" type="email" @bind-Value="contactModel.ContactConfirm" placeholder="Confirm New Contact No." />
					<ValidationMessage For="() => contactModel.ContactConfirm" />
				</div>

				<!-- Change Password Button -->
				<div class="mt-3 text-center">
					<NavLink class="w-25 mx-auto" href="/AdminSettings_page">
						<button class="btn btn-danger w-25">Cancel</button>
					</NavLink>
					<button type="submit" class="btn btn-primary w-25">Continue</button>
				</div>
			</EditForm>
		</div>
	</main>


</div>

@code
{
	[SupplyParameterFromForm]
	ContactNumberChangeViewModel contactModel { get; set; } = new();

	private string error = string.Empty;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				//	Get user session details from session storage.
				//	Throws SessionNotFoundException if session is not found.
				AdminSession adminSession = await adminSessionService.GetAdminSession();

				//	Reload component
				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				//	Redirect to LOGGING_IN_PAGE if user session is not found.
				redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
			}
		}
	}

	private void ValidateContact()
	{
		if (contactModel.ContactNew!.Equals(contactModel.ContactConfirm))
		{
			//	Handle contact no change logic here.

			//	Redirect to LOG_OUT_PAGE.
			redirectService.redirectWithNavigationManager(PageRoutes.LOG_OUT_PAGE);
			return;
		}
		else
		{
			error = "Contact numbers do not match.";
		}
	}
}
