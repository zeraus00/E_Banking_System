@page "/ViewDetails"
@attribute [Authorize(Roles="Administrator")]
@rendermode InteractiveServer

@inject AdminControlledSessionService adminControlledSessionService
@inject AdminDataService adminDataService
@inject PageRedirectService redirectService
@inject UserDataService userDataService

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<PageTitle>Account Confimation</PageTitle>

<div class="card registration mt-3 p-4 shadow-lg">
    <main>
        <h3 class="fw-bold text-light">Confirmation of Details</h3>

        <div class="row g-2 mt-2">
            <div class="col-3">
                <label class="text-light">First Name:</label>
                <div class="form-control form-control-sm bg-light">@(userInfo?.UserName?.FirstName ?? string.Empty)</div>
            </div>

            <div class="col-3">
                <label class="text-light">Middle Name:</label>
                <div class="form-control form-control-sm bg-light">@(userInfo?.UserName?.MiddleName ?? string.Empty)</div>
            </div>

            <div class="col-3">
                <label class="text-light">Last Name:</label>
                <div class="form-control form-control-sm bg-light">@(userInfo?.UserName?.LastName ?? string.Empty)</div>
            </div>

            <div class="col-1">
                <label class="text-light">Suffix:</label>
                <div class="form-control form-control-sm bg-light">@(userInfo?.UserName?.Suffix ?? string.Empty)</div>
            </div>
        </div>

        <!-- Row 3 -->
        <div class="row g-2 mt-2">
            <div class="col-1">
                <label class="text-light">Age</label>
                <div class="form-control form-control-sm">@(userInfo?.Age ?? 0)</div>
            </div>

            <div class="col-1">
                <label class="text-light">Sex</label>
                <div class="form-control form-control-sm">@(userInfo?.Sex ?? string.Empty)</div>
            </div>

            <div class="col-2">
                <label class="text-light">Civil Status</label>
                <div class="form-control form-control-sm">@(userInfo?.CivilStatus ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Religion</label>
                <div class="form-control form-control-sm">@(userInfo?.Religion?.ReligionName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Contact No.</label>
                <div class="form-control form-control-sm">@(userInfo?.ContactNumber ?? string.Empty)</div>
            </div>

        </div>

        <!-- Row 4 -->
        <div class="row g-2 mt-3">
            <label class="text-light">Full Address</label>

            <div class="col">
                <label class="text-light">Region</label>
                <div class="form-control form-control-sm">@(address?.Region?.RegionName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Province</label>
                <div class="form-control form-control-sm">@(address?.Province?.ProvinceName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Municipality/City</label>
                <div class="form-control form-control-sm">@(address?.City?.CityName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Barangay</label>
                <div class="form-control form-control-sm">@(address?.Barangay?.BarangayName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Postal Code</label>
                <div class="form-control form-control-sm">@(address?.PostalCode ?? 0000)</div>
            </div>

            <div class="col">
                <label class="text-light">Street No.</label>
                <div class="form-control form-control-sm">@(address?.Street ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">House No.</label>
                <div class="form-control form-control-sm">@(address?.House ?? string.Empty)</div>
            </div>
        </div>

        <!-- Row 5 -->
        <div class="row g-2 mt-3">
            <label class="text-light">Birth Place</label>

            <div class="col">
                <label class="text-light">Region</label>
                <div class="form-control form-control-sm">@(birthInfo?.Region?.RegionName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Province</label>
                <div class="form-control form-control-sm">@(birthInfo?.Province?.ProvinceName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Municipality/City</label>
                <div class="form-control form-control-sm">@(birthInfo?.City?.CityName ?? string.Empty)</div>
            </div>

            <div class="col">
                <label class="text-light">Birth Date</label>
                <div class="form-control form-control-sm">@((birthInfo?.BirthDate ?? DateTime.UtcNow.Date).ToString("yyyy/MM/dd"))</div>

            </div>

            <div class="col">
                <label class="text-light">Occupation</label>
                <div class="form-control form-control-sm">@(userInfo?.Occupation ?? string.Empty)</div>
            </div>
        </div>

        <div class="row g-2 mt-2">
            <!-- Row 6 (Father's Name)-->
            <div class="col-12">
                <label class="text-light">Father's Name</label>
                <div class="row g-2">
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.FatherName?.FirstName ?? string.Empty)</div>
                    </div>
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.FatherName?.MiddleName ?? string.Empty)</div>
                    </div>
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.FatherName?.LastName ?? string.Empty)</div>
                    </div>
                    <div class="col-1">
                        <div class="form-control form-control-sm">@(userInfo?.FatherName?.Suffix ?? string.Empty)</div>
                    </div>
                </div>
            </div>

            <!-- Row 7 (Mother's Name)-->
            <div class="col-12">
                <label class="text-light">Mother's Maiden Name</label>
                <div class="row g-2">
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.MotherName?.FirstName ?? string.Empty)</div>
                    </div>
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.MotherName?.MiddleName ?? string.Empty)</div>
                    </div>
                    <div class="col-3">
                        <div class="form-control form-control-sm">@(userInfo?.MotherName?.LastName ?? string.Empty)</div>
                    </div>
                    <div class="col-1">
                        <div class="form-control form-control-sm">@(userInfo?.MotherName?.Suffix ?? string.Empty)</div>
                    </div>
                </div>
            </div>

            <!-- Row 8 (Beneficiary's Name) -->
            <div class="col-12">
                <label class="text-light">Beneficiary's Name</label>
                <div class="row g-2">
                    <div class="col-3">
                        <input class="form-control form-control-sm" placeholder="Account Name">
                    </div>
                    <div class="col-3">
                        <input class="form-control form-control-sm" placeholder="Account Number">
                    </div>
                    <div class="col-2">
                        <button class="btn btn-sm btn-primary w-100">
                            Check Account
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-3 mt-3">
            <!-- Upload Government ID -->
            <div class="col-4">
                <label class="text-light">Uploaded Government Valid ID (Front & Back)</label>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-light w-75" data-bs-toggle="modal" data-bs-target="#govIdModal">View</button>
                </div>
            </div>

            <!-- Upload 1x1 Picture -->
            <div class="col-4">
                <label class="text-light">Upload 1x1 Picture</label>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-light w-75" data-bs-toggle="modal" data-bs-target="#picModal">View</button>
                </div>
            </div>

            <!--View government Id-->
            <div class="modal fade" id="govIdModal" tabindex="-1" aria-labelledby="govIdModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content bg-dark text-white">
                        <div class="modal-header">
                            <h5 class="modal-title" id="govIdModalLabel">Government Valid ID</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body text-center">
                            @if (!string.IsNullOrWhiteSpace(GovernmentId))
                            {
                                <img src="@GovernmentId" class="img-fluid rounded shadow" alt="Government ID" />
                            }
                            else
                            {
                                <p>No Government ID uploaded.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!--View Profile Picture-->
            <div class="modal fade" id="picModal" tabindex="-1" aria-labelledby="picModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content bg-dark text-white">
                        <div class="modal-header">
                            <h5 class="modal-title" id="picModalLabel">Profile Picture</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body text-center">
                            @if (!string.IsNullOrWhiteSpace(ProfilePicture))
                            {
                                <img src="@ProfilePicture" class="img-fluid rounded shadow" alt="Profile Picture" />
                            }
                            else
                            {
                                <p>No profile picture uploaded.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- TIN -->
            <div class="col-md-3">
                <label class="text-light">Tax Identification Number</label>
                <div class="form-control form-control-sm">@(userInfo?.TaxIdentificationNumber ?? string.Empty)</div>
            </div>
        </div>

        <!-- Border -->
        <div class="d-flex align-items-center mt-5 mb-3">
            <span class="text-light me-2">Sign In Credentials</span>
            <div class="flex-grow-1">
                <hr class="m-0" style="border: 1px solid white; opacity: 100%;" />
            </div>
        </div>

        <!-- Credentials Inputs -->
        <div class="row g-2 mb-3">
            <div class="col-3">
                <label class="text-light">Email Address</label>
                <div class="form-control form-control-sm">@(userInfo?.UserAuth?.Email ?? string.Empty)</div>
            </div>
            <div class="col-3">
                <label class="text-light">Username</label>
                <div class="form-control form-control-sm">@(userInfo?.UserAuth?.UserName ?? string.Empty)</div>
            </div>
        </div>

        <!-- Register Button -->
        <div class="d-flex justify-content-end gap-2 mt-3">
            <button class="btn btn-danger btn-secondary mx-2" @onclick="RejectAsync">Reject</button>
            @* <button class="btn btn-warning btn-secondary fs-6 mx-2">Resubmission<br />Request</button> *@
            <button class="btn btn-primary btn-secondary mx-2" @onclick="ApproveAsync">Approve</button>
        </div>
    </main>
</div>

@code
{
    private int accountId { get; set; }
    private UserAuth? userAuth { get; set; }
    private UserInfo? userInfo { get; set; } 
    private Address? address { get; set; } 
    private BirthInfo? birthInfo { get; set; }

    private string error { get; set; } = string.Empty;

    private string? GovernmentId => userInfo?.GovernmentId != null
    ? $"data:image/jpeg;base64,{Convert.ToBase64String(userInfo.GovernmentId)}"
    : null;

    private string? ProfilePicture => userInfo?.ProfilePicture != null
        ? $"data:image/jpeg;base64,{Convert.ToBase64String(userInfo.ProfilePicture)}"
        : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                PendingAccountSession pendingAccountSession = await adminControlledSessionService.GetPendingAccountSession();
                accountId = pendingAccountSession.PendingAccountId;
                userInfo = await adminDataService.GetAccountPrimaryOwner(accountId);

                if (userInfo.AddressId is int addressId)
                {
                    address = await userDataService.TryGetAddressAsync(addressId);
                }
                if (userInfo.BirthInfoId is int birthInfoId)
                    birthInfo = await userDataService.TryGetBirthInfoAsync(birthInfoId);

                Console.WriteLine("EMAIL: " + userInfo?.UserAuth?.Email ?? "NO EMAIL");

                StateHasChanged();
            } 
            catch (SessionNotFoundException)
            {
                redirectService.redirectWithNavigationManager(PageRoutes.DASHBOARD);
            }
            catch (AccountNotFoundException ex)
            {
                Console.WriteLine("ACCOUNT_NOT_FOUND: " + ex.Message);
                error = ex.Message;
            }
            catch (ControlledSessionNotFound)
            {
                redirectService.redirectWithNavigationManager(PageRoutes.DASHBOARD);
            }
        }
    }

    private async Task RejectAsync()
    {
        try
        {
            await adminDataService.UpdateAccountStatus(accountId, (int)AccountStatusTypeIDs.Denied);
            await adminControlledSessionService.ClearPendingAccountSession();
            redirectService.redirectWithNavigationManager(PageRoutes.PENDING_ACCOUNTS);
        }
        catch (AccountNotFoundException ex)
        {
            Console.WriteLine("COULD NOT FETCH PRIMARY OWNER. " + ex.Message);
            error = ex.Message;
        }
        catch (UserNotFoundException ex)
        {
            Console.WriteLine("COULD NOT FETCH PRIMARY OWNER. " + ex.Message);
            error = ex.Message;
        }
    }
    private async Task ApproveAsync()
    {
        try
        {
            await adminDataService.UpdateAccountStatus(accountId, (int)AccountStatusTypeIDs.Active);
            await adminControlledSessionService.ClearPendingAccountSession();
            redirectService.redirectWithNavigationManager(PageRoutes.PENDING_ACCOUNTS);
        }
        catch (AccountNotFoundException ex)
        {
            Console.WriteLine("COULD NOT FETCH PRIMARY OWNER. " + ex.Message);
            error = ex.Message;
        }
        catch (UserNotFoundException ex)
        {
            Console.WriteLine("COULD NOT FETCH PRIMARY OWNER. " + ex.Message);
            error = ex.Message;
        }
    }
}