@using System.Text.RegularExpressions;

@page "/PendingAccounts"
@attribute [Authorize(Roles="Administrator")]
@rendermode InteractiveServer

@inject AdminControlledSessionService adminControlledSessionService
@inject AdminDataService adminDataService
@inject NavigationManager Navigation
@inject PageRedirectService redirectService

<div class="main">
    <div class="dashboard-container">

        @if (message.Length > 0)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>@message</strong>
            </div>
        }
        <div class="top-bar mx-3">
            <h2>Pending Accounts</h2>
        </div>

        <hr class="divider" />

        <div class="d-flex align-items-center gap-3 m-3 flex-wrap">

            <div class="d-flex align-items-center gap-3">
                <input class="form-control form-control-sm" @bind="accountNumber" placeholder="Search specific account">
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Account Type</label>
                <select class="form-select form-select-sm" @bind="selectedAccountTypeId">
                    <option value="0">All</option>
                    @foreach(var type in accountTypeList)
                    {
                        <option value="@accountTypeList.IndexOf(type)">@type</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary btn-sm shadow-sm" @onclick="OnFilterAsync">Filter</button>
            <button class="btn btn-danger btn-sm shadow-sm" @onclick="OnClearFilterAsync">Clear Filter</button>

        </div>

        <hr class="divider" />

        <div class="table-responsive m-4 rounded">
            <table class="table table-bordered text-center">
                <thead class="table-info">
                    <tr>
                        <th class="align-middle">Date</th>
                        <th class="align-middle">Account<br />Number</th>
                        <th class="align-middle">Name</th>
                        <th class="align-middle">Account Type</th>
                        <th class="align-middle">Operation</th>
                        <th class="align-middle">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in accountList)
                    {
                        <tr class="bg-light">
                            <td>@a.DateOpened.ToString("MM/dd/yyyy")</td>
                            <td>@a.AccountNumber</td>
                            <td>@a.AccountName</td>
                            <td>@a.AccountType.AccountTypeName</td>
                            <td>
                                <button class="btn btn-info btn-secondary btn-sm rounded text-dark shadow-sm" style="border: 2px solid cyan" @onclick="() => OnViewClick(a)">View</button>
                            </td>
                            <td class="text-secondary">@a.AccountStatusType.AccountStatusTypeName</td>
                        </tr>
                    }
                    @* @foreach (var a in accounts)
                    {
                        <tr class="bg-light">
                            <td>@a.Date.ToString("MM/dd/yyyy")</td>
                            <td>@a.Time.ToString(@"hh\:mm\:ss")</td>
                            <td>@a.Name</td>
                            <td>@a.AccountType</td>
                            <td>
                                <button class="btn btn-info btn-secondary btn-sm rounded text-dark shadow-sm" style="border: 2px solid cyan" @onclick="() => ViewDetails(a)">View</button>
                            </td>
                            <td class="text-secondary">@a.Status</td>
                        </tr>
                    } *@
                </tbody>
            </table>
        </div>

        <div class="scroll-container gap-3 mx-5">
            <button class="arrow-ud" disabled="@isPreviousDisabled">
                <i class="bi bi-chevron-left text-light"></i>
            </button>
            <button class="arrow-ud" disabled="@isNextDisabled">
                <i class="bi bi-chevron-right text-light"></i>
            </button>
        </div>
        @* 
        <div class="page-container text-center text-light mt-2 mb-3 mx-5">
            Page @pageNumber of @masterListAvailablePages
        </div> *@

    </div>
</div>

@code {
    private string message = "";

    private List<string> accountTypeList = AccountTypes.AS_STRING_LIST;

    private DateTime? startDate = DateTime.Now.AddDays(-DateTime.Now.Day + 1);
    private DateTime? endDate = DateTime.Now;
    private int selectedAccountTypeId = 0;
    private string accountNumber = "";
    private string cleanedAccountNumber = "";

    private List<Account> accountList = new();

    private int remainingAccountsCount;

    //  Pagination
    private int pageSize = 5;
    private int pageNumber = 1;
    private int availablePages;

    private bool isNextDisabled = false;
    private bool isPreviousDisabled = false;


    protected override async Task OnInitializedAsync()
    {
        isPreviousDisabled = true;
        await LoadAccountsAsync();
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //  Clear all admin controlled sessions.
            await adminControlledSessionService.ClearAdminControlledSessions();
        }
    }
    private async Task OnFilterAsync()
    {
        if (startDate > endDate)
        {
            await DisplayMessage("Start date cannot be later than end date.");
            return;
        }
        //  Validate the account number input if it is not empty.
        bool isAccountNumberValid = await ValidateAccountNumberInput();
        if (!isAccountNumberValid)
            return;
        pageNumber = 1;
        await LoadAccountsAsync();

    }
    private async Task OnClearFilterAsync()
    {
        //  Resets all filters and reloads the list.
        startDate = null;
        endDate = null;
        selectedAccountTypeId = 0;
        accountNumber = "";
        cleanedAccountNumber = "";
        pageNumber = 1;
        await LoadAccountsAsync();
    }
    private async Task OnViewClick(Account account)
    {
        try
        {
            PendingAccountSession pendingAccountSession = new PendingAccountSession()
                {
                    PendingAccountId = account.AccountId
                };

            await adminControlledSessionService.SetPendingAccountSession(pendingAccountSession);

            redirectService.redirectWithNavigationManager(PageRoutes.VIEW_DETAILS);
        }
        catch (SessionNotFoundException)
        {
            redirectService.redirectWithNavigationManager(PageRoutes.DASHBOARD);
        }
    }
    private async Task NextPage()
    {
        //  Enable the previous button
        isPreviousDisabled = false;
        pageNumber++;
        await LoadAccountsAsync();
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            isNextDisabled = false;
            pageNumber--;
            if (pageNumber == 1)
                isPreviousDisabled = true;
            await LoadAccountsAsync();
            StateHasChanged();
        }
    }
    private async Task LoadAccountsAsync()
    {
        //  Filter the accounts.
        accountList = await adminDataService
            .LoadAccountsListAsync(
                cleanedAccountNumber,
                startDate,
                endDate,
                selectedAccountTypeId,
                accountStatusTypeId: (int)AccountStatusTypeIDs.Pending,
                pageNumber: pageNumber,
                pageSize: pageSize
            );

        //  Get the remaining accounts count after the current page.
        remainingAccountsCount = await adminDataService
            .CountRemainingAccountsAsync(
                cleanedAccountNumber,
                startDate,
                endDate,
                selectedAccountTypeId,
                pageNumber: pageNumber,
                pageSize: pageSize
            );

        //  Calculate the number of available pages.
        availablePages = remainingAccountsCount == 0 && pageNumber == 1 ?
            1 :
            pageNumber + ((int)Math.Ceiling((double)remainingAccountsCount / 10));

        if (!accountList.Any())
            //  Disable the next button if the list is empty if there are no more accounts
            //  after the current page.
            isNextDisabled = true;
    }
    private async Task<bool> ValidateAccountNumberInput()
    {
        //  If the account number length is greater than 12, remove the dashes and trim. Otherwise
        //  just trim the input.
        cleanedAccountNumber = accountNumber.Length > 12 ?
            accountNumber.Replace("-", "").Trim() :
            accountNumber.Trim();
        /*
        * Check if the account number input is empty. If not, validate it by checking whether it is:
        * 1. Has either 3 characters (last 3 digits only) or the full account number (12 characters).
        *  Any other partial search is not allowed.
        * 2. If it has a non numeric character.
        */
        bool isInputInvalid = !string.IsNullOrWhiteSpace(cleanedAccountNumber) &&
            (
                (cleanedAccountNumber.Length != 3 && cleanedAccountNumber.Length != 12) ||
                !Regex.IsMatch(cleanedAccountNumber, @"^\d+$")
            );

        //  If input is invalid, display a message notifying the user of the invalid input.
        if (isInputInvalid)
        {
            await DisplayMessage("Please enter a valid account number.");
            return false;
        }
        return true;
    }
    private async Task DisplayMessage(string msg)
    {
        message = msg;
        StateHasChanged();
        await Task.Delay(3000);
        message = "";
        StateHasChanged();
    }
}
