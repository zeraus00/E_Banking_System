@page "/View_details_account"
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

@using E_BankingSystem.Components.Client_page.Accounts

@inject AdminControlledSessionService adminControlledSessionService
@inject AdminDataService adminDataService
@inject PageRedirectService redirectService
@inject NavigationManager navigationManager
@inject UserDataService userDataService
@inject AdminViewLoans adminViewLoans

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<div class="page">
	<main>
		@if (error.Length > 0)
		{
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				<strong>@error</strong>
			</div>
		}

		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center flex-wrap">
				<h3 class="fw-bold text-light">Registration For Loan</h3>

				<!-- Close Button -->
				<NavLink href="/Dashboard">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<!-- Row 1 -->
			<div class="row g-3 mt-2">
				<div class="col-3">
					<label class="text-light">First Name</label>
					@* <input class="form-control" @bind="firstName" placeholder="First Name" required> *@
					<div class="form-control form-control-sm">@(userInfo?.UserName?.FirstName ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Middle Name</label>@* 
					<input class="form-control" @bind="middleName" placeholder="Middle Name"> *@
					<div class="form-control form-control-sm">@(userInfo?.UserName?.MiddleName ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Last Name</label>@* 
					<input class="form-control" @bind="lastName" placeholder="Last Name" required> *@
					<div class="form-control form-control-sm">@(userInfo?.UserName?.LastName ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Suffix</label>@* 
					<input class="form-control" @bind="suffix" placeholder="Suffix"> *@
					<div class="form-control form-control-sm">@(userInfo?.UserName?.Suffix ?? string.Empty)</div>
				</div>
			</div>

			<!-- Row 2 -->
			<div class="row g-3">
				<div class="col-4">
					<label class="text-light">Province</label>@* 
					<input class="form-control" @bind="province" placeholder="Province" required> *@
					<div class="form-control form-control-sm">@(address?.Province?.ProvinceName ?? string.Empty)</div>
				</div>
				<div class="col-4">
					<label class="text-light">Municipality</label>@* 
					<input class="form-control" @bind="municipality" placeholder="Municipality" required> *@
					<div class="form-control form-control-sm">@(address?.City?.CityName ?? string.Empty)</div>
				</div>
				<div class="col-4">
					<label class="text-light">Barangay</label>@* 
					<input class="form-control" @bind="barangay" placeholder="Barangay" required> *@
					<div class="form-control form-control-sm">@(address?.Barangay?.BarangayName ?? string.Empty)</div>
				</div>
			</div>

			<!-- Row 3 -->
			<div class="row g-3 mt-2">
				<div class="col-6">
					<label class="text-light">Street No.</label>@* 
					<input class="form-control" @bind="street" placeholder="Street No." required> *@
					<div class="form-control form-control-sm">@(address?.Street ?? string.Empty)</div>
				</div>
				<div class="col-6">
					<label class="text-light">House No.</label>@* 
					<input class="form-control" @bind="houseNumber" placeholder="House No." required> *@
					<div class="form-control form-control-sm">@(address?.House ?? string.Empty)</div>
				</div>
			</div>

			<div class="row g-3 mt-2">
				<!-- Row 4-->
				<div class="col-2">
					<label class="text-light">Age</label>
					@* <input class="form-control" type="number" @bind="age" placeholder="Age" required>> *@
					<div class="form-control form-control-sm">@(userInfo?.Age ?? 0)</div>
				</div>
				<div class="col-2">
					<label class="text-light">Birth Date</label>
					@* <input class="form-control" type="date" @bind="birthDate" placeholder="mm/dd/yyyy" required> *@
					<div class="form-control form-control-sm">@((birthInfo?.BirthDate ?? DateTime.UtcNow.Date).ToString("yyyy/MM/dd"))</div>
				</div>
				<div class="col-2">
					<label class="text-light">Sex</label>
					@* <select class="form-select" @bind="sex" required>
						<option value="" disabled hidden>--Select Sex--</option>
						<option>Male</option>
						<option>Female</option>
					</select> *@
					<div class="form-control form-control-sm">@(userInfo?.Sex ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Contact No.</label>
					<div class="form-control form-control-sm">@(userInfo?.ContactNumber ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Email</label>
					<div class="form-control form-control-sm">@(userInfo?.UserAuth?.Email ?? string.Empty)</div>
				</div>

				<!-- Row 5 -->
				<div class="col-3">
					<label class="text-light">Civil Status</label>
					<div class="form-control form-control-sm">@(userInfo?.CivilStatus ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Occupation</label>@* 
					<input class="form-control" @bind="occupation" placeholder="Occupation" required> *@
					<div class="form-control form-control-sm">@(userInfo?.Occupation ?? string.Empty)</div>
				</div>

				<div class="col-3">
					<label class="text-light">Gross Annual Income (>= 250 000.00)</label>
					<div class="form-control form-control-sm"></div>
				</div>

				<div class="col-3">
					<label class="text-light">Type of Loan</label>
					<div class="form-control form-control-sm">@(accountLoan?.LoanType)</div>
				</div>
			</div>

			<div class="row g-3 mt-2">
				<!-- Row 6 -->
				<div class="col-3">
					<label class="text-light">Loan Amount</label>
					<div class="form-control form-control-sm">@(accountLoan?.LoanAmount)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Loan Purpose</label>
					<div class="form-control form-control-sm">@(accountLoan?.LoanPurpose ?? string.Empty)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Loan term in months</label>
					<div class="form-control form-control-sm">@(accountLoan?.LoanTermMonths)</div>
				</div>
				<div class="col-3">
					<label class="text-light">Preferred Payment Frequency</label>
					<div class="form-control form-control-sm">@(accountLoan?.PaymentFrequency)</div>
				</div>
			</div>

			<!-- File Uploads -->
			<div class="row g-3 mt-3">
				<div class="col-6">
					<label class="text-light">Upload Government Valid ID (Front & Back)</label>
					<div class="d-flex flex-wrap gap-2">
						<button class="btn btn-outline-light btn-sm" data-bs-toggle="modal" data-bs-target="#govIdModal">View Attachment</button>
					</div>
				</div>

				<div class="col-6">
					<label class="text-light">Upload Latest Complete 1 Month Payslip</label>
					<div class="d-flex flex-wrap gap-2">
						<button class="btn btn-outline-light btn-sm" data-bs-toggle="modal" data-bs-target="#payslipModal">View Attachment</button>
					</div>
				</div>
			</div>

			<!--View attachment-->
			<div class="modal fade" id="govIdModal" tabindex="-1" aria-labelledby="govIdModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-lg modal-dialog-centered">
					<div class="modal-content bg-dark text-white">
						<div class="modal-header">
							<h5 class="modal-title" id="govIdModalLabel">Government Valid ID</h5>
							<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body text-center">
							@if (!string.IsNullOrWhiteSpace(GovernmentId))
							{
								<img src="@GovernmentId" class="img-fluid rounded shadow" alt="Government ID" />
							}
							else
							{
								<p>No Government ID uploaded.</p>
							}
						</div>
					</div>
				</div>
			</div>

			<div class="modal fade" id="payslipModal" tabindex="-1" aria-labelledby="payslipModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-lg modal-dialog-centered">
					<div class="modal-content bg-dark text-white">
						<div class="modal-header">
							<h5 class="modal-title" id="payslipModalLabel">Payslip</h5>
							<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body text-center">
							@if (!string.IsNullOrWhiteSpace(PayslipPicture))
							{
								<img src="@PayslipPicture" class="img-fluid rounded shadow" alt="Payslip" />
							}
							else
							{
								<p>No payslip picture uploaded.</p>
							}
						</div>
					</div>
				</div>
			</div>

			<!-- Terms and Conditions -->
			<div class="form-check d-flex justify-content-end mt-3">
				<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
				<label class="form-check-label text-light" for="termsAndConditions">
					I accept the terms and conditions
				</label>
			</div>

			<!-- Register Button -->
			<div class="d-flex justify-content-end gap-2 mt-3">
				<button class="btn btn-danger btn-secondary fs-5 mx-2" @onclick="RejectAsync">Reject</button>
				<button class="btn btn-warning btn-secondary fs-6 mx-2">Resubmission<br />Request</button>
				<button class="btn btn-primary btn-secondary fs-5 mx-2" @onclick="ApproveAsync">Approve</button>
			</div>
		</div>
	</main>

</div>

@code {
	private string error = "";

	private int loanId { get; set; }
	private Loan? accountLoan { get; set; }
	private UserInfo? userInfo { get; set; }
	private Address? address { get; set; }
	private BirthInfo? birthInfo { get; set; }
	private int accountId { get; set; }
	private int userInfoId { get; set; }

	private string? GovernmentId => userInfo?.GovernmentId != null
	? $"data:image/jpeg;base64,{Convert.ToBase64String(userInfo.GovernmentId)}"
	: null;

	private string? PayslipPicture => userInfo?.PayslipPicture != null
		? $"data:image/jpeg;base64,{Convert.ToBase64String(userInfo.PayslipPicture)}"
		: null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				var pendingLoanSession = await adminControlledSessionService.GetLoanViewSession();
				userInfoId = pendingLoanSession.UserInfoId;
				accountId = pendingLoanSession.LoanId;

				userInfo = await userDataService.TryGetUserInfoAsync(
				userInfoId,
				includeUserAuth: true,
				includeUserName: true,
				includeBirthInfo: true,
				includeAddress: true
			);

				if (userInfo.AddressId is int addressId)
				{
					address = await userDataService.TryGetAddressAsync(addressId);
				}
				if (userInfo.BirthInfoId is int birthInfoId)
					birthInfo = await userDataService.TryGetBirthInfoAsync(birthInfoId);

				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				redirectService.redirectWithNavigationManager(PageRoutes.APPLLYING_LOAN);
			}
			catch (AccountNotFoundException ex)
			{
				error = ex.Message;
			}
			catch (ControlledSessionNotFound)
			{
				redirectService.redirectWithNavigationManager(PageRoutes.APPLLYING_LOAN);
			}
		}
	}

	private async Task RejectAsync()
	{
		try
		{
			await adminDataService.UpdateLoanStatus(loanId, LoanStatusTypes.REJECTED);
			await adminControlledSessionService.ClearLoanViewSession();
			redirectService.redirectWithNavigationManager(PageRoutes.APPLLYING_LOAN);
		}
		catch (AccountNotFoundException ex)
		{
			error = ex.Message;
		}
		catch (UserNotFoundException ex)
		{
			error = ex.Message;
		}
	}

	private async Task ApproveAsync()
	{
		try
		{
			await adminDataService.UpdateLoanStatus(loanId, LoanStatusTypes.APPROVED);
			await adminControlledSessionService.ClearLoanViewSession();
			redirectService.redirectWithNavigationManager(PageRoutes.APPLLYING_LOAN);
		}
		catch (AccountNotFoundException ex)
		{
			error = ex.Message;
		}
		catch (UserNotFoundException ex)
		{
			error = ex.Message;	
		}
	}
}
