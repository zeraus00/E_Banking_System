@page "/Unpaid"
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

@using System.Text.RegularExpressions;

@inject AdminControlledSessionService adminControlledSessionService
@inject AdminDataService adminDataService
@inject NavigationManager Navigation
@inject PageRedirectService redirectService
@inject UserSessionService userSessionService
@inject UserDataService userDataService

<div class="main">
    <div class="dashboard-container">
        @if (message.Length > 0)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>@message</strong>
            </div>
        }
        <div class="top-bar mx-3">
            <h2>Accounts with Unpaid Loan</h2>
        </div>

        <hr class="divider" />

        <div class="d-flex align-items-center gap-3 m-3 flex-wrap">

            <div class="d-flex align-items-center gap-3">
                <input class="form-control form-control-sm" @bind="accountNumber" placeholder="Search specific account">
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
            </div>

            <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
            </div>

            @* <div class="d-flex align-items-center gap-3">
                <label class="text-light mb-0" style="white-space: nowrap;">Account Type</label>
                <select class="form-select form-select-sm" @bind="selectedType">
                    <option value="">All</option>
                    @foreach (var type in accountTypeList)
                    {
                        <option value="@accountTypeList.IndexOf(type)">type</option>
                    }
                </select>
            </div> *@

            <button class="btn btn-primary btn-sm shadow-sm" @onclick="OnFilterAsync">Filter</button>
            <button class="btn btn-danger btn-sm shadow-sm" @onclick="OnClearFilterAsync">Clear Filter</button>

        </div>

        <hr class="divider" />

        <div class="table-responsive m-4 rounded">
            <table class="table table-bordered text-center">
                <thead class="table-info">
                    <tr>
                        <th class="align-middle">Statement Date</th>
                        <th class="align-middle">Account<br />Number</th>
                        <th class="align-middle">Name</th>
                        <th class="align-middle">Loan Amount</th>
                        <th class="align-middle">Loan Term</th>
                        <th class="align-middle">Operation</th>
                    </tr>
                </thead>
                <tbody>

                    <tr class="bg-light">
                        <td>05/10/2025</td>
                        <td>1234567890</td>
                        <td>Juan Dela Cruz</td>
                        <td>juan.delacruz@example.com</td>
                        <td>
                            <a href="Account_unpaid_loan" class="btn btn-info btn-secondary btn-sm rounded text-dark shadow-sm" style="border: 2px solid cyan">View</a>
                        </td>
                    </tr>
                     @*@foreach (var a in loanAccountList)
                    {
                        <tr class="bg-light">
                            <td>@(a.StartDate)</td>
                            <td>@(loanIdAccountDictionary[a.LoanId][0])</td>
                            <td>@(loanIdAccountDictionary[a.LoanId][1])</td>
                            <td>@a.LoanAmount</td>
                            <td>@a.LoanTermMonths</td>
                            <td>@a.LoanStatus</td>
                            <td>
                                <button class="btn btn-info btn-secondary btn-sm rounded text-dark shadow-sm" style="border: 2px solid cyan" @onclick="() => ViewDetails(a)">View</button>
                            </td>
                            <td class="text-secondary">@a.Status</td>
                        </tr>
                    } *@
                </tbody>
            </table>
        </div>

        <div class="scroll-container gap-3 mx-5">
            <!-- Up Arrow -->
            <button class="arrow-ud" @onclick="NextPage">
                <i class="bi bi-chevron-up text-light"></i>
            </button>

            <!-- Down Arrow -->
            <button class="arrow-ud" @onclick="PreviousPage">
                <i class="bi bi-chevron-down text-light"></i>
            </button>
        </div>

    </div>
</div>

@code {
    private AdminSession? adminSession;
    private List<string> accountTypeList = AccountTypes.AS_STRING_LIST;

    private string message = "";

    private Dictionary<int, List<string>> loanIdAccountDictionary = new();

    private DateTime? startDate = DateTime.Now.AddDays(-DateTime.Now.Day + 1);
    private DateTime? endDate = DateTime.Now;
    private string cleanedAccountNumber = "";
    private string accountNumber = "";
    private string loanStatus = LoanStatusTypes.ACTIVE;
    private List<Loan> loanAccountList = new();

    private int remainingAccountsCount;

    private int pageSize = 5;
    private int pageNumber = 1;
    private int availablePages;

    private bool isNextDisabled = false;
    private bool isPreviousDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        isPreviousDisabled = true;
        await LoadLoanUnpaidAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                adminSession = await userSessionService.GetAdminSession();

                await LoadLoanUnpaidAsync();
                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                redirectService.redirectWithNavigationManager(PageRoutes.DASHBOARD);
            }
        }
    }

    private async Task OnFilterAsync()
    {
        if (startDate > endDate)
        {
            await displayMessage("Start date cannot be later than end date.");
            return;
        }
        bool isAccountNumberValid = await ValidateAccountNumberInput();
        if (!isAccountNumberValid)
            return;

        pageNumber = 1;
        await LoadLoanUnpaidAsync();
    }

    private async Task OnClearFilterAsync()
    {
        startDate = DateTime.Now.AddDays(-DateTime.Now.Day + 1).Date;
        endDate = DateTime.Now.Date;
        pageNumber = 1;
        await LoadLoanUnpaidAsync();
    }

    private async Task NextPage()
    {
        isPreviousDisabled = false;
        pageNumber++;
        await LoadLoanUnpaidAsync();
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            isNextDisabled = false;
            pageNumber--;
            if (pageNumber == 1)
                isPreviousDisabled = true;
            await LoadLoanUnpaidAsync();
            StateHasChanged();
        }
    }

    private async Task LoadLoanUnpaidAsync()
    {
        loanAccountList = await adminDataService.LoadLoansListAsync(
            cleanedAccountNumber,
            startDate: startDate,
            endDate: endDate,
            loanStatus: loanStatus,
            pageNumber: pageNumber,
            pageSize: pageSize
        );

        foreach (var loan in loanAccountList)
        {
            var accountNumberAndName = new List<string>()
            {
                await adminDataService.GetAccountNumberAsync(loan.AccountId),
                await adminDataService.GetAccountNameAsync(loan.AccountId)
            };
            loanIdAccountDictionary[loan.LoanId] = accountNumberAndName;
        }

        remainingAccountsCount = await adminDataService
            .CountRemainingLoansAsync(
                cleanedAccountNumber,
                startDate,
                endDate,
                loanStatus: loanStatus,
                pageNumber: pageNumber,
                pageSize: pageSize
            );

        availablePages = remainingAccountsCount == 0 && pageNumber == 1 ?
        1 : pageNumber + ((int)Math.Ceiling((double)remainingAccountsCount / 10));

        if (!loanAccountList.Any() || remainingAccountsCount == 0)
            isNextDisabled = true;
        else
            isNextDisabled = false;

    }

    private async Task<bool> ValidateAccountNumberInput()
    {
        cleanedAccountNumber = accountNumber.Length > 12 ? accountNumber.Replace("-", "").Trim() :
        accountNumber.Trim();

        bool isInputInvalid = !string.IsNullOrWhiteSpace(cleanedAccountNumber) &&
            (
                (cleanedAccountNumber.Length != 3 && cleanedAccountNumber.Length != 12) ||
                !Regex.IsMatch(cleanedAccountNumber, @"^\d+$")
            );

        if (isInputInvalid)
        {
            await displayMessage("Please enter a valid account number.");
            return false;
        }
        return true;
    }

    private async Task displayMessage(string msg)
    {
        message = msg;
        StateHasChanged();
        await Task.Delay(3000);
        message = "";
        StateHasChanged();
    }
}
