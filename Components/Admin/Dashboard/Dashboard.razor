@using E_BankingSystem.Components.Admin.Dashboard.Charts
@using Layout
@using ViewModels.AdminDashboard
@using Helpers

@page "/Dashboard"
@rendermode InteractiveServer
@attribute [Authorize(Roles="Administrator")]

@inject AdminDataService adminDataService
@inject PageRedirectService redirectService
@inject UserSessionService userSessionService

<div class="dashboard-page">
    <div class="dashboard-container">

        <!-- Top Bar -->
        <div class="top-bar mx-3">
            <h2>Admin Dashboard</h2>
        </div>

        <hr class="divider" />

        <div class="top-bar-right mb-4">
            <div class="d-flex align-items-center gap-3 flex-wrap">
                <!-- Start Date -->
                <div class="d-flex align-items-center gap-3">
                    <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                    <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
                </div>

                <!-- End Date -->
                <div class="d-flex align-items-center gap-3">
                    <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                    <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
                </div>

                <!-- Filter Buttons -->
                <button class="btn btn-primary btn-sm shadow-sm" @onclick="FilterAsync">Filter</button>
                <button class="btn btn-danger btn-sm shadow-sm" @onclick="ClearFilterAsync">Clear Filter</button>
            </div>
        </div>

        <hr class="divider" />

        <div class="dashboard-row">
            <!-- Left: Cards and Table -->
            <div class="left-panel">
                <!-- Card Sections -->
                <div class="left-cards d-flex flex-wrap gap-3">
                    <!-- All your data-card items here -->
                    <div class="data-card col">
                        <h5>Withdrawals</h5>
                        <p class="number">@withdrawalCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">@FormatHelper.BalanceFormatter(totalWithdrawals)</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Deposits</h5>
                        <p class="number">@depositCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">@FormatHelper.BalanceFormatter(totalDeposits)</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Transfers</h5>
                        <p class="number">@transferCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">@FormatHelper.BalanceFormatter(totalTransfers)</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Loans</h5>
                        <p class="number">@loanCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">@FormatHelper.BalanceFormatter(totalLoans)</p>
                        </div>
                    </div>
                </div>

                <!-- Simple Table -->
                <div class="mt-4">
                    <label class="text-light text-center fw-bold">Transaction Breakdown</label>
                    <table class="table table-bordered text-light">
                        <thead class="table-info text-dark">
                            <tr>
                                <th>Type</th>
                                <th>Count</th>
                                <th>Total</th>
                                <th>Average</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (transactionBreakdowns.Any())
                            {
                                foreach (var keyValuePair in transactionBreakdowns)
                                {
                                    <tr>
                                        <td class="fw-bold">@keyValuePair.Value.TransactionType</td>
                                        <td>@keyValuePair.Value.Count</td>
                                        <td>@FormatHelper.BalanceFormatter(keyValuePair.Value.Total)</td>
                                        <td>@FormatHelper.BalanceFormatter(keyValuePair.Value.Average)</td>
                                        <td>@keyValuePair.Value.Notes</td>
                                    </tr>
                                }
                            } 
                            //  Load mock data if database is empty (for testing purposes.)
                            else
                            {
                                @foreach (var t in mockTransactionsBreakdown)
                                {
                                    <tr>
                                        <td class="fw-bold">@t.TransactionType</td>
                                        <td>@t.Count</td>
                                        <td>@t.Total</td>
                                        <td>@t.Average</td>
                                        <td>@t.Notes</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Right: Key Metrics -->
            <div class="key-metrics card">
                <p class="text-muted border-bottom pb-2">Key Metrics</p>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-cash-stack me-2"></i>
                        <span class="fst-italic">Total Volume</span>
                    </div>
                    <p class="text-end number mb-0">@transactionVolume</p>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-graph-up-arrow me-2"></i>
                        <span class="fst-italic">Net Movement</span>
                    </div>
                    <p class="text-end number mb-0">@netMovement</p>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-person-plus me-2"></i>
                        <span class="fst-italic">New Accounts</span>
                    </div>
                    <p class="text-end number mb-0">@newAccounts</p>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-person-dash me-2"></i>
                            <span class="fst-italic">Closed Accounts</span>
                        </div>
                        <a href="/Closed_accounts" class="nav-link px-0">View</a>
                    </div>
                    <div class="pt-1">
                        <p class="text-end number mb-0">@closedAccounts</p>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-flag me-2"></i>
                            <span class="fst-italic">Suspicious Transactions</span>
                        </div>
                        <a href="/Suspicious_transactions" class="nav-link px-0">View</a>
                    </div>
                    <div class="pt-1">
                        <p class="text-end number mb-0">0</p>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-flag me-2"></i>
                            <span class="fst-italic">Flagged Accounts</span>
                        </div>
                        <a href="/Flagged_accounts" class="nav-link px-0">View</a>
                    </div>
                    <div class="pt-1">
                        <p class="text-end number mb-0">0</p>
                    </div>
                </div>

            </div>
        </div>

        <hr class="divider" />

        <div>
            <div class="d-flex align-items-center gap-3 flex-wrap">
                <label class="text-light mb-0" style="white-space: nowrap;">Filter: </label>
                <select class="form-select form-select-sm w-25" @bind="selectedFilter" @bind:after="OnChartFilterChanged">
                    @foreach (var chartFilter in AdminDashboardTimeFilters.AS_STRING_LIST)
                    {
                        <option value="@chartFilter">@chartFilter</option>
                    }
                </select>
            </div>

            <hr class="divider" />

            <div class="chart-section my-5">
                <!-- Left: Bar Chart -->
                <div class="main-chart pie-chart">
                    <label>Activity Chart</label>
                    <E_BankingSystem.Components.Admin.Dashboard.Charts.BarChart Labels="BarLabels" Data="BarData" />
                </div>

                <!-- Right: Line + Pie Chart -->
                <div class="right-charts">
                    <div class="main-chart small-chart">
                        <label>Transaction Volume</label>
                        <E_BankingSystem.Components.Admin.Dashboard.Charts.LineChart Labels="LineLabels" Data="LineData" />
                    </div>
                    <div class="main-chart small-chart">
                        <label>Transaction Types Chart</label>
                        @if(PieData.Any())
                        {
                            <E_BankingSystem.Components.Admin.Dashboard.Charts.PieChart Labels="PieLabels" Data="PieData" />
                        }
                        else
                        {
                            <p>NO DATA</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <hr class="divider" />

        <div class="mt-4">
            <label class="text-light text-center fw-bold">Top 5 Largest Transactions</label>
            <table class="table table-bordered text-light">
                <thead class="table-info text-dark">
                    <tr>
                        <th>Account No</th>
                        <th>Account Name</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Date</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
                    @if(largestTransactions.Any())
                    {
                        foreach(var transaction in largestTransactions)
                        {
                            <tr>
                                <td>@transaction.MainAccount.AccountNumber</td>
                                <td>@transaction.MainAccount.AccountName</td>
                                <td>@FormatHelper.BalanceFormatter(transaction.Amount)</td>
                                <td>@transaction.TransactionType.TransactionTypeName</td>
                                <td>@(transaction.TransactionDate.ToShortDateString())</td>
                                <td>@(new DateTime(1, 1, 1, transaction.TransactionTime.Hours, transaction.TransactionTime.Minutes, 0).ToString("hh':'mm tt"))</td>
                            </tr>
                        }
                    }
                    //  Load mock data if database is empty (for testing purposes.)
                    else 
                    {
                        @foreach (var t in mockTransactions)
                        {
                            <tr>
                                <td>@t.AccountNo</td
                                <td>@t.AccountName</td>
                                <td>@t.Amount</td>
                                <td>@t.Type</td>
                                <td>@t.Date.ToString("MM-dd-yyyy")</td>
                                <td>@t.Time.ToString("hh:mm tt")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DateTime? startDate = DateTime.Now.AddDays(-DateTime.Now.Day + 1);
    private DateTime? endDate = DateTime.Now;

    //  Main data source.
    private List<Transaction> transactionList { get; set; } = new();
    //  For largest transaction panel.
    private List<Transaction> largestTransactions { get; set; } = new();
    //  For transaction breakdown panel.
    private Dictionary<string, TransactionBreakdown> transactionBreakdowns { get; set; } = new();
    //  For transaction counts.
    private int withdrawalCount;
    private int depositCount;
    private int transferCount;
    private int loanCount;

    //  For transaction totals.
    private decimal totalWithdrawals;
    private decimal totalDeposits;
    private decimal totalTransfers;
    private decimal totalLoans;

    //  For key metrics.
    private int transactionVolume;
    private decimal netMovement;
    private int newAccounts;
    private int closedAccounts;

    //  For charts.
    private string selectedFilter = AdminDashboardTimeFilters.HOURLY;

    private List<string> BarLabels = new();
    private List<List<Bar>> BarData = new();

    private List<string> LineLabels = new();
    private List<decimal> LineData = new();

    private List<string> PieLabels = new();
    private List<decimal> PieData = new();

    private async Task OnChartFilterChanged()
    {
        await LoadChartData(selectedFilter);

        StateHasChanged(); // this will trigger chart redraw
    }

    protected override async Task OnInitializedAsync()
    {
        //  Load data for dashboard view.
        await this.LoadDisplayData();
        await this.LoadChartData(selectedFilter);
    }

    private async Task FilterAsync()
    {
        //  Load all data with the new filters
        await this.LoadDisplayData();
    }

    private async Task ClearFilterAsync()
    {
        //  Clear filters then load data again.
        startDate = null;
        endDate = null;
        await this.LoadDisplayData();
    }

    //  Load data for dashboard view.
    private async Task LoadDisplayData()
    {
        //  Get largest transactions with count 5.
        largestTransactions = await adminDataService.GetLargestTransactions(5, startDate, endDate);

        //  Get transaction breakdown.
        transactionBreakdowns = await adminDataService.GetTransactionBreakdowns(startDate, endDate);
        //  Withdrawals count and total amount.
        withdrawalCount = transactionBreakdowns[TransactionTypes.WITHDRAWAL].Count;
        totalWithdrawals = transactionBreakdowns[TransactionTypes.WITHDRAWAL].Total;
        //  Deposits count and total amount.
        depositCount = transactionBreakdowns[TransactionTypes.DEPOSIT].Count;
        totalDeposits = transactionBreakdowns[TransactionTypes.DEPOSIT].Total;
        //  Transfers count and total amount.
        transferCount = transactionBreakdowns[TransactionTypes.OUTGOING_TRANSFER].Count;
        totalTransfers = transactionBreakdowns[TransactionTypes.OUTGOING_TRANSFER].Total;
        //  Loans count and total amount.
        loanCount = await adminDataService.GetLoanCountAsync(startDate, endDate);
        totalLoans = 0;
        //  Load Key Metrics.
        transactionVolume = adminDataService.GetTransactionVolume(transactionBreakdowns);
        netMovement = adminDataService.GetNetMovement(transactionBreakdowns);
        newAccounts = await adminDataService.GetNewAccountsCount(startDate, endDate);
        closedAccounts = await adminDataService.GetClosedAccountsCount(startDate, endDate);
    }

    private async Task LoadChartData(string filterMode)
    {
        //  LineChart
        var LineChartData = await adminDataService.GetLineChartData(filterMode, DateTime.Now);
        LineLabels = LineChartData.Select(lcd => lcd.Label).ToList();
        LineData = LineChartData.Select(lcd => lcd.Value).ToList();
        //  PieChart
        var PieChartData = await adminDataService.GetPieChartData(filterMode, DateTime.Now);
        PieLabels = PieChartData.Select(pcd => pcd.Label).ToList();
        PieData = PieChartData.Select(pcd => pcd.Value).ToList();
        //  BarChart
        var BarChartData = await adminDataService.GetBarChartData(filterMode, DateTime.Now);
        BarLabels = BarChartData.Select(bcd => bcd.Label).ToList();
        BarData = BarChartData.Select(bcd => bcd.Bars).ToList();

    }

    //mockup data for table
    private List<MockTransaction> mockTransactions = new()
    {
        new MockTransaction { Date = DateTime.Today, Time = DateTime.Now, Type = "Deposit", Amount = 5000, AccountNo = "981738", AccountName = "Sample Name 1"},
        new MockTransaction { Date = DateTime.Today.AddDays(-1), Time = DateTime.Now.AddHours(-1), Type = "Withdrawal", Amount = 1500, AccountNo = "897937", AccountName = "Sample Name 2"},
        new MockTransaction { Date = DateTime.Today.AddDays(-2), Time = DateTime.Now.AddHours(-2), Type = "Transfer", Amount = 2000, AccountNo = "727371", AccountName = "Sample Name 3"},
        new MockTransaction { Date = DateTime.Today.AddDays(-3), Time = DateTime.Now.AddHours(-3), Type = "Loan", Amount = 10000, AccountNo = "913837", AccountName = "Sample Name 4"}
    };

    private List<MockTransactionBreakdown> mockTransactionsBreakdown = new()
    {
        new MockTransactionBreakdown { TransactionType = "Withrawals", Count = 120, Total = 12000000, Average = 10000, Notes = "-" },
        new MockTransactionBreakdown { TransactionType = "Deposits", Count = 80, Total = 900000, Average = 11500, Notes = "-" },
        new MockTransactionBreakdown { TransactionType = "Transfers", Count = 45, Total = 600000, Average = 13333, Notes = "3 flagged" },
        new MockTransactionBreakdown { TransactionType = "Loans Paid", Count = 25, Total = 350000, Average = 14000, Notes = "-" }
    };

    private class MockTransaction
    {
        public DateTime Date { get; set; }
        public DateTime Time { get; set; }
        public string Type { get; set; } = "";
        public decimal Amount { get; set; }
        public string AccountNo { get; set; } = string.Empty;
        public string AccountName { get; set; } = string.Empty;
    }

    private class MockTransactionBreakdown
    {
        public string TransactionType { get; set; } = "";
        public int Count { get; set; }
        public decimal Total { get; set; }
        public decimal Average { get; set; }
        public string Notes { get; set; } = "";
    }
}
