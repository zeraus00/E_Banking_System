@using Layout
@using ViewModels.AdminDashboard

@page "/Dashboard"
@rendermode InteractiveServer
@attribute [Authorize(Roles="Administrator")]

@inject AdminDataService adminDataService
@inject PageRedirectService redirectService
@inject UserSessionService userSessionService

<div class="dashboard-page">
    <div class="dashboard-container">

        <!-- Top Bar -->
        <div class="top-bar mx-3">
            <h2>Admin Dashboard</h2>
        </div>

        <hr class="divider" />

        <div class="top-bar-right mb-4">
            <div class="d-flex align-items-center gap-3 flex-wrap">
                <!-- Start Date -->
                <div class="d-flex align-items-center gap-3">
                    <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
                    <InputDate class="form-control form-control-sm" @bind-Value="startDate" />
                </div>

                <!-- End Date -->
                <div class="d-flex align-items-center gap-3">
                    <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
                    <InputDate class="form-control form-control-sm" @bind-Value="endDate" />
                </div>

                <!-- Filter Buttons -->
                <button class="btn btn-primary btn-sm shadow-sm" @onclick="FilterAsync">Filter</button>
                <button class="btn btn-danger btn-sm shadow-sm" @onclick="ClearFilterAsync">Clear Filter</button>
            </div>
        </div>

        <hr class="divider" />

        <div class="dashboard-row">
            <!-- Left: Cards and Table -->
            <div class="left-panel">
                <!-- Card Sections -->
                <div class="left-cards">
                    <!-- All your data-card items here -->
                    <div class="data-card col">
                        <h5>Withdrawals</h5>
                        <p class="number">@withdrawalCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">0</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Deposits</h5>
                        <p class="number">@depositCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">0</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Transfers</h5>
                        <p class="number">@transferCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">0</p>
                        </div>
                    </div>

                    <div class="data-card col">
                        <h5>Loans</h5>
                        <p class="number">@loanCount</p>
                        <div class="card-footer mt-2">
                            <p class="m-0">0</p>
                        </div>
                    </div>
                </div>

                <!-- Simple Table -->
                <div class="mt-4">
                    <label class="text-light text-center fw-bold">Transaction Breakdown</label>
                    <table class="table table-bordered text-light">
                        <thead class="table-info text-dark">
                            <tr>
                                <th>Type</th>
                                <th>Count</th>
                                <th>Total</th>
                                <th>Average</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (transactionBreakdown.Any())
                            {
                                foreach (var keyValuePair in transactionBreakdown)
                                {
                                    <tr>
                                        <td class="fw-bold">@keyValuePair.Key</td>
                                        <td>@keyValuePair.Value.Count</td>
                                        <td>@keyValuePair.Value.Total</td>
                                        <td>@keyValuePair.Value.Average</td>
                                        <td>@keyValuePair.Value.Notes</td>
                                    </tr>
                                }
                            } 
                            //  Load mock data if database is empty (for testing purposes.)
                            else
                            {
                                @foreach (var t in mockTransactionsBreakdown)
                                {
                                    <tr>
                                        <td class="fw-bold">@t.TransactionType</td>
                                        <td>@t.Count</td>
                                        <td>@t.Total</td>
                                        <td>@t.Average</td>
                                        <td>@t.Notes</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Right: Key Metrics -->
            <div class="key-metrics card">
                <p class="text-muted border-bottom">Key Metrics</p>
                <div class="row">
                    <i class="bi bi-cash-stack"> Total Volume</i>
                    <p class="text-end number">0</p>
                </div>
                <div class="row">
                    <i class="bi bi-graph-up-arrow"> Net Movement</i>
                    <p class="text-end number">0</p>
                </div>
                <div class="row">
                    <i class="bi bi-person-plus"> New Accounts</i>
                    <p class="text-end number">0</p>
                </div>
                <div class="row">
                    <i class="bi bi-person-dash"> Closed Accounts</i>
                    <p class="text-end number">0</p>
                </div>
            </div>
        </div>



        <div class="chart-section my-5">
            <!-- Left: Pie Chart -->
            <div class="main-chart pie-chart">
                <label>Transaction Types Chart</label>
                <E_BankingSystem.Components.Admin.Dashboard.Charts.PieChart />
            </div>

            <!-- Right: Line + Bar Chart stacked vertically -->
            <div class="right-charts">
                <div class="main-chart small-chart">
                    <label>Transaction Volume</label>
                    <E_BankingSystem.Components.Admin.Dashboard.Charts.LineChart />
                </div>
                <div class="main-chart small-chart">
                    <label class="fs-6">Activities</label>
                    <select id="barChartFilter" class="form-select-sm" onchange="drawBarChart()">
                        <option value="hourly">Hour</option>
                        <option value="daily">Day</option>
                        <option value="weekly">Week</option>
                    </select>

                    <E_BankingSystem.Components.Admin.Dashboard.Charts.BarChart />
                </div>
            </div>
        </div>



        <div class="mt-4">
            <label class="text-light text-center fw-bold">Top 5 Largest Transactions</label>
            <table class="table table-bordered text-light">
                <thead class="table-info text-dark">
                    <tr>
                        <th>Account No</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    @if(largestTransactions.Any())
                    {
                        foreach(var transaction in largestTransactions)
                        {
                            <tr>
                                <td>@transaction.MainAccount.AccountNumber</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.TransactionType.TransactionTypeName</td>
                                <td>@transaction.TransactionDate</td>
                            </tr>
                        }
                    }
                    //  Load mock data if database is empty (for testing purposes.)
                    else 
                    {
                        @foreach (var t in mockTransactions)
                        {
                            <tr>
                                <td>@t.AccountNo</td>
                                <td>@t.Amount</td>
                                <td>@t.Type</td>
                                <td>@t.Date</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DateTime? startDate = DateTime.Now.AddDays(-DateTime.Now.Day + 1);
    private DateTime? endDate = DateTime.Now;

    //  Main data source.
    private List<Transaction> transactionList { get; set; } = new();
    //  For largest transaction panel.
    private List<Transaction> largestTransactions { get; set; } = new();
    //  For transaction breakdown panel.
    private Dictionary<string, TransactionBreakdown> transactionBreakdown { get; set; } = new();
    
    //  For transaction counts.
    private int withdrawalCount;
    private int depositCount;
    private int transferCount;
    private int loanCount;

    protected override async Task OnInitializedAsync()
    {
        //  Load transactions.
        transactionList = await adminDataService.GetTransactionListAsync(startDate, endDate);
        //  Load data for dashboard view.
        await this.LoadTransactionData();
    }

    private async Task FilterAsync()
    {
        transactionList = await adminDataService.GetTransactionListAsync(startDate, endDate);
        await this.LoadTransactionData();
    }

    private async Task ClearFilterAsync()
    {
        startDate = null;
        endDate = null;
        transactionList = await adminDataService.GetTransactionListAsync();
        await this.LoadTransactionData();
    }

    //  Load data for dashboard view.
    private async Task LoadTransactionData()
    {
        //  Get largest transactions with count 5.
        largestTransactions = adminDataService.GetLargestTransactions(transactionList, 5);
        //  Get transaction breakdown.
        transactionBreakdown = adminDataService.GetTransactionBreakDown(transactionList);
        //  Withdrawals count.
        withdrawalCount = transactionBreakdown[TransactionTypeConstants.WITHDRAWAL].Count;
        //  Deposits count.
        depositCount = transactionBreakdown[TransactionTypeConstants.DEPOSIT].Count;
        //  Transfers count.
        transferCount = transactionBreakdown[TransactionTypeConstants.OUTGOING_TRANSFER].Count;
        //  Loans count.
        loanCount = await adminDataService.GetLoanCountAsync(DateTime.Now.AddMonths(-1), DateTime.Now);
    }

    //mockup data for table
    private List<MockTransaction> mockTransactions = new()
    {
        new MockTransaction { Date = DateTime.Today, Type = "Deposit", Amount = 5000, AccountNo = "981738" },
        new MockTransaction { Date = DateTime.Today.AddDays(-1), Type = "Withdrawal", Amount = 1500, AccountNo = "897937" },
        new MockTransaction { Date = DateTime.Today.AddDays(-2), Type = "Transfer", Amount = 2000, AccountNo = "727371" },
        new MockTransaction { Date = DateTime.Today.AddDays(-3), Type = "Loan", Amount = 10000, AccountNo = "913837" }
    };

    private List<MockTransactionBreakdown> mockTransactionsBreakdown = new()
    {
        new MockTransactionBreakdown { TransactionType = "Withrawals", Count = 120, Total = 12000000, Average = 10000, Notes = "-" },
        new MockTransactionBreakdown { TransactionType = "Deposits", Count = 80, Total = 900000, Average = 11500, Notes = "-" },
        new MockTransactionBreakdown { TransactionType = "Transfers", Count = 45, Total = 600000, Average = 13333, Notes = "3 flagged" },
        new MockTransactionBreakdown { TransactionType = "Loans Paid", Count = 25, Total = 350000, Average = 14000, Notes = "-" }
    };

    private class MockTransaction
    {
        public DateTime Date { get; set; }
        public string Type { get; set; } = "";
        public decimal Amount { get; set; }
        public string AccountNo { get; set; } = string.Empty;
    }

    private class MockTransactionBreakdown
    {
        public string TransactionType { get; set; } = "";
        public int Count { get; set; }
        public decimal Total { get; set; }
        public decimal Average { get; set; }
        public string Notes { get; set; } = "";
    }
}
