@using System.Text.RegularExpressions;
@using Helpers;

@page "/Client_home"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject UserControlledSessionService userControlledSessionService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject PageRedirectService redirectService

<div class="page">
        <main>

        <!-- Header -->
            <header class="custom-card-clientpage clientheader py-4 d-flex justify-content-between align-items-start">
                <div class="px-5">
                    <h5>Welcome Back</h5>
                    <div class="d-flex align-items-baseline gap-4">
                    <h2 class="m-0"><strong>@(string.IsNullOrWhiteSpace(_clientName) ? "clientName" : _clientName)</strong></h2>
                    <h5 class="text-light fw-lighter m-0">
                        @(string.IsNullOrWhiteSpace(_accountNumber) ? "XXXX-XXXX-XXXX" : FormatHelper.AccountNumberFormatter(_accountNumber))
                    </h5>

                    <h5 class="text-light fw-lighter m-0">
                        Account Status: @_accountStatus
                    </h5>

                    <div class="w-auto">
                        <select class="form-select form-select-sm" value="@selectedAccountId" @onchange="async _ => await UpdateSelectedAccount(_)" required>
                            <option value= "" diasbled hidden>@_clientName</option>
                            @foreach(var account in accountList)
                            {
                                <option value="@account.AccountId">@account.AccountName</option>
                            }
                        </select>
                    </div>

                </div>
            </div>

            <!-- Notifications -->
            <div class="d-flex align-items-center justify-content-center me-5 pt-3 position-relative notification" tabindex="0" @onblur="() => showNotifications = false">
                <i class="@bellIcon" role="button" tabindex="0" @onclick="ToggleNotification" />

                @if (showNotifications)
                {
                    <div class="notification-popup">
                        <div class="d-flex justify-content-between align-items-baseline border-bottom">
                            <label class="mb-3 fw-bold text-dark">Recent Notifications</label>
                            <a href="/Notifications" class="nav-link text-decoration-none">View All</a>
                        </div>

                        <!-- Notification List -->
                        <div class="container pt-3 px-3">
                            @if (recentNotifications == null || !recentNotifications.Any())
                            {
                                <p class="text-muted">You have no recent notifications.</p>
                            }
                            else
                            {
                                @foreach (var notif in recentNotifications.Take(3))
                                {
                                    <div class="mb-3 border-bottom pb-2 text-dark">
                                        <p class="m-0">
                                            On <strong>@notif.Date.ToShortDateString()</strong>, <strong>@notif.Sender</strong> sent a notification involving <strong>₱@notif.Amount.ToString()</strong>.
                                        </p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            </div>

        </header>


        @if (error.Length > 0)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>@error</strong>
            </div>
        }

        <!-- Main Section: Balance + Actions -->
        <div class="container mt-4">
            <div class="row">

                <!-- Balance Card -->
                <div class="col-12 col-md-5 px-5">
                    <section class="custom-card balance text-start p-3 h-100 border rounded shadow-sm bg-white w-100">
                        <h3 class="fw-bold my-1">Current Balance:</h3>
                        <h4 class="justify-content-center text-center align-items-center">
                            <span class="@(_currentBalance >= 0 ? "text-success" : "text-danger")">
                                @FormatHelper.BalanceFormatter(_currentBalance)
                            </span>
                        </h4>
                        <div class="custom-card sm">
                            <p class="m-1">
                                <strong>Contact No.:</strong> @(string.IsNullOrWhiteSpace(_clientPhone) ? "N/A" : FormatHelper.PhoneNumberFormatter(_clientPhone))
                            </p>
                        </div>
                    </section>
                </div>

                <!-- Action Buttons -->
                <div class="col-12 col-md-6 my-auto">
                    <div class="row g-4">

                        <!-- Withdraw -->
                        <div class="col-6">
                            <a href="/Withdraw_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                Withdraw
                                <img src="/bootstrap/Utilities/withdraw.png" alt="Withdraw Icon" style="width: 30px; height: 30px; " />
                            </a>
                        </div>

                        <!-- Transfer -->
                        <div class="col-6">
                            <a href="/Transfer_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                Transfer
                                <img src="/bootstrap/Utilities/transfer.png" alt="Transfer Icon" style="width: 20px; height: 20px; " />
                            </a>
                        </div>

                        <!-- Deposit -->
                        <div class="col-6">
                            <a href="/Deposit_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                Deposit
                                <img src="/bootstrap/Utilities/deposit.png" alt="Deposit Icon" style="width: 30px; height: 30px; " />
                            </a>
                        </div>

                        <!-- Loan -->
                        <div class="col-6">
                            <a href="/Apply_loan" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                Apply Loan
                                <img src="/bootstrap/Utilities/loan.png" alt="Loan Icon" style="width: 23px; height: 23px;" />
                            </a>
                        </div>

                    </div>
                </div>

            </div>
        </div>


        <!-- Recent Transactions Section -->
        <div class="container-md mt-4 px-5">
            <section class="custom-card transactions">
                <div class="d-flex justify-content-between align-items-center border-bottom">
                    <label class="fs-5 mb-3 fw-bold">Recent Transactions</label>
                    <a href="/Transactions" class="btn btn-link text-decoration-none">View All</a>
                </div>

                <!-- Transactions List -->
                <div class="container py-3 px-3">
                    @if (recentTransactions == null || !recentTransactions.Any())
                    {
                        <p class="text-muted">No transactions available.</p>
                    }
                    else
                    {
                        @foreach (var tx in recentTransactions)
                        {
                            <div class="row fs-6 mb-2 border-bottom pb-2">
                                <div class="col">@tx.TransactionType.TransactionTypeName</div>
                                <div class="col text-end">@FormatHelper.BalanceFormatter(tx.Amount)</div>
                                <div class="col text-end">@tx.TransactionDate.ToShortDateString()</div>
                            </div>
                        }
                    }
                </div>

            </section>
        </div>
    </main>
</div>


@code {
    UserSession userSession { get; set; } = default!;
    ActiveAccountSession activeAccountSession {get;set;} = default!;

    // Mock data for demonstration — replace with real data from your backend
    private List<Account> accountList = new();
    private Account? activeAccount;
    private List<Transaction> recentTransactions = new();
    private int selectedAccountId;
    private string _clientName = "Loading...";
    private string _accountNumber = "Loading...";
    private string _accountStatus = "Loading...";
    private decimal? _currentBalance = 0.00m;
    private string _clientPhone = "Loading...";
    private bool showNotifications = false;
    private string notificationClass => showNotifications ? "show-popup" : string.Empty;

    private string error = string.Empty;

    private void ToggleNotification()
    {
        showNotifications = !showNotifications;
    }

    private string bellIcon =>
        showNotifications ? "bi bi-bell-fill fs-3" : "bi bi-bell fs-3";

    private List<Notifications> recentNotifications = new()
    {
        new Notifications { Sender = "Bank Admin", Amount = 500.00M, Date = DateTime.Now.AddDays(-1) },
        new Notifications { Sender = "System", Amount = 1200.00M, Date = DateTime.Now.AddDays(-2) },
        new Notifications { Sender = "Loan Department", Amount = 3000.00M, Date = DateTime.Now.AddDays(-3) }
    };

    public class Notifications
    {
        public string Sender { get; set; }
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
    }


    public async Task UpdateSelectedAccount(ChangeEventArgs? e = null)
    {
        //  Get the value of the selection
        selectedAccountId = Convert.ToInt32(e?.Value?.ToString());

        //  Update the current account details in the session.
        Account account = await userDataService.GetAccountAsync(selectedAccountId);
        ActiveAccountSession newActiveAccount = userControlledSessionService.CreateActiveAccountSession(account);
        await userControlledSessionService.SetActiveAccountSessionAsync(newActiveAccount, userSession);


        //  Reload page.
        redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage.
                //  Throws SessionNotFoundException if session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);

                //  Get account list.
                await this.LoadAccountList();

                //  Get active account.
                //  Throws AccountNotFoundException is account is not found.
                activeAccount = await userDataService.GetAccountAsync(activeAccountSession.AccountId);

                //  Set display data.
                _clientName = activeAccountSession.AccountName;
                _accountNumber = activeAccountSession.AccountNumber;
                _accountStatus = AccountStatusTypeNames.AS_STRING_LIST[activeAccountSession.AccountStatusId-1];
                _clientPhone = userSession.CurrentUserContact;
                _currentBalance = activeAccount.Balance;
                //  Get 3 most recent transactions of the account.
                recentTransactions = await userDataService
                    .GetRecentAccountTransactionsAsync(
                        activeAccountSession.AccountId,
                        pageSize: 3
                    );

                //  Notify the user if their are permission restrictions in their account.
                this.VerifyAccountPermissions();

                //  Reload component.
                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect user to LOGGING_IN_PAGE if there is no existing session.
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
            catch (AccountNotFoundException)
            {
                _currentBalance = 0.00m;
                error = "Error resolving database. Please try again later.";
            }
        }
    }

    private void VerifyAccountPermissions()
    {
        bool hasRestrictions = (
            !activeAccountSession.AccountCanTransact ||
            !activeAccountSession.AccountCanApplyLoan ||
            !activeAccountSession.AccountCanPayLoan
        );
        if (hasRestrictions)
            error = "You will be unable to access some features due to your account's status.";
    }

    private async Task LoadAccountList()
    {
        List<int> accountIdList = userSession.UserAccountIdList;
        foreach (var id in accountIdList)
        {
            var account = await userDataService.GetAccountAsync(id);
            accountList.Add(account);
        }
    }
}