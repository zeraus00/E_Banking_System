@page "/Client_home"
@inject NavigationManager NavigationManager
@inject ClaimsHelperService _claimsHelper
@inject UserDataService _userDataService
@inject NexusAuthenticationStateProvider _authenticationStateProvider
@inject PageRedirectService _pageRedirectService
@rendermode InteractiveServer
@using System.Text.RegularExpressions;
@using Helpers;

<div class="page">
    <main>
        <AuthorizeView Roles="@RoleNames.User">
            <Authorized>
                <header class="custom-card-clientpage clientheader py-4 d-flex justify-content-between align-items-start">
                    <div class="px-5">
                        <h5>Welcome Back</h5>
                        <div class="d-flex align-items-baseline gap-4">
                            <h2 class="m-0"><strong>@(string.IsNullOrWhiteSpace(_clientName) ? "Client Name" : _clientName)</strong></h2>
                            <h5 class="text-light fw-lighter m-0">
                                @(string.IsNullOrWhiteSpace(_accountNumber) ? "XXXX-XXXX-XXXX" : FormatHelper.AccountNumberFormatter(_accountNumber))
                            </h5>
                        </div>
                    </div>

                    <!-- Notifications -->
                    <div class="d-flex align-items-center justify-content-center me-5 pt-3 position-relative notification" tabindex="0" @onblur="() => showNotifications = false">
                        <img src="/bootstrap/Utilities/Bell.png" alt="Notification Bell" role="button" tabindex="0" @onclick="ToggleNotification" />
                        @if (showNotifications)
                        {
                            <div class="notification-popup">
                                <div class="d-flex justify-content-between align-items-baseline border-bottom">
                                    <label class="mb-3 fw-bold text-dark">Recent Notifications</label>
                                    <a href="/Notifications" class="nav-link text-decoration-none">View All</a>
                                </div>

                                <!-- Notification List -->
                                <div class="container pt-3 px-3">
                                    @if (recentNotifications == null || !recentNotifications.Any())
                                    {
                                        <p class="text-muted">You have no recent notifications.</p>
                                    }
                                    else
                                    {
                                        @foreach (var notif in recentNotifications.Take(3))
                                        {
                                            <div class="mb-3 border-bottom pb-2 text-dark">
                                                <p class="m-0">
                                                    On <strong>@notif.Date.ToShortDateString()</strong>, <strong>@notif.Sender</strong> sent a notification involving <strong>@notif.Amount.ToString("C")</strong>.
                                                </p>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>

                </header>
                <!-- Header -->


                <!-- Main Section: Balance + Actions -->
                <div class="container mt-4">
                    <div class="row">

                        <!-- Balance Card -->
                        <div class="col-12 col-md-5 px-5">
                            <section class="custom-card balance text-start p-3 h-100 border rounded shadow-sm bg-white w-100">
                                <h3 class="fw-bold my-1">Current Balance:</h3>
                                <h4 class="justify-content-center text-center align-items-center">
                                    <span class="@(_currentBalance >= 0 ? "text-success" : "text-danger")">
                                        @_currentBalance.ToString("C")
                                    </span>
                                </h4>
                                <div class="custom-card sm">
                                    <p class="m-1">
                                        <strong>Contact No.:</strong> @(string.IsNullOrWhiteSpace(_clientPhone) ? "N/A" : FormatHelper.PhoneNumberFormatter(_clientPhone))
                                    </p>
                                </div>
                            </section>
                        </div>

                        <!-- Action Buttons -->
                        <div class="col-12 col-md-6 my-auto">
                            <div class="row g-4">

                                <!-- Withdraw -->
                                <div class="col-6">
                                    <a href="/Withdraw_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                        Withdraw
                                        <img src="/bootstrap/Utilities/withdraw.png" alt="Withdraw Icon" style="width: 30px; height: 30px; " />
                                    </a>
                                </div>

                                <!-- Transfer -->
                                <div class="col-6">
                                    <a href="/Transfer_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                        Transfer
                                        <img src="/bootstrap/Utilities/transfer.png" alt="Transfer Icon" style="width: 20px; height: 20px; " />
                                    </a>
                                </div>

                                <!-- Deposit -->
                                <div class="col-6">
                                    <a href="/Deposit_amount" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                        Deposit
                                        <img src="/bootstrap/Utilities/deposit.png" alt="Deposit Icon" style="width: 30px; height: 30px; " />
                                    </a>
                                </div>

                                <!-- Loan -->
                                <div class="col-6">
                                    <a href="/Apply_loan" class="nav-link button d-flex justify-content-between align-items-center shadow-sm h-100">
                                        Apply Loan
                                        <img src="/bootstrap/Utilities/loan.png" alt="Loan Icon" style="width: 23px; height: 23px;" />
                                    </a>
                                </div>

                            </div>
                        </div>

                    </div>
                </div>


                <!-- Recent Transactions Section -->
                <div class="container-md mt-4 px-5">
                    <section class="custom-card transactions">
                        <div class="d-flex justify-content-between align-items-center border-bottom">
                            <label class="fs-5 mb-3 fw-bold">Recent Transactions</label>
                            <a href="/Transaction" class="btn btn-link text-decoration-none">View All</a>
                        </div>

                        <!-- Transactions List -->
                        <div class="container py-3 px-3">
                            @if (recentTransactions == null || !recentTransactions.Any())
                            {
                                <p class="text-muted">No transactions available.</p>
                            }
                            else
                            {
                                @foreach (var tx in recentTransactions.Take(3))
                                {
                                    <div class="row fs-6 mb-2 border-bottom pb-2">
                                        <div class="col">@tx.Type</div>
                                        <div class="col text-end">@tx.Amount.ToString("C")</div>
                                        <div class="col text-end">@tx.Date.ToShortDateString()</div>
                                    </div>
                                }
                            }
                        </div>

                    </section>
                </div>
            </Authorized>
            <NotAuthorized>
                <p>Create unauthorized window here.</p>
            </NotAuthorized>

        </AuthorizeView>
    </main>
</div>


@code {
    // [CascadingParameter]
    // HttpContext? _httpContext { get; set; }
    // Mock data for demonstration — replace with real data from your backend
    private ClaimsPrincipal? _user;
    private Account? Account;
    private UserInfo? UserInfo;
    private string _clientName = string.Empty;
    private string _accountNumber = string.Empty;
    private decimal _currentBalance = 0.0m;
    private string _clientPhone = string.Empty;
    private bool showNotifications = false;
    private string notificationClass => showNotifications ? "show-popup" : string.Empty;

    private void ToggleNotification()
    {
        showNotifications = !showNotifications;
    }

    private List<Notifications> recentNotifications = new()
    {
        new Notifications { Sender = "Bank Admin", Amount = 500.00M, Date = DateTime.Now.AddDays(-1) },
        new Notifications { Sender = "System", Amount = 1200.00M, Date = DateTime.Now.AddDays(-2) },
        new Notifications { Sender = "Loan Department", Amount = 3000.00M, Date = DateTime.Now.AddDays(-3) }
    };

    public class Notifications
    {
        public string Sender { get; set; }
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
    }

    private List<Transaction> recentTransactions = new()
    {
        new Transaction { Type = "Deposit", Amount = 5000.00M, Date = DateTime.Now.AddDays(-1) },
        new Transaction { Type = "Withdrawal", Amount = 2000.00M, Date = DateTime.Now.AddDays(-3) },
        new Transaction { Type = "Transfer", Amount = 1000.00M, Date = DateTime.Now.AddDays(-5) }
    };

    public class Transaction
    {
        public string Type { get; set; }
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
    }

    protected override async Task OnInitializedAsync() 
    {
        //  Get Authentication state
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        //  Redirect to Landing Page if not authenticated.
        _pageRedirectService.RedirectIfNotAuthenticated(_user);

        //  Retrieve account id from claims.
        int accountId = Convert.ToInt32(_claimsHelper.GetClaimValue(_user, CustomClaimTypes.AccountId) ?? "0");

        //  Retrieve account from db.
        Account = await _userDataService.GetAccountAsync(accountId);

        if (Account is not null) {
            _clientName = Account.AccountName;
            _accountNumber = Account.AccountNumber;
            _currentBalance = Account.Balance;
        }

        //  Retrieve userinfo id from claims.
        int userInfoId = Convert.ToInt32(_claimsHelper.GetClaimValue(_user, CustomClaimTypes.UserInfoId) ?? "0");
        
        //  Retrieve userinfo from db.
        UserInfo = await _userDataService.GetUserInfoAsync(userInfoId);
        
        if (UserInfo is not null)
        {
            _clientPhone = UserInfo.ContactNumber;
        }

    }
}