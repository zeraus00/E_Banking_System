@using Helpers;
@using E_BankingSystem.Components.Client_page.Method

@page "/Pay_loan"
@attribute [Authorize(Roles="User")]
@rendermode InteractiveServer

@inject LoanService loanService
@inject PageRedirectService redirectService
@inject TransactionService transactionService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject UserControlledSessionService userControlledSessionService

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Pay Loan</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @FormatHelper.BalanceFormatter(currentBalance)
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-4 p-3">

                @if (error.Length > 0)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>@error</strong>
                    </div>
                }
                @if (accountCanPayLoan)
                {
                    <div class="input-group mb-3">
                        <h5 class="mx-3 my-3 ">Enter Loan Number:</h5>
                        <input class="form-control form-control-custom"
                        style="max-width: 30%"
                        @bind="loanNumber"
                        placeholder=""
                        @oninput="OnInput"
                        @onfocus="ClearDefaultValue"
                        @onblur="SetDefaultValue" />
                    </div>
                    @if(isOverdue)
                    {
                        <h5 class="mx-3 my-3 ">Your payment is overdue.</h5>
                    }

                    <h3 class="mx-3 my-3 ">Enter Loan Payment Amount</h3>
                    <div class="input-group px-4 mb-4">
                        <span class="input-group-text fs-2">₱</span>
                        <input type="number"
                        class="form-control form-control-custom form-control-lg fs-2"
                        placeholder="0.00"
                        @bind="paymentAmount"
                        @onfocus="ClearDefaultValue"
                        @onblur="SetDefaultValue" 
                        />
                    </div>

                    <h6 class="mx-3 mb-4">
                        <strong>Current Balance: </strong>@FormatHelper.BalanceFormatter(currentBalance)
                    </h6>

                    <div class="d-flex justify-content-between mx-5">
                        <div class="d-flex flex-column text-start mb-0">
                            <h5 class="mb-1">@clientName</h5>
                            <p class="mb-0"><strong>Account No.:</strong>@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        </div>

                        <div class="text-end mt-3 w-25">
                            <div class="w-100">
                                <button class="btn btn-primary btn-lg w-100 mb-2" @onclick="InitiateLoanPaymentProcess">Continue</button>
                            </div>
                            <NavLink class="w-100" href="/Client_home">
                                <button class="btn btn-danger btn-lg w-100">Cancel</button>
                            </NavLink>
                        </div>

                    </div>
                }
            </section>
        </div>
    </main>
</div>

@code {
    public TransactionMethod? methodRef;

    private UserSession userSession { get; set; } = default!;
    private AccountViewSession activeAccountSession { get; set; } = default!;
    private TransactionSession transactionSession { get; set; } = default!;

    private int accountId;
    private string accountNumber = "";
    private string clientName = "";
    private decimal currentBalance = 0.0m;

    private string loanNumber = "";
    private CancellationTokenSource _cancellationTokenSource = default!;
    private decimal? paymentAmount = null;
    private bool isOverdue = false;

    private bool accountCanPayLoan { get; set; } = true;
    private string error = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage.
                //  Throws SessionNotFoundException is session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);

                accountId = activeAccountSession.AccountId;

                //  Set display data.
                accountNumber = activeAccountSession.AccountNumber;
                clientName = activeAccountSession.AccountName;
                currentBalance = await userDataService.GetAccountBalanceAsync(accountId);

                //  Validate account transaction permissions.
                accountCanPayLoan = isAccountCanPayLoan();

                //  Reload component.
                StateHasChanged();

                if (!accountCanPayLoan)
                {
                    await Task.Delay(3000);
                    redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
                }
            }
            catch (SessionNotFoundException)
            {
                //  Redirect to LOGGING_IN_PAGE
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
            catch (AccountNotFoundException)
            {
                currentBalance = 0.00m;
                error = "Error resolving database. Please try again later";
            }
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        error = "";
        isOverdue = false;
        if (_cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel(); // Cancel the previous task
        }

        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;

        await Task.Delay(500, token);

        if (!token.IsCancellationRequested)
        {
            if (string.IsNullOrWhiteSpace(loanNumber))
                return;
            // Trigger event or call a method after user stops typing
            await HandleStoppedTyping();
        }
    }

    private async Task HandleStoppedTyping()
    {
        Loan? loan = await loanService.TryGetLoanAsync(loanNumber, accountId);

        if (loan is null)
        {
            error = "This loan number does not exist or is not associated with your account.";
            paymentAmount = 0.00m;
            return;
        }
        if (!HasPostDisbursementStatus(loan.LoanStatus))
        {
            error = "This loan is not active yet.";
            paymentAmount = 0.00m;
            return;
        }
        var now = DateTime.Now;
        if (now.Date > loan.DueDate)
        {
            isOverdue = true;
        }
        paymentAmount = await loanService.GetCurrentPaymentAmount(loan.LoanId, now);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource?.Dispose();
    }

    private void ClearDefaultValue()
    {
        if (!paymentAmount.HasValue)
        {
            paymentAmount = null;
        }
    }

    private void SetDefaultValue()
    {
        if (!paymentAmount.HasValue || paymentAmount == 0.00m)
        {
            paymentAmount = null;
        }
    }

    private bool isAccountCanPayLoan()
    {
        if (activeAccountSession.AccountCanPayLoan)
            return true;

        error = "You are not allowed to initate any loan payment transaction.\n" +
                "Redirecting to Client Home... ";
        return false;
    }

    private async Task InitiateLoanPaymentProcess()
    {
        try
        {
            if (paymentAmount is not > 0)
                throw new ArgumentException();

            if (string.IsNullOrWhiteSpace(loanNumber))
                throw new FieldMissingException();

            Loan? loan = await loanService.TryGetLoanAsync(loanNumber, accountId);

            if (loan is null)
            {
                await ShowMessage("This loan number does not exist or is not associated with your account.");
                return;
            }
            if (!HasPostDisbursementStatus(loan.LoanStatus))
            {
                await ShowMessage("This loan is not active yet.");
                return;
            }

            var now = DateTime.Now;
            //  Create transaction session
            transactionSession = await transactionService
                .CreateTransactionAsync(
                    accountId,
                    (int)TransactionTypeIDs.Loan_Payment,
                    amount: paymentAmount.Value,
                    transactionDate: now,
                    loanId: loan.LoanId
                );

            //  Save transaction session to sesion storage.
            await userControlledSessionService.SetTransactionSessionAsync(
                (int)TransactionTypeIDs.Loan_Payment,
                transactionSession,
                userSession
            );

            //  Redirect to WITHDRAW_CONFIRMATION page.
            redirectService.redirectWithNavigationManager(PageRoutes.PAY_LOAN_CONFIRMATION);
        }
        catch (ArgumentException)
        {
            await ShowMessage("Loan payment amount must be greater than 0.");
        }
        catch (FieldMissingException)
        {
            await ShowMessage("Please enter a valid loan number.");
        }
        catch (AccountNotFoundException) 
        {
            await ShowMessage("Error resolving database. Please try again later.");
        }
        catch (InsufficientBalanceException)
        {
            await ShowMessage("You do not have sufficient balance.");
        }
    }

    private bool HasPostDisbursementStatus(string status)
    {
        return status.Equals(LoanStatusTypes.ACTIVE) || status.Equals(LoanStatusTypes.DELINQUENT);
    }

    private async Task ShowMessage(string msg)
    {
        error = msg;
        StateHasChanged();
        await Task.Delay(3000);
        error = "";
        StateHasChanged();
    }
}