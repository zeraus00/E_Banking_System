@using Helpers;

@page "/Pay_loan_receipt"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ClaimsHelperService _claimsHelper
@inject PageRedirectService redirectService
@inject SessionStorageService sessionStorageService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject UserControlledSessionService userControlledSessionService

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Pay Loan</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @FormatHelper.BalanceFormatter(currentBalance)
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg my-5 p-3">
                <div class="d-flex gap-2 text-start border-bottom w-100 align-items-center p-4">
                    <h4>Total Amount Paid: </h4>
                    <h2 class="fw-bolder mx-5">@FormatHelper.BalanceFormatter(loanPaymentAmount)</h2>
                </div>

                <h6 class="mx-5 my-3">
                    <strong>Current Balance: </strong>@FormatHelper.BalanceFormatter(currentBalance)
                </h6>

                <div class="d-flex justify-content-between align-items-end my-2 mx-5">
                    <div class="d-flex flex-column text-start mb-0">
                        <h5 class="mb-1">@clientName</h5>
                        <p class="mb-0"><strong>Account No.:</strong> @FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        <p class="mb-0"><strong>Loan Number:</strong> @loanNumber</p>
                        <p class="m-0"><strong>Date:</strong> @(date?.ToShortDateString() ?? "") @(time?.ToString(@"hh\:mm") ?? "")</p>
                        <p class="mb-0"><strong>Confirmation No.:</strong> @confirmationNumber</p>
                    </div>
                    <div class="w-25">
                        <button class="btn btn-primary btn-lg w-100" @onclick="GoHome">Go Home</button>
                    </div>
                </div>
            </section>
        </div>
    </main>
</div>

@code
{
    private UserSession userSession { get; set; } = default!;
    private AccountViewSession activeAccountSession { get; set; } = default!;
    private TransactionSession transactionSession { get; set; } = default!;

    private string accountNumber = "";
    private string loanNumber = "";
    private string clientName = "";
    private decimal currentBalance = 0.00m;
    private decimal loanPaymentAmount = 0.00m;
    private string confirmationNumber = "";
    private DateTime? date;
    private TimeSpan? time;

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender) 
        {
            try 
            {
                //  Fetch transaction session details from session storage.
                //  Throws SessionNotFoundException if session is not found.
                //  Throws ControlledSessionNotFound if session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);
                transactionSession = await userControlledSessionService
                    .GetTransactionSessionAsync(userSession);

                //  Set display data.
                accountNumber = activeAccountSession.AccountNumber;
                loanNumber = transactionSession.LoanNumber;
                clientName = activeAccountSession.AccountName;
                currentBalance = await userDataService.GetAccountBalanceAsync(activeAccountSession.AccountId);
                loanPaymentAmount = transactionSession.Amount;
                date = transactionSession.TransactionDate.Date;
                time = transactionSession.TransactionTime;
                confirmationNumber = transactionSession.ConfirmationNumber ?? "CONFIRMATION_NUMBER_MISSING";

                //  Reload component.
                StateHasChanged();

            } 
            catch (ControlledSessionNotFound) 
            {
                //  Redirect to CLIENT_HOME if users try to access the page without an ongoing transaction session.
                redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
            }
        }
    }

    private async Task GoHome() 
    {
        //  Delete transaction session details from session storage.
        await userControlledSessionService.ClearTransactionSessionAsync(userSession);

        //  Redirect user to CLIENT_HOME.
        redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
    }
}