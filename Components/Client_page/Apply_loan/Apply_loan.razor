@using Layout
@using Microsoft.AspNetCore.Components.Routing

@page "/Apply_loan"
@layout MainLayout
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject LoanService loanService
@inject NavigationManager NavigationManager
@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

<div class="page">
	<main>

		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center flex-wrap">
				<h3 class="fw-bold text-light">Registration For Loan</h3>

				<!-- Close Button -->
				<NavLink href="/Client_home">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<div class="information_box">
				<!-- Row 1 -->
				<div class="row g-3">
					<div class="col-12 col-md-3">
						<label class="text-light">First Name</label>
						@* <input class="form-control" @bind="firstName" placeholder="First Name" required> *@
						<div class="form-control">@firstName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Middle Name</label>@* 
						<input class="form-control" @bind="middleName" placeholder="Middle Name"> *@
						<div class="form-control">@middleName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Last Name</label>@* 
						<input class="form-control" @bind="lastName" placeholder="Last Name" required> *@
						<div class="form-control">@lastName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Suffix</label>@* 
						<input class="form-control" @bind="suffix" placeholder="Suffix"> *@
						<div class="form-control">@suffix</div>
					</div>
				</div>

				<!-- Row 2 -->
				<div class="row g-3 mt-2">
					<div class="col-12 col-md-4">
						<label class="text-light">Province</label>@* 
						<input class="form-control" @bind="province" placeholder="Province" required> *@
						<div class="form-control">@province</div>
					</div>
					<div class="col-12 col-md-4">
						<label class="text-light">Municipality</label>@* 
						<input class="form-control" @bind="municipality" placeholder="Municipality" required> *@
						<div class="form-control">@municipality</div>
					</div>
					<div class="col-12 col-md-4">
						<label class="text-light">Barangay</label>@* 
						<input class="form-control" @bind="barangay" placeholder="Barangay" required> *@
						<div class="form-control">@barangay</div>
					</div>
				</div>

				<!-- Row 3 -->
				<div class="row g-3 mt-2">
					<div class="col-12 col-md-6">
						<label class="text-light">Street No.</label>@* 
						<input class="form-control" @bind="street" placeholder="Street No." required> *@
						<div class="form-control">@street</div>
					</div>
					<div class="col-12 col-md-6">
						<label class="text-light">House No.</label>@* 
						<input class="form-control" @bind="houseNumber" placeholder="House No." required> *@
						<div class="form-control">@houseNumber</div>
					</div>
				</div>

				<div class="row g-3 mt-2">
					<!-- Row 4-->
					<div class="col-6 col-md-2">
						<label class="text-light">Age</label>
						@* <input class="form-control" type="number" @bind="age" placeholder="Age" required>> *@
						<div class="form-control">@age</div>
					</div>
					<div class="col-12 col-md-2">
						<label class="text-light">Birth Date</label>
						@* <input class="form-control" type="date" @bind="birthDate" placeholder="mm/dd/yyyy" required> *@
						<div class="form-control">@birthDate.ToShortDateString()</div>
					</div>
					<div class="col-6 col-md-2">
						<label class="text-light">Sex</label>
						@* <select class="form-select" @bind="sex" required>
							<option value="" disabled hidden>--Select Sex--</option>
							<option>Male</option>
							<option>Female</option>
						</select> *@
						<div class="form-control">@sex</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Contact No.</label>
						<input class="form-control" @bind="contactNo" placeholder="Contact No." required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Email</label>
						<input class="form-control" @bind="email" placeholder="Sample@gmail.com" required>
					</div>

					<!-- Row 5 -->
					<div class="col-12 col-md-3">
						<label class="text-light">Civil Status</label>@* 
						<select class="form-select" @bind="civilStatus" required>
							<option value="" disabled hidden>--Select Civil Status--</option>
							<option>Single</option>
							<option>Married</option>
							<option>Separated</option>
							<option>Widowed</option>
						</select> *@
						<div class="form-control">@civilStatus</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Occupation</label>@* 
						<input class="form-control" @bind="occupation" placeholder="Occupation" required> *@
						<div class="form-control">@occupation</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Gross Annual Income (>= 250 000.00)</label>
						<input class="form-control" @bind="minAnnualGross" placeholder="Minimum 250,000" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Type of Loan</label>
						<select class="form-select" @bind="loanTypeId" @bind:after="OnLoanTypeChange" required>
							<option value="-1" disabled hidden>--Select Loan Type--</option>
							@foreach(var loanType in LoanTypeNames.AS_STRING_LIST)
							{
								<option value="@LoanTypeNames.AS_STRING_LIST.IndexOf(loanType)">@loanType</option>
							}
						</select>
					</div>

					<!-- Row 6 -->
					<div class="col-12 col-md-3">
						<label class="text-light">@loanAmountLabel</label>
						<input type="number" class="form-control" @bind="loanAmount" placeholder="Loan Amount" min="@minimumLoanAmount" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Loan Purpose</label>
						<input class="form-control" @bind="loanPurpose" placeholder="Home Purchase, Education, Debt Consolidation, etc" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">@loanTermInMonthsLabel</label>
						<input type="number" class="form-control" @bind="loanTermInMonths" placeholder="Months to Pay" min="@minimumLoanTerm" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Preferred Payment Frequency</label>
						<select class="form-select" @bind="paymentFrequency" required>
							<option value="-1" disabled hidden>--Select Payment Frequency--</option>
							<option value="12">Monthly</option>
							<option value="6">Bi-Monthly</option>
							<option value="3">Quarterly</option>
						</select>
					</div>
				</div>

				<!-- File Uploads -->
				<div class="row g-3 mt-3">
					<div class="col-12 col-md-6">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>
						<div class="d-flex flex-wrap gap-2">
							<input type="file" class="btn btn-light" required>
							<button class="btn btn-outline-light">View Attachment</button>
						</div>
					</div>
					<div class="col-12 col-md-6">
						<label class="text-light">Upload Latest Complete 1 Month Payslip</label>
						<div class="d-flex flex-wrap gap-2">
							<input type="file" class="btn btn-light" required>
							<button class="btn btn-outline-light">View Attachment</button>
						</div>
					</div>
				</div>

				<!-- Terms and Conditions -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Submit -->
				<div class="text-end mt-3">
					<NavLink href="@PageRoutes.CLIENT_HOME">
						<button class="btn btn-danger btn-lg">Cancel</button>
					</NavLink>
					<button class="btn btn-primary btn-lg" @onclick="RegisterLoanAsync">Register</button>
				</div>
				<div class="form-check d-flex justify-content-end mt-3">
					<label class="text-light">@loanSubmittedMessage</label>
				</div>
			</div>
		</div>
	</main>
</div>

@code {
	private string error = "";
	private string loanSubmittedMessage = "";

	/*		Display Labels		*/
	private string loanAmountLabel = "Loan Amount";
	private string loanTermInMonthsLabel = "Loan Term In Months";
	private decimal minimumLoanAmount = 0.00m;
	private int minimumLoanTerm;

	/*		Personal Information		*/
	private string firstName = "";
	private string middleName = "";
	private string lastName = "";
	private string suffix = "";
	private int age;
	private DateTime birthDate;
	private string sex = "";
	private string contactNo = "";
	private string civilStatus = "";
	private string occupation = "";
	private decimal minAnnualGross = 0.00m;

	/*		Address		*/
	private string province = "";
	private string municipality = "";
	private string barangay = "";
	private string street = "";
	private string houseNumber = "";

	/*		Authentication		*/
	private string email = "";

	/*		Loan Details			*/
	private int loanTypeId = -1;
	private decimal loanAmount;
	private string loanPurpose = "";
	private int loanTermInMonths;
	private int paymentFrequency = -1;

	private UserInfo userInfo = default!;
	private Address address = default!;
	private UserSession userSession = default!;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				//	Get user session details from session storage.
				//	Throws SessionNotFoundException if session is not found.
				userSession = await userSessionService.GetUserSession();

				userInfo = await userDataService
				.TryGetUserInfoAsync(
					userSession.UserInfoId,
					includeUserName: true,
					includeBirthInfo: true
				);

				if (userInfo.AddressId is int addressId)
					address = await userDataService.TryGetAddressAsync(addressId);

				firstName = userInfo.UserName.FirstName;
				middleName = userInfo.UserName.MiddleName ?? "";
				lastName = userInfo.UserName.LastName;
				suffix = userInfo.UserName.Suffix ?? "";
				age = userInfo.Age;
				birthDate = userInfo.BirthInfo?.BirthDate ?? DateTime.MinValue;
				sex = userInfo.Sex;
				contactNo = userInfo.ContactNumber;
				civilStatus = userInfo.CivilStatus;
				occupation = userInfo.Occupation;

				province = address?.Province?.ProvinceName ?? "";
				municipality = address?.City?.CityName ?? "";
				barangay = address?.Barangay?.BarangayName ?? "";
				street = address?.Street ?? "";
				houseNumber = address?.House ?? "";

				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				//	Redirect user to CLIENT_HOME if there is no existing session.
				redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
			}
		}
	}

	private async Task RegisterLoanAsync()
	{
		// bool hasMissingName = string.IsNullOrWhiteSpace(firstName) || string.IsNullOrWhiteSpace(lastName);
		// bool hasMissingAddress = string.IsNullOrWhiteSpace(municipality)
		// 	|| string.IsNullOrWhiteSpace(barangay)
		// 	|| string.IsNullOrWhiteSpace(street)
		// 	|| string.IsNullOrWhiteSpace(houseNumber);
		// bool isAgeMissingOrUnderAge = age < 18;
		// bool isDateInValidOrUnderAge = birthDate > DateTime.UtcNow.Date.AddYears(-18);
		// bool isSexInvalid = string.IsNullOrWhiteSpace(sex);
		bool isContactNoMissingOrInvalid = string.IsNullOrWhiteSpace(contactNo) 
			|| !contactNo.All(char.IsDigit)
			|| contactNo.Length != 11;

		string gmailDomain = "@gmail.com";
		bool isEmailInvalid = string.IsNullOrWhiteSpace(email)
			|| email.Length < 6
			|| !email.EndsWith(gmailDomain, StringComparison.OrdinalIgnoreCase);
		// bool isOccupationInvalid = string.IsNullOrWhiteSpace(occupation);
		bool isAnnualGrossInvalid = minAnnualGross < 250000.0m;

		if (isAnnualGrossInvalid)
			error = "Please enter a valid Gross Annual Income not less than 250 000.";
		// if (isOccupationInvalid)
		// 	error = "Please fill out occupation.";
		if (isEmailInvalid)
			error = "Please enter a valid Email.";
		if (isContactNoMissingOrInvalid)
			error = "Please enter a valid Contact No.";
		// if (isSexInvalid)
		// 	error = "Plase choose a valid sex.";
		// if (isDateInValidOrUnderAge)
		// 	error = "You must be older than 18 to use this account or apply for a loan.";
		// if (isAgeMissingOrUnderAge)
		// 	error = "Please enter a valid age not less than 18 years old.";
		// if (hasMissingAddress)
		// 	error = "Please fill out your address.";
		// if (hasMissingName)
		// 	error = "Please fill out your name.";
		Loan newLoan = new Loan
		{
			AccountId = userSession.ActiveAccountSession.AccountId,
			UserInfoId = userSession.UserInfoId,
			ContactNo = contactNo,
			Email = email,
			LoanTypeId = loanTypeId + 1,
			LoanPurpose = loanPurpose,
			LoanAmount = loanAmount,
			LoanTermMonths = loanTermInMonths,
			PaymentFrequency = paymentFrequency,
			ApplicationDate = DateTime.Now.Date
		};

		if (loanService.IsLoanInvalid(newLoan, minimumLoanAmount, minimumLoanTerm))
			error = "Please enter valid values that comply with the chosen loan type's terms.";

		bool hasError = !string.IsNullOrWhiteSpace(error);
		if (hasError)
		{
			await Task.Delay(3000);
			error = "";
			return;
		}

		await loanService.RegisterLoanApplication(newLoan);

		await NavigateToClientHome();
	}

	private void OnLoanTypeChange()
	{
		LoanType loanType = LoanTypeNames.AS_LOAN_TYPE_LIST[loanTypeId];
		loanAmountLabel = "Loan Amount";
		loanTermInMonthsLabel = "Loan Term in Months";
		loanAmountLabel += $" ( >= {loanType.MinimumLoanAmount})";
		loanAmount = loanType.MinimumLoanAmount;
		loanTermInMonths = loanType.LoanTermInMonths;
		loanTermInMonthsLabel += $" ( >= {minimumLoanTerm})";
		minimumLoanAmount = loanType.MinimumLoanAmount;
		minimumLoanTerm = loanType.LoanTermInMonths;
	}

	private async Task NavigateToClientHome()
	{
		int countDownSeconds = 3;
		while(countDownSeconds > 0)
		{
			loanSubmittedMessage = $"Loan Application Submitted. Redirecting to client home in {countDownSeconds}...";
			await Task.Delay(1000 * countDownSeconds);
		}
		loanSubmittedMessage = "";
		NavigationManager.NavigateTo(PageRoutes.CLIENT_HOME);
	}
}
