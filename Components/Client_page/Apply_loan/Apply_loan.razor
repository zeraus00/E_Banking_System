@using Layout
@using Microsoft.AspNetCore.Components.Routing

@page "/Apply_loan"
@layout MainLayout
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject LoanService loanService
@inject NavigationManager NavigationManager
@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject UserControlledSessionService userControlledSessionService

<div class="page">
	<main>
		@if (error.Length > 0)
		{
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				<strong>@error</strong>
			</div>
		}
		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center flex-wrap">
				<h3 class="fw-bold text-light">Registration For Loan</h3>

				<!-- Close Button -->
				<NavLink href="/Client_home">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<div class="information_box">
				<!-- Row 1 -->
				<div class="row g-3">
					<div class="col-12 col-md-3">
						<label class="text-light">First Name</label>
						@* <input class="form-control" @bind="firstName" placeholder="First Name" required> *@
						<div class="form-control form-control-sm">@firstName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Middle Name</label>@* 
						<input class="form-control" @bind="middleName" placeholder="Middle Name"> *@
						<div class="form-control form-control-sm">@middleName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Last Name</label>@* 
						<input class="form-control" @bind="lastName" placeholder="Last Name" required> *@
						<div class="form-control form-control-sm">@lastName</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Suffix</label>@* 
						<input class="form-control" @bind="suffix" placeholder="Suffix"> *@
						<div class="form-control form-control-sm">@suffix</div>
					</div>
				</div>

				<!-- Row 2 -->
				<div class="row g-3 mt-2">
					<div class="col-12 col-md-4">
						<label class="text-light">Province</label>@* 
						<input class="form-control" @bind="province" placeholder="Province" required> *@
						<div class="form-control form-control-sm">@province</div>
					</div>
					<div class="col-12 col-md-4">
						<label class="text-light">Municipality</label>@* 
						<input class="form-control" @bind="municipality" placeholder="Municipality" required> *@
						<div class="form-control form-control-sm">@municipality</div>
					</div>
					<div class="col-12 col-md-4">
						<label class="text-light">Barangay</label>@* 
						<input class="form-control" @bind="barangay" placeholder="Barangay" required> *@
						<div class="form-control form-control-sm">@barangay</div>
					</div>
				</div>

				<!-- Row 3 -->
				<div class="row g-3 mt-2">
					<div class="col-12 col-md-6">
						<label class="text-light">Street No.</label>@* 
						<input class="form-control" @bind="street" placeholder="Street No." required> *@
						<div class="form-control form-control-sm">@street</div>
					</div>
					<div class="col-12 col-md-6">
						<label class="text-light">House No.</label>@* 
						<input class="form-control" @bind="houseNumber" placeholder="House No." required> *@
						<div class="form-control form-control-sm">@houseNumber</div>
					</div>
				</div>

				<div class="row g-3 mt-2">
					<!-- Row 4-->
					<div class="col-6 col-md-2">
						<label class="text-light">Age</label>
						@* <input class="form-control" type="number" @bind="age" placeholder="Age" required>> *@
						<div class="form-control form-control-sm">@age</div>
					</div>
					<div class="col-12 col-md-2">
						<label class="text-light">Birth Date</label>
						@* <input class="form-control" type="date" @bind="birthDate" placeholder="mm/dd/yyyy" required> *@
						<div class="form-control form-control-sm">@birthDate.ToShortDateString()</div>
					</div>
					<div class="col-6 col-md-2">
						<label class="text-light">Sex</label>
						@* <select class="form-select" @bind="sex" required>
							<option value="" disabled hidden>--Select Sex--</option>
							<option>Male</option>
							<option>Female</option>
						</select> *@
						<div class="form-control form-control-sm">@sex</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Contact No.</label>
						<input class="form-control form-control-sm" @bind="contactNo" placeholder="Contact No." required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Email</label>
						<input class="form-control form-control-sm" @bind="email" placeholder="Sample@gmail.com" required>
					</div>

					<!-- Row 5 -->
					<div class="col-12 col-md-3">
						<label class="text-light">Civil Status</label>@* 
						<select class="form-select" @bind="civilStatus" required>
							<option value="" disabled hidden>--Select Civil Status--</option>
							<option>Single</option>
							<option>Married</option>
							<option>Separated</option>
							<option>Widowed</option>
						</select> *@
						<div class="form-control form-control-sm">@civilStatus</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Occupation</label>@* 
						<input class="form-control" @bind="occupation" placeholder="Occupation" required> *@
						<div class="form-control form-control-sm">@occupation</div>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Gross Annual Income (>= 250 000.00)</label>
						<input class="form-control form-control-sm" @bind="minAnnualGross" placeholder="Minimum 250,000" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Type of Loan</label>
						<select class="form-select form-select-sm" @bind="loanTypeId" @bind:after="OnLoanTypeChange" required>
							<option value="-1" disabled hidden>--Select Loan Type--</option>
							@foreach(var loanType in LoanTypes.AS_STRING_LIST)
							{
								<option value="@LoanTypes.AS_STRING_LIST.IndexOf(loanType)">@loanType</option>
							}
						</select>
					</div>

					<!-- Row 6 -->
					<div class="col-12 col-md-3">
						<label class="text-light">@loanAmountLabel</label>
						<input type="number" step="1" class="form-control form-control-sm" @bind="loanAmount" placeholder="Loan Amount" min="@minimumLoanAmount" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Loan Purpose</label>
						<input class="form-control form-control-sm" @bind="loanPurpose" placeholder="Home Purchase, Education, Debt Consolidation, etc" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">@loanTermInMonthsLabel</label>
						<input type="number" class="form-control form-control-sm" @bind="loanTermInMonths" placeholder="Months to Pay" min="@minimumLoanTerm" required>
					</div>
					<div class="col-12 col-md-3">
						<label class="text-light">Preferred Payment Frequency</label>
						<select class="form-select form-select-sm" @bind="paymentFrequency" required>
							<option value="-1" disabled hidden>--Select Payment Frequency--</option>
							<option value="12">Monthly</option>
							<option value="6">Bi-Monthly</option>
							<option value="4">Quarterly</option>
						</select>
					</div>
				</div>

				<!-- File Uploads -->
				<div class="row g-3 mt-3">
					<div class="col-12 col-md-6">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>
						<div class="d-flex flex-wrap gap-2">
							<InputFile OnChange="UploadGovernmentId" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light btn-sm">View Attachment</button>
						</div>
					</div>
					<div class="col-12 col-md-6">
						<label class="text-light">Upload Latest Complete 1 Month Payslip</label>
						<div class="d-flex flex-wrap gap-2">
							<InputFile OnChange="UploadPayslip" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light btn-sm">View Attachment</button>
						</div>
					</div>
				</div>

				<!-- Terms and Conditions -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Submit -->
				<div class="text-end mt-3">
					<NavLink href="@PageRoutes.CLIENT_HOME">
						<button class="btn btn-danger">Cancel</button>
					</NavLink>
					<button class="btn btn-primary" @onclick="RegisterLoanAsync">Register</button>
				</div>
				@if (loanSubmittedMessage.Length > 0)
				{
					<div class="form-check d-flex justify-content-end mt-3">
						<label class="text-light">@loanSubmittedMessage</label>
					</div>
				}
			</div>
		</div>
	</main>
</div>

@code {
	private string error = "";
	private string loanSubmittedMessage = "";

	/*		Display Labels		*/
	private string loanAmountLabel = "Loan Amount";
	private string loanTermInMonthsLabel = "Loan Term In Months";
	private decimal minimumLoanAmount = 0.00m;
	private int minimumLoanTerm;

	/*		Personal Information		*/
	private string firstName = "";
	private string middleName = "";
	private string lastName = "";
	private string suffix = "";
	private int age;
	private DateTime birthDate;
	private string sex = "";
	private string contactNo = "";
	private string civilStatus = "";
	private string occupation = "";
	private decimal minAnnualGross = 0.00m;

	/*		Address		*/
	private string province = "";
	private string municipality = "";
	private string barangay = "";
	private string street = "";
	private string houseNumber = "";

	/*		Authentication		*/
	private string email = "";

	/*		Loan Details			*/
	private int loanTypeId = -1;
	private decimal loanAmount;
	private string loanPurpose = "";
	private int loanTermInMonths;
	private int paymentFrequency = -1;

	private UserInfo userInfo { get; set; } = default!;
	private Address address { get; set; } = default!;
	private UserSession userSession { get; set; } = default!;
	private AccountViewSession activeAccountSession { get; set; } = default!;

	private byte[]? governmentId;
	private byte[]? payslipPicture;

	private bool isSubmitting { get; set; } = false;

	private async Task UploadGovernmentId(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file == null)
			{
				error = "Please upload a government Id.";
			}
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // allow up to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				governmentId = ms.ToArray();
				error = "";
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading Government ID:" + ex.Message;
		}
	}

	private async Task UploadPayslip(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file == null)
			{
				error = "Please upload a payslip picture.";
			}
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * ImageSizes.ONE_MEGA_BYTE); // allow up to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				payslipPicture = ms.ToArray();
				error = "";
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading Government ID:" + ex.Message;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				//	Get user session details from session storage.
				//	Throws SessionNotFoundException if session is not found.
				userSession = await userSessionService.GetUserSession();
				activeAccountSession = userSession.ActiveAccountSession;

				userInfo = await userDataService
				.TryGetUserInfoAsync(
					userSession.UserInfoId,
					includeUserName: true,
					includeBirthInfo: true
				);

				if (userInfo.AddressId is int addressId)
					address = await userDataService.TryGetAddressAsync(addressId);

				firstName = userInfo.UserName.FirstName;
				middleName = userInfo.UserName.MiddleName ?? "";
				lastName = userInfo.UserName.LastName;
				suffix = userInfo.UserName.Suffix ?? "";
				age = userInfo.Age;
				birthDate = userInfo.BirthInfo?.BirthDate ?? DateTime.MinValue;
				sex = userInfo.Sex;
				contactNo = userInfo.ContactNumber;
				civilStatus = userInfo.CivilStatus;
				occupation = userInfo.Occupation;

				province = address?.Province?.ProvinceName ?? "";
				municipality = address?.City?.CityName ?? "";
				barangay = address?.Barangay?.BarangayName ?? "";
				street = address?.Street ?? "";
				houseNumber = address?.House ?? "";

				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				//	Redirect user to CLIENT_HOME if there is no existing session.
				redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
			}
		}
	}

	private async Task RegisterLoanAsync()
	{
		try
		{
			if (isSubmitting)
			{
				error = "Please wait before clicking the button again.";
				await Task.Delay(2000); 
				error = "";
				return;
			}

			isSubmitting = true;

			string gmailDomain = "@gmail.com";
			bool isAnnualGrossInvalid = minAnnualGross < 250000.0m;
			bool isEmailInvalid = string.IsNullOrWhiteSpace(email)
				|| email.Length < 6
				|| !email.EndsWith(gmailDomain, StringComparison.OrdinalIgnoreCase);
			bool isContactNoMissingOrInvalid = string.IsNullOrWhiteSpace(contactNo)
				|| !contactNo.All(char.IsDigit)
				|| contactNo.Length != 11;
			bool isGovernmentIdInvalid = governmentId is null;
			bool isPayslipPicInvalid = payslipPicture is null;

			if (isAnnualGrossInvalid)
				error = "You are required to have a Gross Annual Income not less than 250 000.";
			else if (isEmailInvalid)
				error = "Please enter a valid Email.";
			else if (isContactNoMissingOrInvalid)
				error = "Please enter a valid Contact No.";
			else if (isGovernmentIdInvalid)
				error = "Please upload a valid Government Id photo.";
			else if (isPayslipPicInvalid)
				error = "Please upload a valid Payslip photo.";
			Loan newLoan = new Loan
				{
					AccountId = userSession.ActiveAccountSession.AccountId,
					UserInfoId = userSession.UserInfoId,
					ContactNo = contactNo,
					Email = email,
					LoanTypeId = loanTypeId + 1,
					LoanPurpose = loanPurpose,
					LoanAmount = loanAmount,
					LoanTermMonths = loanTermInMonths,
					PaymentFrequency = paymentFrequency,
					ApplicationDate = DateTime.Now
				};

			if (string.IsNullOrWhiteSpace(error) && loanService.IsLoanInvalid(newLoan, minimumLoanAmount, minimumLoanTerm))
				error = "Please enter valid values that comply with the chosen loan type's terms.";

			bool hasError = !string.IsNullOrWhiteSpace(error);
			if (hasError)
			{
				await Task.Delay(3000);
				error = "";
				return;
			}

			//	Register loan and update UserInfo employment information.
			if (governmentId is byte[] govId && payslipPicture is byte[] payslipPic)
				newLoan = await loanService.RegisterLoanApplication(
					newLoan, 
					activeAccountSession.AccountNumber, 
					userSession.UserInfoId, 
					govId, 
					payslipPic
				);

			//	Update user session.
			//	Set loan application session.
			LoanViewSession loanApplication = new()
				{
					LoanId = newLoan.LoanId,
					UserInfoId = userSession.UserInfoId
				};
			await userControlledSessionService.SetLoanApplicationSessionAsync(loanApplication, userSession);

			await NavigateToLoanReceipt();
		}
		finally
		{
			isSubmitting = false;
		}
	}

	private void OnLoanTypeChange()
	{
		LoanType loanType = LoanTypes.AS_LOAN_TYPE_LIST[loanTypeId];
		loanAmountLabel = "Loan Amount";
		loanTermInMonthsLabel = "Loan Term in Months";
		loanAmountLabel += $" ( >= {loanType.MinimumLoanAmount})";
		loanAmount = loanType.MinimumLoanAmount;
		loanTermInMonths = loanType.LoanTermInMonths;
		loanTermInMonthsLabel += $" ( >= {minimumLoanTerm})";
		minimumLoanAmount = loanType.MinimumLoanAmount;
		minimumLoanTerm = loanType.LoanTermInMonths;
	}

	private async Task NavigateToLoanReceipt()
	{
		int countDownSeconds = 3;
		while (countDownSeconds >= 0)
		{
			loanSubmittedMessage = $"Loan Application Submitted. Please wait...";
			await Task.Delay(1000 * (countDownSeconds));
			countDownSeconds--;
			StateHasChanged();
		}
		loanSubmittedMessage = "";
		NavigationManager.NavigateTo(PageRoutes.LOAN_RECEIPT);
	}
}
