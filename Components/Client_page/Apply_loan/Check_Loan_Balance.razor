@using Layout
@using Microsoft.AspNetCore.Components.Routing
@page "/Check_Loan_Balance"

@layout MainLayout
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject UserControlledSessionService userControlledSessionService
@inject UserDataService userDataService
@inject PageRedirectService redirectService

<div class="page">
	<main>
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Loan Balance Status</h2>
				</div>
			</div>
		</header>
		<section class="container py-4">
			<div class="card shadow-sm">
				<div class="card-body">
					@if (loan is not null)
					{
						<div class="row border-bottom pb-3 mb-3">
							<!-- Account Info -->
							<div class="col-md-6">
								<h5 class="fw-bold">Account Information</h5>
								<table class="table table-sm table-borderless text-white">
									<tr><td>Account Number:</td><td>@activeAccountSession.AccountNumber</td></tr>
									<tr><td>Account Name:</td><td>@activeAccountSession.AccountName</td></tr>
									<tr><td>Statement Date:</td><td>@(loan.StartDate?.ToShortDateString() ?? loan.ApplicationDate.ToShortDateString())</td></tr>
									<tr><td>Loan Amount:</td><td>@loan.LoanAmount</td></tr>
									<tr><td>Loan Term:</td><td>@loan.LoanTermMonths</td></tr>
									<tr><td>Interest Rate:</td><td>@(loan.InterestRate * 100)%</td></tr>
									<tr><td>Loan Status:</td><td>@loan.LoanStatus</td></tr>
								</table>
							</div>

							<!-- Payment Overview -->
							<div class="col-md-6">
								<h5 class="fw-bold">Payment Overview</h5>
								<table class="table table-sm table-borderless text-white">
									<tr><td>Monthly Payment:</td><td>@loan.PaymentAmount</td></tr>
									<tr><td>Interest:</td><td>1,000</td></tr>
								</table>
								<h6 class="fw-semibold">Regular Monthly Payment</h6>
								<table class="table table-sm table-borderless text-white">
									<tr><td>Fees:</td><td>0.00</td></tr>
									<tr><td>Overdue Payments:</td><td>0.00</td></tr>
								</table>
								<h6 class="fw-semibold">Total due: @(loanTransaction?.TransactionDate.ToShortDateString() ?? "")</h6>
								<p><strong>@(loanTransaction?.Amount ?? 0.00m)</strong></p>
								<p><small>@loan.DueDate</small></p>
							</div>
						</div>

						<!-- Activity Log -->
						<div>
							<h5 class="fw-bold">Activity since last statement</h5>
							<table class="table table-bordered table-sm">
								<thead class="table-light">
									<tr>
										<th>Date</th>
										<th>Transaction</th>
										<th>Charge</th>
										<th>Payment</th>
									</tr>
								</thead>
								<tbody>
									<tr class="text-white">
										<td>@(loanTransaction?.TransactionDate.ToShortDateString() ?? "No transaction")</td>
										<td>Payment Received</td>
										<td></td>
										<td>@(loanTransaction?.Amount ?? 0.00m)</td>
									</tr>
								</tbody>
							</table>
						</div>
					}
					@if (error.Length > 0)
					{
						<div class="alert alert-danger alert-dismissible fade show" role="alert">
							<strong>@error</strong>
						</div>
					}
				</div>
			</div>
		</section>
	</main>
</div>

@code {
	private string error = "";

	private AccountViewSession activeAccountSession { get; set; } = default!;
	private Loan? loan { get; set; }
	private Transaction? loanTransaction { get; set; }

	private bool isAccountCanCheckLoan = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync();
			loan = await userDataService.GetAccountLoan(activeAccountSession.AccountId);

			if (loan is null)
			{
				error = "You do not have any loans.";
			}

			isAccountCanCheckLoan = IsAccountCanCheckLoan();

			StateHasChanged();
			//  Redirect to client home if account has not transaction permissions.
			if (!isAccountCanCheckLoan)
			{
				await Task.Delay(3000);
				redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
			}
		}
	}

	private bool IsAccountCanCheckLoan()
	{
		if (activeAccountSession.AccountCanPayLoan)
			return true;


		error = "You are not allowed to initate any loan payments.\n" +
				"Redirecting to Client Home... ";
		return false;
	}
}
