@using Helpers;

@page "/Transfer_amount"
@attribute [Authorize(Roles="User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ClaimsHelperService claimsHelperService
@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

<div class="page">
    <main>

        <!-- Header -->
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Transfer Money</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center mx-3 mt-2">
                    @currentBalance
                </div>
            </section>
        </header>

        <!-- Form Section -->
        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-4 p-4">

                @if (error.Length > 0)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>@error</strong>
                    </div>
                }

                <!-- Input: Account Number + Name -->
                <div class="row g-4 mb-4">
                    <div class="col-12 col-md-6">
                        <label class="text-light">Enter Account Number</label>
                        <input class="form-control form-control-custom form-control-lg mb-3" placeholder="Account Number" required>
                    </div>
                    <div class="col-12 col-md-6">
                        <label class="text-light">Enter Account Name</label>
                        <input class="form-control form-control-custom form-control-lg mb-3" placeholder="Account Name" required>
                    </div>
                </div>

                <!-- Transfer Amount Centered -->
                <div class="row justify-content-center text-center mb-4">
                    <div class="col-12 col-md-8">
                        <h3 class="mb-3">Enter Transfer Amount</h3>
                        <div class="input-group mb-3">
                            <span class="input-group-text fs-4">₱</span>
                            <input type="number" class="form-control form-control-custom form-control-lg fs-2" placeholder="000.00" />
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="d-flex justify-content-between mx-2 mt-3">
                    <div class="text-start">
                        <h5 class="mb-1">@clientName</h5>
                        <p class="mb-0">@accountNumber</p>
                    </div>

                    <div class="text-end mt-3">
                        <NavLink class="w-25" href="/Transfer_confirmation">
                            <button class="btn btn-primary btn-lg w-100 mb-2">Continue</button>
                        </NavLink>
                        <NavLink class="w-25" href="/Client_home">
                            <button class="btn btn-danger btn-lg w-100">Cancel</button>
                        </NavLink>
                    </div>
                </div>
            </section>
        </div>
    </main>
</div>

@code 
{
    private Account? Account;

    private int accountId;
    private string accountNumber = string.Empty;
    private string clientName = string.Empty;
    private decimal currentBalance = 0.0m;

    private string error = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details.
                //  Throws UserNotFoundException if session is not found.
                UserSession userSession = await userSessionService.GetUserSession();
                accountId = userSession.ActiveAccountId;

                //  Set display data.
                accountNumber = userSession.ActiveAccountNumber;
                clientName = userSession.ActiveAccountName;

                //  Get account from database
                //  Throws AccountNotFoundException if account is not found.
                Account = await userDataService.GetAccountAsync(accountId);
                currentBalance = Account.Balance;

                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect to logging in page
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
            catch (AccountNotFoundException)
            {
                currentBalance = 0.00m;
                error = "Error resolving database. Please try again later.";
            }
        }
    }
}
