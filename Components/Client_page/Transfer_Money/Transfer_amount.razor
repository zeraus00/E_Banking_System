@using Helpers;
@using E_BankingSystem.Components.Client_page.Method;
@page "/Transfer_amount"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ClaimsHelperService claimsHelperService
@inject PageRedirectService redirectService
@inject TransactionService transactionService
@inject UserControlledSessionService userControlledSessionService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

<div class="page">
    <main>

        <!-- Header -->
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Transfer Money</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center mx-3 mt-2">
                    @FormatHelper.BalanceFormatter(currentBalance)
                </div>
            </section>
        </header>

        <!-- Form Section -->
        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-2 p-4">

                @if (error.Length > 0)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>@error</strong>
                    </div>
                }
                @if (accountCanTransfer)
                {
                    <!-- Transfer Type Dropdown -->
                    <div class="row g-2 d-flex justify-content-between">
                        <div class="col-12 col-md-5">
                            <label class="text-light">Select Transfer Type</label>
                            <select class="form-control" @bind="transferType">
                                <option value="" hidden>-- Select Transfer Type --</option>
                                <option value="Own">Own Account</option>
                                <option value="Other">Other Account</option>
                            </select>
                        </div>

                        @if (transferType.Equals("Own"))
                        {
                            <!-- Own Account Selected -->
                            <div class="col-12 col-md-6 mb-5">
                                <label class="text-light">Select Own Account</label>
                                <select class="form-control" @bind="selectedOwnAccountId">
                                    <option value="0">-- Select Account --</option>
                                    @foreach (var account in linkedAccounts)
                                    {
                                        <option value="@account.AccountId">@account.AccountName</option>
                                    }
                                </select>
                            </div>
                        }

                        else if (transferType.Equals("Other"))
                        {

                            <!-- Other Account Selected -->
                            <div class="row g-2 mb-4">
                                <div class="col-12 col-md-6">
                                    <label class="text-light">Enter Account Number</label>
                                    <input class="form-control form-control-custom mb-1" placeholder="Account Number"
                                    @bind="otherAccountNumber" required />
                                </div>
                                <div class="col-12 col-md-6">
                                    <label class="text-light">Enter Account Name</label>
                                    <input class="form-control form-control-custom mb-1" placeholder="Account Name"
                                    @bind="otherAccountName" required />
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Transfer Amount Centered -->
                    <div class="row justify-content-center text-center mb-4">
                        <div class="col-12 col-md-6">
                            <h3 class="mb-3">Enter Transfer Amount</h3>
                            <div class="input-group mb-3">
                                <span class="input-group-text fs-4">₱</span>
                                <input type="number" class="form-control form-control-custom form-control-lg fs-2" placeholder="000.00" @bind="transferAmount" />
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="d-flex justify-content-between mx-2 mt-3">
                        <div class="text-start">
                            <h5 class="mb-1 fw-bold">@clientName</h5>
                            <p class="m-0"><strong>Account No.:</strong> @FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        </div>

                        <div class="text-end mt-3 w-25">
                            <div class="w-100">
                                <button class="btn btn-primary btn-lg w-100 mb-2" @onclick="HandleContinue">Continue</button>
                            </div>
                            <NavLink class="w-100" href="/Client_home">
                                <button class="btn btn-danger btn-lg w-100">Cancel</button>
                            </NavLink>
                        </div>
                    </div>
                }
            </section>
        </div>
    </main>
</div>

@code
{

    private UserSession userSession { get; set; } = default!;
    private LinkedAccount activeAccountSession { get; set; } = default!;
    private TransactionSession transactionSession { get; set; } = default!;

    private int accountId;
    private string accountNumber = string.Empty;
    private string clientName = string.Empty;
    private decimal currentBalance = 0.0m;

    private string error = string.Empty;

    // New State Variables
    private string transferType = "";
    private List<LinkedAccount> linkedAccounts = new();
    private int selectedOwnAccountId = 0;
    private string otherAccountName = "";
    private string otherAccountNumber = "";
    private decimal? transferAmount = null;

    private bool accountCanTransfer = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details.
                //  Throws SessionNotFoundException if session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);

                //  Get account id.
                accountId = activeAccountSession.AccountId;

                //  Set display data.
                linkedAccounts = userSession
                    .LinkedAccountList
                    .Where(a => a.AccountId != activeAccountSession.AccountId)
                    .ToList();
                accountNumber = activeAccountSession.AccountNumber;
                clientName = activeAccountSession.AccountName;
                currentBalance = await userDataService.GetAccountBalanceAsync(accountId);

                //  Validate account transaction permissions.
                accountCanTransfer = isAccountCanTransfer();

                //  Reload component.
                StateHasChanged();

                if (!accountCanTransfer)
                {
                    await Task.Delay(3000);
                    redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
                }
            }
            catch (SessionNotFoundException)
            {
                //  Redirect to LOGGING_IN_PAGE.
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
        }
    }

    private void ClearDefaultValue()
    {
        if (!transferAmount.HasValue)
        {
            transferAmount = null;    
        }    
    }

    private void setDefaultValue()
    {
        if (!transferAmount.HasValue || transferAmount == 0.00m)
        {
            transferAmount = null;    
        }    
    }

    private bool isAccountCanTransfer()
    {
        if (activeAccountSession.AccountCanTransact)
            return true;

        error = "You are not allowed to initiate a transfer transaction.\nRedirecting to Client Home...";
        return false;
    }

    private async Task InitiateTransferProcess()
    {
        try
        {
            if (transferAmount is not > 0)
            {
                throw new ArgumentException();    
            }

            var finalAccountNumber = otherAccountNumber.Replace("-", "");
            Console.WriteLine(finalAccountNumber);
            int finalCounterId = transferType.Equals("Own")
                ? selectedOwnAccountId
            : await userDataService.GetAccountIdAsync(finalAccountNumber, otherAccountName);
            transactionSession = await transactionService.CreateTransactionAsync(
                accountId,
                (int)TransactionTypeIDs.Outgoing_Transfer,
                transferAmount.Value,
                DateTime.Now,
                finalCounterId
            );

            await userControlledSessionService.SetTransactionSessionAsync(
                (int)TransactionTypeIDs.Outgoing_Transfer,
                transactionSession,
                userSession
            );

            redirectService.redirectWithNavigationManager(PageRoutes.TRANSFER_CONFIRMATION);
        }
        catch (ArgumentException)
        {
            error = "Transfer amount must be greater than 0.";
        }
        catch (FieldMissingException)
        {
            error = "Please choose a valid transfer method.";
        }
        catch (AccountNotFoundException)
        {
            error = "Error resolving database. Please try again later.";
        }
    }

    private async Task HandleContinue()
    {
        error = "";

        if (string.IsNullOrWhiteSpace(transferType))
            error = "Please select a transfer type.";
        else if (transferType == "Own" && selectedOwnAccountId == 0)
            error = "Please select one of your own accounts.";
        else if (transferType == "Other")
        {
            if (string.IsNullOrWhiteSpace(otherAccountNumber))
                error = "Please enter the recipient's account number.";
            if (string.IsNullOrWhiteSpace(otherAccountName))
                error = "Please enter the recipient's account name.";
        }
        else if (!transferAmount.HasValue || transferAmount <= 0)
            error = "Please enter a valid transfer amount.";
        else if (transferAmount > currentBalance)
            error = "Insufficient balance.";

        if (error.Length>0)
        {
            StateHasChanged();
            await RefreshError();
            return;
        }

        await InitiateTransferProcess();
    }

    private async Task RefreshError()
    {
        await Task.Delay(3000);
        error = "";
        StateHasChanged();
    }
}
