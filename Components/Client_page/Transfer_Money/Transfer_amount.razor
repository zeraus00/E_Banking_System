@page "/Transfer_amount"
@attribute [Authorize(Roles="User")]

@inject NavigationManager NavigationManager
@inject ClaimsHelperService _claimsHelper
@inject NexusAuthenticationStateProvider _authenticationStateProvider
@inject PageRedirectService _redirectService
@inject UserDataService _userDataService
@using Helpers;

<div class="page">
    <main>

        <!-- Header -->
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Transfer Money</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center mx-3 mt-2">
                    @currentBalance
                </div>
            </section>
        </header>

        <!-- Form Section -->
        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-4 p-4">

                <!-- Input: Account Number + Name -->
                <div class="row g-4 mb-4">
                    <div class="col-12 col-md-6">
                        <label class="text-light">Enter Account Number</label>
                        <input class="form-control form-control-custom form-control-lg mb-3" placeholder="Account Number" required>
                    </div>
                    <div class="col-12 col-md-6">
                        <label class="text-light">Enter Account Name</label>
                        <input class="form-control form-control-custom form-control-lg mb-3" placeholder="Account Name" required>
                    </div>
                </div>

                <!-- Transfer Amount Centered -->
                <div class="row justify-content-center text-center mb-4">
                    <div class="col-12 col-md-8">
                        <h3 class="mb-3">Enter Transfer Amount</h3>
                        <div class="input-group mb-3">
                            <span class="input-group-text fs-4">$</span>
                            <input type="number" class="form-control form-control-custom form-control-lg fs-2" placeholder="000.00" />
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="d-flex justify-content-between mx-2 mt-3">
                    <div class="text-start">
                        <h5 class="mb-1">@clientName</h5>
                        <p class="mb-0">@accountNumber</p>
                    </div>

                    <div class="text-end mt-3">
                        <NavLink class="w-25" href="/Transfer_confirmation">
                            <button class="btn btn-primary btn-lg w-100 mb-2">Continue</button>
                        </NavLink>
                        <NavLink class="w-25" href="/Client_home">
                            <button class="btn btn-danger btn-lg w-100">Cancel</button>
                        </NavLink>
                    </div>
                </div>
            </section>
        </div>
    </main>
</div>

@code 
{
    private ClaimsPrincipal? user;
    private Account? Account;

    private string accountNumber = string.Empty;
    private string clientName = string.Empty;
    private decimal currentBalance = 0.0m;


    protected override async Task OnInitializedAsync()
    {
        //  Get Authentication State
        AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        //  Retrieve userAuth id from claims.
        var userAuthId = Convert.ToInt32(_claimsHelper.GetClaimValue(user, ClaimTypes.NameIdentifier) ?? "0");

        // //  Retrieve account id list from userAuthObject
        // List<int>? accountIds = await _userDataService.GetAccountIdListAsync(userAuthId);

        // //  Retreive account id from list.
        // var accountId = accountIds?[0] ?? 5;

        var accountId = await _userDataService.GetFirstAccountAsync(userAuthId) ?? 0;

        //  Retriev account from db.
        Account = await _userDataService.GetAccountAsync(accountId);

        if (Account is not null)
        {
            accountNumber = Account.AccountNumber;
            clientName = Account.AccountName;
            currentBalance = Account.Balance;
        }
    }
}
