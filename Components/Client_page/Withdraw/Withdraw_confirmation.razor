@page "/Withdraw_confirmation"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject TransactionService transactionService
@inject SessionStorageService sessionStorageService
@inject UserSessionService userSessionService
@using Helpers;

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Withdraw</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @currentBalance
                </div>
            </section>
        </header>

        <div class="container">

            <section class="card registration shadow-lg d-flex flex-column my-4 p-3">
                <div class="mx-auto text-center p-4">
                    <h5>Withdraw Amount</h5>
                    <h1 class="fw-bolder py-3 mb-2">@withdrawAmount</h1>
                </div>

                <div class="d-flex justify-content-between mx-5">

                    <div class="d-flex flex-column text-start text-light mb-0">
                        <h5 class="mb-1 fw-bold">@clientName</h5>
                        <p class="m-0">@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        <p class="m-0">@date</p>
                        <p class="m-0">@transactionNumber</p>
                    </div>

                    <section class="d-flex flex-column form-check d-flex justify-content-end mt-3 w-25">
                        <div class="text-end mt-3 w-100">
                            <div>
                                <button class="btn btn-primary btn-lg w-100 mb-2" @onclick="ConfirmWithdraw">Confirm</button>
                            </div>
                            <div>
                                <button class="btn btn-warning btn-lg w-100 mb-3" @onclick="CancelWithdraw">Go Back</button>
                            </div>
                        </div>
                    </section>

                </div>

                <div class="d-flex justify-content-end pb-2 mx-5">
                    <input class="form-check-input mx-2" type="checkbox" id="termsAndConditions required">
                    <label class="form-check-label text-light mb-2" for="withdrawAmountVerification">
                        Confirm the details are correct.
                    </label>
                </div>

            </section>
        </div>
    </main>
</div>

@code 
{
    private string accountNumber = "Loading...";
    private string clientName = "Loading...";
    private decimal currentBalance = 0.00m;
    private decimal withdrawAmount = 0.00m;
    private string transactionNumber = "Loading...";
    private DateTime? date;

    private string error = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender) 
        {
            try 
            {
                //  Fetch user and transaction session from storage.
                //  Throws SessionNotFoundException if session is not found.
                UserSession userSession = await userSessionService.GetUserSession(); 
                TransactionSession transactionSession = await sessionStorageService.FetchSessionAsync<TransactionSession>(SessionSchemes.WITHDRAW_SESSION);

                //  Set display data.
                accountNumber = userSession.ActiveAccountNumber;
                clientName = userSession.ActiveAccountName;
                currentBalance = transactionSession.CurrentBalance;
                withdrawAmount = transactionSession.Amount;
                transactionNumber = transactionSession.TransactionNumber;
                date = transactionSession.TransactionDate;

                //  Reload component.
                StateHasChanged();
            } 
            catch (SessionNotFoundException) 
            {
                //  Redirect to client home if users try to access the page without an ongoing transaction session.
                redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
            }
        }
    }

    private async Task ConfirmWithdraw()
    {
        try 
        {
            //  Process withdraw transaction.
            await transactionService.ProcessTransactionAsync(SessionSchemes.WITHDRAW_SESSION);

            //  Redirect to withdraw receipt page.
            redirectService.redirectWithNavigationManager(PageRoutes.WITHDRAW_RECEIPT);
        } 
        catch (AccountNotFoundException)
        {
            error = "Error resolving database. Please try again later";
        }
        catch (InsufficientBalanceException)
        {
            error = "You do not have sufficient balance";
        }
    }

    private async Task CancelWithdraw()
    {
        //  Persist cancelled transaction to database and delete transaction details from session storage.
        await transactionService.TransactionCancelledAsync(SessionSchemes.WITHDRAW_SESSION);

        //  Redirect to client home.
        redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
    }
}