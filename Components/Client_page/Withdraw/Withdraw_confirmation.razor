@page "/Withdraw_confirmation"
@attribute [Authorize(Roles = "User")]

@inject NavigationManager NavigationManager
@inject ClaimsHelperService _claimsHelper
@inject PageRedirectService _redirectService
@inject UserDataService _userDataService
@using Helpers;

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Withdraw</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @currentBalance
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column my-4 p-3">
                <div class="mx-auto text-center p-4">
                    <h5>Withdraw Amount</h5>
                    <h1 class="fw-bolder py-3 mb-2">WithdrawAmount</h1>
                </div>

                <div class="d-flex justify-content-between mx-5">
                    <div class="d-flex flex-column text-start text-light mb-0">
                        <h5 class="mb-1 fw-bold">@clientName</h5>
                        <p class="m-0">@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        <p class="m-0">@date</p>
                        <p class="m-0">confirmationNumber</p>
                    </div>

                    <section class="d-flex flex-column form-check d-flex justify-content-end mt-3">
                        <div class="text-end mt-3">
                            <NavLink class="w-25" href="/Withdraw_receipt">
                                <button class="btn btn-primary btn-lg w-100 mb-2">Confirm</button>
                            </NavLink>
                            <NavLink class="w-25" href="/Withdraw_amount">
                                <button class="btn btn-warning btn-lg w-100 mb-3">Go Back</button>
                            </NavLink>
                        </div>

                        <div class="pb-2">
                            <input class="form-check-input mx-2" type="checkbox" id="termsAndConditions required">
                            <label class="form-check-label text-light mb-2" for="withdrawAmountVerification">
                                Confirm the details are correct.
                            </label>
                        </div>


                    </section>
                </div>
            </section>
        </div>
    </main>
</div>

@code 
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    private ClaimsPrincipal? user;
    private Account? Account;

    private string accountNumber = string.Empty;
    private string clientName = string.Empty;
    private decimal currentBalance = 0.0m;
    private DateTime? date;

    protected override async Task OnInitializedAsync()
    {
        //  Get Authentication State
        AuthenticationState authState = await authenticationState;
        user = authState.User;

        //  Retrieve userAuth id from claims.
        var userAuthId = Convert.ToInt32(_claimsHelper.GetClaimValue(user, ClaimTypes.NameIdentifier) ?? "0");

        // //  Retrieve account id list from userAuthObject
        // List<int>? accountIds = await _userDataService.GetAccountIdListAsync(userAuthId);

        // //  Retreive account id from list.
        // var accountId = accountIds?[0] ?? 5;

        var accountId = await _userDataService.GetFirstAccountAsync(userAuthId) ?? 0;

        //  Retriev account from db.
        Account = await _userDataService.GetAccountAsync(accountId);

        if (Account is not null)
        {
            accountNumber = Account.AccountNumber;
            clientName = Account.AccountName;
            currentBalance = Account.Balance;
            date = DateTime.UtcNow;
        }
    }
}