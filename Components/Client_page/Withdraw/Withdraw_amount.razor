@using Helpers;
@using E_BankingSystem.Components.Client_page.Method

@page "/Withdraw_amount"
@attribute [Authorize(Roles="User")]
@rendermode InteractiveServer

@inject PageRedirectService redirectService
@inject TransactionService transactionService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject UserControlledSessionService userControlledSessionService

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Withdraw</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @FormatHelper.BalanceFormatter(currentBalance)
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-4 p-3">

                @if (error.Length > 0)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>@error</strong>
                    </div>
                }
                @if (accountCanWithdraw)
                {
                    <h3 class="mx-3 my-3 ">Enter Withdrawal Amount</h3>
                    <div class="input-group px-4 mb-4">
                        <span class="input-group-text fs-2">₱</span>
                        <input type="number"
                        class="form-control form-control-custom form-control-lg fs-2"
                        placeholder="0.00"
                        @bind="withdrawAmount"
                        @onfocus="ClearDefaultValue"
                        @onblur="SetDefaultValue" />
                    </div>
                    <h6 class="mx-3 mb-4">
                        <strong>Current Balance: </strong>@FormatHelper.BalanceFormatter(currentBalance)
                    </h6>

                    <div class="mb-4 mt-2">
                        <h5 class="text-light fs-5 mx-5">Withdraw Options:</h5>
                        <TransactionMethod @ref="methodRef" />

                    </div>

                    <div class="d-flex justify-content-between mx-5">
                        <div class="d-flex flex-column text-start mb-0">
                            <h5 class="mb-1">@clientName</h5>
                            <p class="mb-0"><strong>Account No.:</strong>@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        </div>

                        <div class="text-end mt-3 w-25">
                            <div class="w-100">
                                <button class="btn btn-primary btn-lg w-100 mb-2" @onclick="InitiateWithdrawProcess">Continue</button>
                            </div>
                            <NavLink class="w-100" href="/Client_home">
                                <button class="btn btn-danger btn-lg w-100">Cancel</button>
                            </NavLink>
                        </div>

                    </div>
                }
            </section>
        </div>
    </main>
</div>

@code {
    public TransactionMethod? methodRef;

    private UserSession userSession { get; set; } = default!;
    private AccountViewSession activeAccountSession { get; set; } = default!;
    private TransactionSession transactionSession { get; set; } = default!;

    private int accountId;
    private string accountNumber = "Loading...";
    private string clientName = "Loading...";
    private decimal currentBalance = 0.0m;

    private decimal? withdrawAmount = null;

    private bool accountCanWithdraw { get; set; } = true;
    private string error = string.Empty;

    private CardModel card = new CardModel
        {
            Id = "sample-id",
            Name = "Sample Card",
            LogoUrl = "/images/sample-logo.png"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage.
                //  Throws SessionNotFoundException is session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);

                accountId = activeAccountSession.AccountId;

                //  Set display data.
                accountNumber = activeAccountSession.AccountNumber;
                clientName = activeAccountSession.AccountName;
                currentBalance = await userDataService.GetAccountBalanceAsync(accountId);

                //  Validate account transaction permissions.
                accountCanWithdraw = IsAccountCanWithdraw();

                //  Reload component.
                StateHasChanged();

                if (!accountCanWithdraw)
                {
                    await Task.Delay(3000);
                    redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
                }
            }
            catch (SessionNotFoundException)
            {
                //  Redirect to LOGGING_IN_PAGE
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
            catch (AccountNotFoundException)
            {
                currentBalance = 0.00m;
                error = "Error resolving database. Please try again later";
            }
        }
    }

    private void ClearDefaultValue()
    {
        if (!withdrawAmount.HasValue)
        {
            withdrawAmount = null;
        }
    }

    private void SetDefaultValue()
    {
        if (!withdrawAmount.HasValue || withdrawAmount == 0.00m)
        {
            withdrawAmount = null;
        }
    }

    private bool IsAccountCanWithdraw()
    {
        if (activeAccountSession.AccountCanTransact)
            return true;

        error = "You are not allowed to initate any withdraw transaction.\n" +
                "Redirecting to Client Home... ";
        return false;
    }

    private async Task InitiateWithdrawProcess()
    {
        try
        {
            if (withdrawAmount is not > 0)
                throw new ArgumentException();
            if (methodRef!.selectedCardId < 1 || methodRef!.selectedCardId > 3)
                throw new FieldMissingException();
            //  Create transaction session
            transactionSession = await transactionService
                .CreateTransactionAsync(
                    accountId,
                    (int)TransactionTypeIDs.Withdrawal,
                    withdrawAmount.Value,
                    DateTime.Now,
                    externalVendorId: methodRef!.selectedCardId
                );

            //  Save transaction session to sesion storage.
            await userControlledSessionService.SetTransactionSessionAsync(
                (int)TransactionTypeIDs.Withdrawal,
                transactionSession,
                userSession
            );

            //  Redirect to WITHDRAW_CONFIRMATION page.
            redirectService.redirectWithNavigationManager(PageRoutes.WITHDRAW_CONFIRMATION);
        }
        catch (ArgumentException)
        {
            error = "Withdraw amount must be greater than 0.";
        }
        catch (FieldMissingException)
        {
            error = "Please choose a valid payment method.";
        }
        catch (AccountNotFoundException) 
        {
            error = "Error resolving database. Please try again later.";
        }
        catch (InsufficientBalanceException)
        {
            error = "You do not have sufficient balance.";
        }
    }
}