@using Helpers;

@page "/Settings_page"
@attribute [Authorize(Roles="User")]
@rendermode InteractiveServer

@inject PageRedirectService redirectService
@inject UserControlledSessionService userControlledSessionService
@inject UserSessionService userSessionService

<PageTitle>Settings</PageTitle>

<div class="page">
	<main>

		<!-- Header -->
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Settings</h2>
				</div>
			</div>
		</header>

		<!-- Settings Main Content -->
		<div class="container-fluid text-white px-4 py-5">

			<div class="card registration shadow-lg p-5">
				<!-- Profile Section -->
				<div class="d-flex justify-content-between align-items-center">
					<div class="d-flex align-items-center mb-4">
						<div class="rounded-circle bg-secondary" style="width: 80px; height: 80px;"></div>
						<div class="ms-3">
							<h5 class="mb-1">@clientName</h5>
							<small class="text-muted">@accountNumber</small>
						</div>
					</div>
					<a href="/User_info" class="btn btn-link text-decoration-underline text-light my-auto">Update User Info</a>
				</div>
				<!-- Email -->
				<div class="mb-3 border-bottom pb-2 d-flex justify-content-between align-items-center">
					<div>
						<label class="form-label text-muted">Email Address</label>
						<div>@email</div>
					</div>
					<NavLink class="custom-nav-link" href="/Settings_email_password">
						<button class="btn btn-link text-decoration-none text-light">Change</button>
					</NavLink>
				</div>

				<!-- Contact Number -->
				<div class="mb-3 border-bottom pb-2 d-flex justify-content-between align-items-center">
					<div>
						<label class="form-label text-muted">Contact No.</label>
						<div>@FormatHelper.PhoneNumberFormatter(contactNo)</div>
					</div>
					<NavLink class="custom-nav-link" href="/Settings_contact_password">
						<button class="btn btn-link text-decoration-none text-light">Change</button>
					</NavLink>
				</div>

				<!-- Password -->
				<div class="border-bottom pb-2 d-flex justify-content-between align-items-center">
					<div>
						<label class="form-label text-muted">Password</label>
						<div>**********</div>
					</div>
					<NavLink class="custom-nav-link" href="/Settings_password_otp">
						<button class="btn btn-link text-decoration-none text-light">Change</button>
					</NavLink>
				</div>

				<!-- Go Back Navlink -->
				<section class="d-flex justify-content-end align-items-end">
					<a href="/Client_home" class="btn btn-primary btn-lg mt-5 mb-3">
						← Go Back
					</a>
				</section>
			</div>
		</div>
	</main>
</div>

@code 
{
	private UserSession userSession { get; set; } = default!;
	private AccountViewSession activeAccountSession { get; set; } = default!;
	private string email = "Loading...";
	private string accountNumber = "Loading...";
	private string clientName = "Loading...";
	private string contactNo = "Loading...";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				//	Get user session details from session storage.
				//	Throws SessionNotFoundException if session is not found.
				userSession = await userSessionService.GetUserSession();
				activeAccountSession = await userControlledSessionService.GetActiveAccountSessionAsync(userSession);

				//	Set display data.
				email = userSession.CurrentUserEmail;
				accountNumber = activeAccountSession.AccountNumber;
				clientName = userSession.CurrentUserName;
				contactNo = userSession.CurrentUserContact;

				//	Reload component.
				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				//	Redirect to LOGGING_IN_PAGE if session is not found.
				redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
			}
		}
	}
}
