@using Services
@using Exceptions
@using System.Text.Json;
@using Data.Constants
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions;

@page "/Open_another_account"
@attribute [Authorize(Roles ="User")]
@rendermode InteractiveServer
@inject ApiLoaderService apiLoaderService
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject HttpClient HttpClient


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<PageTitle>Open Another Account</PageTitle>

<div class="page">
	<main>

		<!-- Registration Box -->
		<div class="card registration mt-3 p-4 shadow-lg">
			<div class="d-flex justify-content-between align-items-center">

				<!-- Close Button -->
				<NavLink href="/Client_home">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<!--to show the error in the UI-->
			@if (!string.IsNullOrEmpty(error))
			{
				<div class="alert alert-danger" role="alert">@error</div>
			}

			<!-- Account Holder Details Border -->
			<div class="d-flex align-items-center my-3">
				<span class="text-light me-2">Account Holder's Details</span>
				<div class="flex-grow-1">
					<hr class="m-0" style="border: 1px solid white; opacity: 100%;">
				</div>
			</div>


			<div class="information_box">


				<!-- Row 1 -->
				<div class="row g-2 mt-2">

					<!-- Account Sub Type -->
					<div class="col-2">
						<label class="text-light">Account Sub-Type</label>
						<select class="form-select form-select-sm" @bind="selectedAccountTypeName">
							<option value="" hidden>@subTypePlaceHolder</option>
							@foreach (var accountType in accountTypeNames.AccountTypeNameList)
							{
								<option value="@accountType">@accountType</option>
							}
						</select>
					</div>

					<!-- Account Product Type -->
					<div class="col-2">
						<label class="text-light">Account Product Type</label>
						<select class="form-select form-select-sm" @bind="selectedAccountProductTypeName">
							<option value="" hidden>@productTypePlaceHolder</option>
							@foreach (var productType in accountProductTypeNames.AccountProductTypeNameList)
							{
								<option value="@productType">@productType</option>
							}
						</select>
					</div>
				</div>


				<!-- Row 2 -->
				<div class="row g-2 mt-2">

					<!-- Primary Accouunt Name -->
					<label class="text-light">Primary Account Name</label>
					<div class="row g-2">

						<!-- First Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userFirstName" placeholder="First Name" disabled>
						</div>

						<!-- Middle Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userMiddleName" disabled>
						</div>

						<!-- Last Name -->
						<div class="col-3">
							<input class="form-control form-control-sm" @bind="userLastName" placeholder="Last Name" disabled>
						</div>

						<!-- Suffix Name -->
						<div class="col-1">
							<input class="form-control form-control-sm" @bind="userSuffix" disabled>
						</div>

					</div>

				</div>




				<!-- Row 3 -->
				<div class="row g-2 mt-2">
					<!-- Age -->
					<div class="col">
						<label class="text-light">Age</label>
						<input class="form-control form-control-sm" @bind="age" disabled>
					</div>
					<!-- Birth Date -->
					<div class="col">
						<label class="text-light">Birth Date</label>
						<input class="form-control form-control-sm" type="date" @bind="birthDate" disabled>
					</div>

					<!-- Occupation -->
					<div class="col">
						<label class="text-light">Occupation</label>
						<input class="form-control form-control-sm" @bind="Occupation" placeholder="Occupation" required>
					</div>
					<!-- Contact No -->
					<div class="col">
						<label class="text-light">Contact No.</label>
						<input class="form-control form-control-sm" @bind="contactNumber" placeholder="Contact No." required>
					</div>
				</div>


				<!-- Row 4 -->
				<div class="row g-2 mt-3">

					<!-- Full Address -->
					<label class="text-light">Full Address</label>

					<!-- Region -->
					<div class="col">
						<label class="text-light">Region</label>
						<input class="form-control form-control-sm" @bind="selectedRegion" disabled>
					</div>

					<!-- Province -->
					<div class="col">
						<label class="text-light">Province</label>
						<input class="form-control form-control-sm" @bind="selectedProvince" disabled>
					</div>



					<!-- Municipality/City -->
					<div class="col">
						<label class="text-light">Municipality/City</label>
						<input class="form-control form-control-sm" @bind="selectedCity" disabled>
					</div>

					<!-- Barangay -->
					<div class="col">
						<label class="text-light">Barangay</label>
						<input class="form-control form-control-sm" @bind="selectedBarangay" disabled>
					</div>

					<!-- Postal Code -->
					<div class="col">
						<label class="text-light">Postal Code</label>
						<input class="form-control form-control-sm" @bind="postalCode" disabled>
					</div>

					<!-- Street No. -->
					<div class="col">
						<label class="text-light">Street No.</label>
						<input class="form-control form-control-sm" @bind="street" placeholder="Street No." disabled>
					</div>

					<!-- House No. -->
					<div class="col">
						<label class="text-light">House No.</label>
						<input class="form-control form-control-sm" @bind="houseNo" placeholder="House No." disabled>
					</div>

				</div>

				<div class="row g-2 mt-2">

					<!-- Row 5 (Beneficiary's Name) -->
					<div class="col-12">
						<label class="text-light">Beneficiary's Name</label>
						<div class="row g-2">
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryAccountName" @bind:event="oninput" placeholder="Full Name">
							</div>
							<div class="col-3">
								<input class="form-control form-control-sm" @bind="beneficiaryAccountNumber" @bind:event="oninput" placeholder="Account Number">
							</div>
							<div class="col-2">
								<button class="btn btn-sm btn-primary w-100" @onclick="CheckBeneficiaryAccount">
									Check Account
								</button>
							</div>
							@if (showBeneficiaryCheckResult)
							{
								<div class="mt-1 text-sm text-white">
									@if (!string.IsNullOrEmpty(noBeneficiaryFound))
									{
										<span class="text-danger">@noBeneficiaryFound</span>
									}
									else
									{
										<span class="text-success">@beneficiaryCheckMessage</span>
									}
								</div>
							}
						</div>
					</div>
				</div>

				<div class="row g-3 mt-3">
					<!-- Upload Government ID -->
					<div class="col-md-4">
						<label class="text-light">Upload Government Valid ID (Front & Back)</label>

						<!-- View Button -->
						<div class="d-flex gap-2">
							<InputFile OnChange="UploadGovernmentId" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light" @onclick="() => ShowImageModal(governmentIdPreview)">View</button>
						</div>
					</div>

					<!-- Upload 1x1 Picture -->
					<div class="col-md-4">
						<label class="text-light">Upload 1x1 Picture</label>

						<!-- View BUtton -->
						<div class="d-flex gap-2">
							<InputFile OnChange="UploadProfilePicture" class="btn btn-light btn-sm w-75" required />
							<button class="btn btn-outline-light" @onclick="() => ShowImageModal(profilePicturePreview)">View</button>
						</div>
					</div>

					@if (isModalVisible && !string.IsNullOrEmpty(modalImage))
					{
						<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
							<div class="modal-dialog modal-lg modal-dialog-centered">
								<div class="modal-content bg-dark text-white">
									<div class="modal-header">
										<h5 class="modal-title">Preview</h5>
										<button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
									</div>
									<div class="modal-body text-center">
										<img src="@modalImage" class="img-fluid" />
									</div>
								</div>
							</div>
						</div>
					}

					<!-- TIN -->
					<div class="col-md-3">
						<label class="text-light">Tax Identification Number</label>
						<input class="form-control" @bind="taxIdentificationNumber" placeholder="Tax Identification Number" required>
					</div>

				</div>

				<!-- Border -->
				<div class="d-flex align-items-center mt-5 mb-3">
					<span class="text-light me-2">Setup Sign In Credentials</span>
					<div class="flex-grow-1">
						<hr class="m-0" style="border: 1px solid white; opacity: 100%;" />
					</div>
				</div>

				<!-- Credentials Inputs -->
				<div class="row g-2 mb-3">
					<!-- Username -->
					<div class="col-3">
						<label class="text-light">Username</label>
						<input class="form-control form-control-sm" @bind="userName" placeholder="Username" disabled>
					</div>
					<!-- Email Address -->
					<div class="col-3">
						<label class="text-light">Email Address</label>
						<input class="form-control form-control-sm" @bind="email" placeholder="Email" disabled>
					</div>
				</div>

				<!-- Terms and Conditions Checkbox -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Register Button -->
				<div class="text-end mt-3">
					<button class="btn btn-primary btn-secondary" @onclick="RegisterUserAsync">Submit Application</button>
				</div>

			</div>
		</div>
	</main>
</div>



@code {
	private UserSession userSession { get; set; } = default!;
	private int userInfoId { get; set; }
	private UserInfo userInfo { get; set; } = default!;
	private Address address { get; set; } = default!;

	private string error = string.Empty;
	private string noBeneficiaryFound = string.Empty;

	//drop down selection place holders
	public const string subTypePlaceHolder = "--Select Sub-Type--";
	public const string productTypePlaceHolder = "--Select Product Type--";

	// user basic info
	public string userFirstName = string.Empty;
	public string userMiddleName = string.Empty;
	public string userLastName = string.Empty;
	public string userSuffix = string.Empty;
	public string userName = string.Empty;
	public string email = string.Empty;
	public string contactNumber = string.Empty;
	public string Occupation = string.Empty;
	public string taxIdentificationNumber = string.Empty;

	// user profile picture and government id
	private byte[]? profilePicture;
	private byte[]? governmentId;
	private string? governmentIdPreview;
	private string? profilePicturePreview;
	private string? modalImage;
	private bool isModalVisible = false;

	// Account
	private AccountTypes accountTypeNames = new();
	private AccountProductTypes accountProductTypeNames = new();
	private string selectedAccountTypeName = string.Empty;
	private string selectedAccountProductTypeName = string.Empty;
	public int accountTypeId;
	public int accountProductTypeId;



	// user Birth Info
	public int age;
	public DateTime birthDate = new DateTime(1980, 1, 1);

	//address info
	public string houseNo = string.Empty;
	public string street = string.Empty;
	public string selectedRegion = string.Empty;
	public string selectedProvince = string.Empty;
	public string selectedCity = string.Empty;
	public string selectedBarangay = string.Empty;
	public string userPostalCode = string.Empty;
	public int postalCode;
	public int regionId;
	public int? provinceId;
	public int cityId;
	public int barangayId;

	public string beneficiaryAccountName = string.Empty;
	public string beneficiaryAccountNumber = string.Empty;
	public string beneficiaryCheckMessage = string.Empty;
	private bool showBeneficiaryCheckResult = false;
	public int? beneficiaryAccountId = null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			userSession = await userSessionService.GetUserSession();
			userInfoId = userSession.UserInfoId;
			userInfo = await userDataService
				.TryGetUserInfoAsync(
					userInfoId,
					includeUserName: true,
					includeUserAuth: true,
					includeBirthInfo: true
				);
			userFirstName = userInfo.UserName.FirstName;
			userMiddleName = userInfo.UserName.MiddleName ?? string.Empty;
			userLastName = userInfo.UserName.LastName;
			userSuffix = userInfo.UserName.Suffix ?? string.Empty;

			age = userInfo.Age;
			birthDate = userInfo.BirthInfo?.BirthDate ?? DateTime.Now;
			Occupation = userInfo.Occupation;
			contactNumber = userInfo.ContactNumber;

			if (userInfo.AddressId is int addressId)
			{
				address = await userDataService.TryGetAddressAsync(addressId);
				selectedRegion = address.Region?.RegionName ?? string.Empty;
				StateHasChanged();
				selectedProvince = address.Province?.ProvinceName ?? string.Empty;
				StateHasChanged();
				selectedCity = address.City?.CityName?? string.Empty;
				StateHasChanged();
				selectedBarangay = address.Barangay?.BarangayName ?? string.Empty;
				StateHasChanged();
				postalCode = address.PostalCode ?? 0;
				street = address.Street ?? string.Empty;
				houseNo = address.House ?? string.Empty;
			}

			taxIdentificationNumber = userInfo.TaxIdentificationNumber;
			userName = userInfo.UserAuth.UserName;
			email = userInfo.UserAuth.Email;

			StateHasChanged();
		}
	}
	// handling the uploaded picture
	private async Task UploadGovernmentId(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file == null)
			{
				error = "Please upload a government Id.";
			}
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // allow up to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				governmentId = ms.ToArray();
				governmentIdPreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(governmentId)}";
				error = "";
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading Government ID:" + ex.Message;
		}
	}

	private async Task UploadProfilePicture(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file == null)
			{
				error = "Please upload a profile picture";
			}
			if (file != null)
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // allow u to 10 MB
				using var ms = new MemoryStream();
				await stream.CopyToAsync(ms);
				profilePicture = ms.ToArray();
				profilePicturePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(profilePicture)}";
				error = "";
			}
		}
		catch (FieldMissingException ex)
		{
			error = "Error uploading profile Picture: " + ex.Message;
		}
	}

	private void ShowImageModal(string? image)
	{
		if (!string.IsNullOrEmpty(image))
		{
			modalImage = image;
			isModalVisible = true;
		}
	}

	private void CloseModal()
	{
		modalImage = null;
		isModalVisible = false;
	}

	private async Task CheckBeneficiaryAccount()
	{

		var result = await RegistrationService.GetExistingBeneficiaryAccountAsycn(beneficiaryAccountName, beneficiaryAccountNumber);

		if (result != null)
		{
			beneficiaryCheckMessage = "Account Exist.";
			beneficiaryAccountId = result.AccountId;
		}
		else
		{
			beneficiaryCheckMessage = "Account not found. Please double-check the details.";
			beneficiaryAccountId = null;
		}

		showBeneficiaryCheckResult = true;
	}

	private async Task RegisterUserAsync()
	{
		try
		{
			error = string.Empty;

			if (string.IsNullOrWhiteSpace(selectedAccountTypeName))
			{
				error = "Account Type is required.";
			}
			else if (string.IsNullOrWhiteSpace(selectedAccountProductTypeName))
				error = "Account Product Type is required.";

			else if (string.IsNullOrWhiteSpace(contactNumber))
			{
				error = "Contact number is required.";

			}
			else if (string.IsNullOrWhiteSpace(Occupation))
			{
				error = "Occupation is required.";

			}
			else if (string.IsNullOrWhiteSpace(taxIdentificationNumber))
			{
				error = "Tax Identification Number is required.";

			}
			//	File uploads
			else if (profilePicture is null || !profilePicture.Any())
			{
				error = "Please upload a profile picture.";
			}

			else if (governmentId is null || !governmentId.Any())
			{
				error = "Please upload a government id picture";
			}

			else if (!string.IsNullOrWhiteSpace(error))
				return;


			accountTypeId = accountTypeNames.AccountTypeNameList.IndexOf(selectedAccountTypeName) + 1;
			accountProductTypeId = accountProductTypeNames.AccountProductTypeNameList.IndexOf(selectedAccountProductTypeName) + 1;

			userInfo.ContactNumber = contactNumber;
			userInfo.Occupation = Occupation;
			userInfo.TaxIdentificationNumber = taxIdentificationNumber;
			userInfo.ProfilePicture = profilePicture;
			userInfo.GovernmentId = governmentId;

			Account userAccount = RegistrationService
			.CreateAccount(
				accountTypeId, 
				accountProductTypeId, 
				contactNumber, 
				beneficiaryAccountId
			);

			await RegistrationService.ExistingUserRegisterBankAccount(userInfo, userAccount);

			NavigationManager.NavigateTo(PageRoutes.PENDING_APPROVAL_CLIENT);
		}
		catch (MissingFieldException ex)
		{
			error = ex.Message;
		}
		catch (Exception ex)
		{
			error = "Registration failed: " + ex.Message;
		}
	}

}