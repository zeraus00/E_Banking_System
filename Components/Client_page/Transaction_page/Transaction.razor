@page "/Transaction"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="main">
    <header class="custom-card-clientpage clientheader py-4 align-items-start">
        <div class="px-5">
            <div class="d-flex align-items-center my-4">
                <h2>Transactions</h2>
            </div>
        </div>
    </header>

    <div class="d-flex align-items-center gap-3 m-3 flex-wrap">

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
            <InputDate class="form-control" @bind-Value="startDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
            <InputDate class="form-control" @bind-Value="endDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Transaction Type</label>
            <select class="form-select" @bind="selectedType">
                <option value="">All</option>
                <option value="Deposit">Deposit</option>
                <option value="Withdraw">Withdraw</option>
                <option value="Transfer">Transfer</option>
            </select>
        </div>

        <button class="btn btn-primary shadow-sm" @onclick="FilterTransactions">Filter</button>
        <button class="btn btn-danger shadow-sm" @onclick="ClearFilter">Clear Filter</button>

    </div>

    <hr class="m-3" style="border: 1px solid white; opacity: 100%;" />

    <div class="table-responsive m-4 rounded">
        <table class="table table-bordered text-center">
            <thead class="table-info">
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Account Number</th>
                    <th>Transaction Type</th>
                    <th>Amount</th>
                    <th>Receiver ID</th>
                    <th>Sender ID</th>
                    <th>Previous Balance</th>
                    <th>New Balance</th>
                    <th>Transaction Fee</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in Transactions)
                {
                    <tr class="bg-light">
                        <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                        <td>@transaction.Time.ToString(@"hh\:mm\:ss")</td>
                        <td>@transaction.AccountNo.ToString()</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Amount.ToString("C0")</td>
                        <td>@(transaction.Type == "Transfer" ? transaction.ReceiverID : "--")</td>
                        <td>@(transaction.Type == "Transfer" ? transaction.SenderID : "--")</td>
                        <td>@transaction.previousBalance.ToString("C0")</td>
                        <td>@transaction.newBalance.ToString("C0")</td>
                        <td>@transaction.transactionFee.ToString("C0")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private DateTime? startDate;
    private DateTime? endDate;
    private string selectedType = "";

    private List<TransactionRecord> allTransactions = new();
    private List<TransactionRecord> Transactions = new();

    //mockup data
    protected override void OnInitialized()
    {
        allTransactions = new List<TransactionRecord>
        {
             new TransactionRecord
            {
                Date = DateTime.Today.AddDays(-1),
                Time = DateTime.Now.TimeOfDay,
                AccountNo = 12345678,
                Type = "Deposit",
                Amount = 5000,
                previousBalance = 25000,
                newBalance = 25000,
                transactionFee = 22
            },
            new TransactionRecord
            {
                Date = DateTime.Today,
                Time = DateTime.Now.TimeOfDay,
                AccountNo = 12345678,
                Type = "Transfer",
                Amount = 3000,
                ReceiverID = "clientName",
                SenderID = "Sender 1",
                previousBalance = 22000,
                newBalance = 22000,
                transactionFee = 20
            }
        };
        Transactions = allTransactions.ToList();
    }

    private void FilterTransactions()
    {
        Transactions = allTransactions
        .Where(t =>
            (!startDate.HasValue || t.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || t.Date <= endDate.Value.Date) &&
            (string.IsNullOrEmpty(selectedType) || t.Type == selectedType)
        ).ToList();
    }

    private void ClearFilter()
    {
        startDate = null;
        endDate = null;
        selectedType = "";
        Transactions = allTransactions.ToList();
    }

    public class TransactionRecord
    {
        public DateTime Date { get; set; }
        public TimeSpan Time { get; set; }
        public int AccountNo { get; set; }
        public string Type { get; set; }
        public decimal Amount { get; set; }
        public string ReceiverID { get; set; }
        public string SenderID { get; set; }
        public decimal previousBalance { get; set; }
        public decimal newBalance { get; set; }
        public decimal transactionFee { get; set; }
    }
}