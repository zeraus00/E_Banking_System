@page  "/Add_account"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

@using Helpers

<div class="page">
	<main>

		<!-- Header -->
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Add Account</h2>
				</div>
			</div>

		</header>
		@if (message.Length > 0)
		{
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				<strong>@message</strong>
			</div>
		}
		<!-- New Account Box -->
		<div class="card accounts shadow-lg d-flex flex-column my-4 py-3 px-5 justify-content-between">

			<div class="d-flex justify-content-between align-items-center flex-wrap p-3">
				<h4 class="fw-bold text-light">Enter Account Details</h4>

				<!-- Close Button -->
				<NavLink href="/Accounts">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<div class="information_box p-4">
				<!-- Account Type -->

				<div class="row mt-2">
					<label class="text-light">Account Type</label>
					<select class="form-select" @bind="accountType" required>
						<option value="" hidden>--Select Account Type--</option>
						@foreach(var type in AccountTypes.AS_STRING_LIST)
						{
							<option value="@type">@type</option>
						}
					</select>
				</div>

				<!-- Account Number -->
				<div class="row mt-2">
					<label class="text-light">Account Number</label>
					<input class="form-control" @bind="@accountNumber" placeholder="Enter Account Number">
				</div>

				<!-- Account Name -->
				<div class="row mt-2">
					<label class="text-light">Account Name</label>
					<input class="form-control" @bind="@accountName" placeholder="Enter Account Name" required>
				</div>

				<!-- Terms and Conditions -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Submit -->
				<div class="d-flex justify-content-between">

					@if (IsAccountFound && account != null)
					{
						<div class="text-start">
							<p class="text-success">Account match found: </p>
							<div class="card custom-card text-dark px-4 mt-3 shadow">
								<h3 class="border-bottom pt-3 pb-2"><strong>@account.AccountName</strong></h3>
								<p>Account Number: @FormatHelper.AccountNumberFormatter(account.AccountNumber)</p>
								<p>Balance: @FormatHelper.BalanceFormatter(account.Balance)</p>
							</div>
						</div>
					}
					else
					{
						<p class="text-danger">No account match found</p>
					}

					<div class="text-end mt-3">
						<NavLink href="/Accounts">
							<button class="btn btn-danger">Cancel</button>
						</NavLink>
						<button class="btn btn-primary" @onclick="TryFindAccountAsync">Find Account</button>
						@if (IsAccountFound && account != null)
						{
							<button class="btn btn-primary" @onclick="AddAccountAsync">Add Account</button>
						}
					</div>
				</div>

			</div>

		</div>
	</main>
</div>

@code
{
	private UserSession userSession { get; set; } = default!;
	private int accountId { get; set; }
	private string accountNumber { get; set; } = string.Empty;
	private string accountName { get; set; } = string.Empty;
	private string accountType { get; set; } = string.Empty;
	private int accountTypeId { get; set; }

	UserInfoAccount userAccountLink { get; set; } = default!;
	Account? account { get; set; } = null;
	private bool IsAccountFound = false;

	private string message = "";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				userSession = await userSessionService.GetUserSession();

				StateHasChanged();
			}
			catch (SessionNotFoundException)
			{
				//	Redirect user to CLIENT_HOME if there is no active session.
				redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
			}
		}
	}

	private async Task AddAccountAsync()
	{
		await userDataService.UpdateUserAccountLink(userSession.UserInfoId, accountId);
		message = "Account Added. Please wait...";
		StateHasChanged();
		await RefreshMessage();
		redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
	}

	private async Task TryFindAccountAsync()
	{
		try
		{
			bool hasEmptyField = (string.IsNullOrWhiteSpace(accountNumber)
				|| string.IsNullOrWhiteSpace(accountType)
				|| string.IsNullOrWhiteSpace(accountName)
				);
			if (hasEmptyField)
			{
				message = "Please provide all necessary details.";
				IsAccountFound = false;
				StateHasChanged();
				await RefreshMessage();
				return;
			}

			accountTypeId = AccountTypes.AS_STRING_LIST.IndexOf(accountType) + 1;
			accountId = await userDataService.GetAccountIdAsync(accountNumber, accountName, accountTypeId);
			bool hasUserLinkedAccount = await userDataService.HasUserLinkedAccount(userSession.UserInfoId, accountId);

			if (!hasUserLinkedAccount)
			{
				message = "There is no such account associated with the user.";
				IsAccountFound = false;
				StateHasChanged();
				await RefreshMessage();
				return;
			}
			else if (userSession.LinkedAccountList.Where(la => la.AccountId == accountId).Any())
			{
				message = "This account is already linked to your online account."; 
				IsAccountFound = false;
				StateHasChanged();
				await RefreshMessage();
				return;
			}

			account = await userDataService.GetAccountAsync(accountId);

			//mockup data
			// if (accountNumber == "123456789" && accountName == "Bogart" && accountType == "PERSONAL ACCOUNT") 
			// {
			// 	account = new Account
			// 		{
			// 			AccountNumber = "123456789",
			// 			AccountName = "Bogart",
			// 			Balance = 12345.67m
			// 		};
			// }
			// else
			// {
			// 	error = "There is no such account associated with the user.";
			// 	await RefreshError();
			// 	IsAccountFound = false;
			// 	account = null;
			// }

			//	Use this flag for displaying the account.
			IsAccountFound = true;
			StateHasChanged();
		}
		catch (NullReferenceException)
		{
			//	Throw if the account with the provided details does not exist.
			message = "There is no such account associated with the user.";
			await RefreshMessage();
		}
	}

	private async Task RefreshMessage()
	{
		await Task.Delay(3000);
		message = "";
		StateHasChanged();
	}
}