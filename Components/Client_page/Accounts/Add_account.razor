@page  "/Add_account"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

<div class="page">
	<main>

		<!-- Header -->
		<header class="custom-card-clientpage clientheader py-4 align-items-start">
			<div class="px-5">
				<div class="d-flex align-items-center my-4">
					<h2>Add Account</h2>
				</div>
			</div>

		</header>

		<!-- New Account Box -->
		<div class="card accounts shadow-lg d-flex flex-column my-4 py-3 px-5 justify-content-between">

			<div class="d-flex justify-content-between align-items-center flex-wrap p-3">
				<h4 class="fw-bold text-light">Enter Account Details</h4>

				<!-- Close Button -->
				<NavLink href="/Accounts">
					<button class="btn-close" aria-label="Close"></button>
				</NavLink>
			</div>

			<div class="information_box p-4">
				<!-- Account Type -->

				<div class="row mt-2">
					<label class="text-light">Account Type</label>
					<select class="form-select" @bind="accountTypeId" placeholder="Account Type" required>
						@foreach(var type in accountTypeList)
						{
							<option value="(@accountTypeList.IndexOf(type) + 1)">@type</option>
						}
					</select>
				</div>

				<!-- Account Number -->
				<div class="row mt-2">
					<label class="text-light">Account Number</label>
					<input class="form-control" @bind="@accountName" placeholder="Enter Account Number">
				</div>

				<!-- Account Name -->
				<div class="row mt-2">
					<label class="text-light">Account Name</label>
					<input class="form-control" @bind="@accountName" placeholder="Enter Account Name" required>
				</div>

				<!-- Terms and Conditions -->
				<div class="form-check d-flex justify-content-end mt-3">
					<input class="form-check-input mx-2" type="checkbox" id="termsAndConditions" required>
					<label class="form-check-label text-light" for="termsAndConditions">
						I accept the terms and conditions
					</label>
				</div>

				<!-- Submit -->
				<div class="text-end mt-3">
					<NavLink href="/Accounts">
						<button class="btn btn-danger">Cancel</button>
					</NavLink>
					<button class="btn btn-primary" @onclick="TryAddAccountAsync">Add Account</button>
				</div>

			</div>

		</div>
	</main>
</div>

@code
{
	private UserSession userSession { get; set; } = default!;
	private List<string> accountTypeList { get; set; } = new();
	private string accountNumber { get; set; } = string.Empty;
	private string accountName { get; set; } = string.Empty;
	private int accountTypeId { get; set; }

	private string error = "";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				userSession = await userSessionService.GetUserSession();

				accountTypeList = AccountTypeNames.AS_STRING_LIST;
			}
			catch (SessionNotFoundException)
			{
				//	Redirect user to CLIENT_HOME if there is no active session.
				redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
			}
		}
	}

	private async Task TryAddAccountAsync()
	{
		int accountId = await userDataService.GetAccountIdAsync(accountNumber, accountName, accountTypeId);
		bool hasUserLinkedAccount = await userDataService.HasUserLinkedAccount(userSession.UserInfoId, accountId);

		if (!hasUserLinkedAccount)
			error = "There is no such account associated with the user.";

		//	add user account to account list.
	}
}