@using E_BankingSystem.Components.Client_page.Accounts
@using Helpers
@inject UserControlledSessionService userControlledSessionService
@inject NavigationManager Navigation
@inject UserDataService userDataService

<!-- Card Component -->
<section class="carousel-card text-start p-3 border shadow-sm h-100">

    <!-- Edit Card Details -->
    @if (!isEditing)
    {
        <div class="d-flex justify-content-between">
            <div>
                <h3 class="fw-bold mt-3">@LinkedAccount.AccountName</h3>
                <h6 class="fw-lighter m-0">@(AccountStatusTypes.AS_STRING_LIST[LinkedAccount.AccountStatusId - 1])</h6>
                <h5 class="fw-lighter m-0">@FormatHelper.AccountNumberFormatter(LinkedAccount.AccountNumber)</h5>
            </div>

            <!-- Edit Button -->
            @if (IsEditable)
            {   
                <AuthorizeView Roles="User">
                    <Authorized>
                        <div class="d-flex align-items-end px-3">
                            <button class="btn btn-primary btn-sm" @onclick="EnterEditMode">Edit</button>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <div class="d-flex align-items-end px-3">
                            <button class="btn btn-primary btn-sm" @onclick="EnterUpdateMode">View</button>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="Employee">
                    <Authorized>
                        <div class="d-flex align-items-end px-3">
                            <button class="btn btn-primary btn-sm" @onclick="EnterUpdateMode">View</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        </div>
        <hr />

        <!-- Available Balance -->
        <div class="d-flex justify-content-between mt-3">
            <p class="w-100">Balance:</p>
            <p class="text-success w-100">@FormatHelper.BalanceFormatter(_accountBalance)</p>
        </div>

        <!-- Contact Number -->
        <div class="custom-card sm mb-0 pb-0">
            <p class="m-1">
                <strong>Contact No.:</strong> @FormatHelper.PhoneNumberFormatter(LinkedAccount.AccountContactNo)
            </p>
        </div>
    }

    else
    {
        <AuthorizeView Roles="User">
            <Authorized>
                <div class="form-group mb-2">
                    <label>Account Name</label>
                    <input class="form-control" @bind="editedAccountName" />
                </div>

                <div class="d-flex justify-content-end gap-2 mt-3">
                    <button class="btn btn-secondary btn-sm" @onclick="CancelEditMode">Cancel</button>
                    <button class="btn btn-success btn-sm" @onclick="SaveChanges">Save</button>
                </div>
            </Authorized>
        </AuthorizeView>
    }
</section>


@code {
    [Parameter]
    public LinkedAccount LinkedAccount { get; set; } = default!;

    [Parameter]
    public string? ContactNumber { get; set; }

    [Parameter]
    public bool IsEditable { get; set; } = false;

    private bool isEditing = false;

    private string editedAccountName = string.Empty;

    private decimal _accountBalance = 0.00m;

    protected override async Task OnInitializedAsync()
    {
        _accountBalance = await userDataService.GetAccountBalanceAsync(LinkedAccount.AccountId);
    }

    private void EnterEditMode()
    {
        isEditing = true;
        editedAccountName = LinkedAccount.AccountName;
    }

    private void EnterUpdateMode()
    {
        isEditing = true;
        Navigation.NavigateTo($"/Update_account");
    }

    private async Task SaveChanges()
    {
        LinkedAccount.AccountName = editedAccountName;
        await userDataService.RenameAccountAsync(LinkedAccount.AccountId, editedAccountName);
        await userControlledSessionService.SetActiveAccountSessionAsync(LinkedAccount);
        await userControlledSessionService.SetUserAccountListAsync();
        isEditing = false;
    }

    private void CancelEditMode()
    {
        isEditing = false;
    }
}
