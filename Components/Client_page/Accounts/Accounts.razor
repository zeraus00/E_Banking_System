@page "/Accounts"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ClaimsHelperService claimsHelperService
@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserSessionService userSessionService
@inject UserControlledSessionService userControlledSessionService

<div class="page">
    <main>

        <!-- Header -->
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>My Accounts</h2>
                </div>
            </div>
        </header>

        <!-- OUTER Flex Container -->
        <div class="d-flex justify-content-center align-items-start mt-4">

            <!-- Buttons Container (Positioned beside carousel) -->
            <div class="ms-4 d-flex flex-column">

                <!-- Edit Toggle Button -->
                <div class="mt-5">
                    <button class="@EditButtonClass" @onclick="ToggleEdit">
                        <i class="@EditIcon"></i>
                    </button>
                </div>

                <!-- Add Button -->
                <div class="mt-3 mb-5">
                    <a href="/Add_account" class="card square-btn d-inline-flex align-items-center justify-content-center p-1 fs-1 fw-bold text-decoration-none">
                        +
                    </a>
                </div>
            </div>

            <!-- Manage Accounts Section -->
            <div class="card accounts shadow-lg d-flex flex-column mt-4 p-3 justify-content-between overflow-hidden">

                <!-- Carousel Component -->
                <div class="flex-grow-1 d-flex justify-content-center">
                    <AccountCarousel Accounts="userAccountList" UserInfo="userInfo" IsEditable="IsEditable" />
                </div>

            </div>

        </div>

    </main>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    private ClaimsPrincipal? user;
    private List<LinkedAccount> userAccountList = new();
    private Dictionary<int, decimal> balanceDict = new();       // <------  FOR ACCOUNT BALANCE
    private UserInfo? userInfo;
    private bool IsEditable { get; set; } = false; // Default to view mode

    protected override async Task OnInitializedAsync()
    {
        // Get Authentication state
        AuthenticationState authState = await authenticationState;
        user = authState.User;

        // Retrieve ids from claims
        var userInfoId = Convert.ToInt32(claimsHelperService.GetClaimValue(user, CustomClaimTypes.USERINFO_ID) ?? "0");

        //  Retrieve user info from db.
        userInfo = await userDataService.TryGetUserInfoAsync(userInfoId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage.
                UserSession userSession = await userSessionService.GetUserSession();

                //  Get list of accounts from database.
                //  Returns empty list of no accounts are found.
                //  accounts = await userDataService.GetAccountListAsync(userSession.UserAccountIdList);
                userAccountList = await userControlledSessionService.GetUserAccountListAsync(userSession);

                foreach (var account in userAccountList)
                {
                    balanceDict[account.AccountId] = await userDataService.GetAccountBalanceAsync(account.AccountId);
                }

                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
            }
        }
    }

    private void ToggleEdit()
    {
        IsEditable = !IsEditable;
    }

    private string EditIcon => IsEditable ? "bi bi-pen-fill" : "bi bi-pen";

    private string EditButtonClass => IsEditable
    ? "card square-btn d-inline-flex align-items-center justify-content-center p-1 fs-3 bg-secondary text-white"
    : "card square-btn d-inline-flex align-items-center justify-content-center p-1 fs-3";

}
