@page "/Transactions"
@using Helpers;

@attribute [Authorize(Roles="User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject PageRedirectService redirectService
@inject UserDataService userDataService
@inject UserControlledSessionService userControlledSessionService
@inject UserSessionService userSessionService

<div class="main">
    <header class="custom-card-clientpage clientheader py-4 align-items-start">
        <div class="px-5">
            <div class="d-flex align-items-center my-4">
                <h2>Transactions</h2>
            </div>
        </div>
    </header>

    <div class="d-flex align-items-center gap-3 m-3 flex-wrap">

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Start Date</label>
            <InputDate class="form-control" @bind-Value="startDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">End Date</label>
            <InputDate class="form-control" @bind-Value="endDate" />
        </div>

        <div class="d-flex align-items-center gap-3">
            <label class="text-light mb-0" style="white-space: nowrap;">Transaction Type</label>
            <select class="form-select" @bind="selectedTransactionType">
                <option value="0" disabled hidden>All</option>
                <option value="0">All</option>
                @foreach (var typeName in transactionTypes)
                {
                    <option value="@(transactionTypes.IndexOf(typeName) + 1)">@typeName</option>
                }
            </select>
        </div>

        <button class="btn btn-primary shadow-sm" @onclick="FilterTransactionsAsync">Filter</button>
        <button class="btn btn-danger shadow-sm" @onclick="ClearFilterAsync">Clear Filter</button>

    </div>

    <hr class="m-3" style="border: 1px solid white; opacity: 100%;" />

    <div class="table-responsive m-4 rounded">
        <table class="table table-bordered text-center">
            <thead class="table-info">
                <tr>
                    <th class="align-middle">Date</th>
                    <th class="align-middle">Time</th>
                    <th class="align-middle">Transaction Type</th>
                    <th class="align-middle">Status</th>
                    <th class="align-middle">Amount</th>
                    <th class="align-middle">Receiver ID</th>
                    <th class="align-middle">Sender ID</th>
                    <th class="align-middle">Previous Balance</th>
                    <th class="align-middle">New Balance</th>
                    <th class="align-middle">Transaction Fee</th>
                </tr>
            </thead>
            <tbody>
                @if (transactionListPage.Any())
                {
                    @foreach (var transaction in transactionListPage)
                    {
                        <tr class="bg-light">
                            <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                            <td>@transaction.TransactionTime.ToString(@"hh\:mm\:ss")</td>
                            <td>@transaction.TransactionType.TransactionTypeName</td>
                            <td>@transaction.Status</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.Amount)</td>
                            @* Set Receiver and Sender *@ 
                            @if (@transaction.TransactionType.TransactionTypeId == (int)@TransactionTypes.Outgoing_Transfer)
                            {
                                <td>@transaction.CounterAccount.AccountName</td>
                                <td>@transaction.MainAccount.AccountName</td>
                            }
                            else if (@transaction.TransactionType.TransactionTypeId == (int)@TransactionTypes.Incoming_Transfer)
                            {
                                <td>@transaction.MainAccount.AccountName</td>
                                <td>@transaction.CounterAccount.AccountName</td>
                            }
                            else if (transaction.TransactionType.TransactionTypeId == (int)TransactionTypes.Withdrawal)
                            {
                                <td>@transaction.ExternalVendor.VendorName</td>
                                <td>--</td>
                            }
                            else if (transaction.TransactionType.TransactionTypeId == (int)TransactionTypes.Deposit)
                            {
                                <td>--</td>
                                <td>@transaction.ExternalVendor.VendorName</td>
                            }
                            else
                            {
                                <td>--</td>
                                <td>--</td>
                            }
                            <td>@FormatHelper.BalanceFormatter(transaction.PreviousBalance)</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.NewBalance)</td>
                            <td>@FormatHelper.BalanceFormatter(transaction.TransactionFee)</td>
                            @* <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                        <td>@transaction.Time.ToString(@"hh\:mm\:ss")</td>
                        <td>@transaction.AccountNo.ToString()</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Amount.ToString("C0")</td>
                        <td>@(transaction.Type == "Transfer" ? transaction.ReceiverID : "--")</td>
                        <td>@(transaction.Type == "Transfer" ? transaction.SenderID : "--")</td>
                        <td>@transaction.previousBalance.ToString("C0")</td>
                        <td>@transaction.newBalance.ToString("C0")</td>
                        <td>@transaction.transactionFee.ToString("C0")</td> *@
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="scroll-container gap-3 mx-5" >
        <!-- Left Arrow -->
        <button class="arrow-ud" @onclick="PreviousPage">
            <i class="bi bi-chevron-left text-light" ></i>
        </button>

        <!-- Right Arrow -->
        <button class="arrow-ud" @onclick="NextPage">
            <i class="bi bi-chevron-right text-light" ></i>
        </button>
    </div>

    <div class="page-container text-center text-light mt-2 mb-3 mx-5">
        Page @pageNumber of @masterListAvailablePages
    </div>

</div>

@code {
    private UserSession userSession { get; set; } = default!;
    private LinkedAccount activeAccountSession { get; set; } = default;
    private string error = "";

    private DateTime? startDate;
    private DateTime? endDate;

    private List<string> transactionTypes { get; set; } = new();
    private string selectedTransactionType = "0";

    private List<Transaction> transactionMasterList = new();
    private int masterListPageSize = 36;
    private int masterListAvailablePages = 0;
    private int masterListPageNumber = 1;

    private List<Transaction> transactionListPage = new();
    private int pageSize = 6;
    private int pageNumber = 0;

    private int accountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //  Load transaction types
        transactionTypes = TransactionTypeConstants.AS_STRING_LIST;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage
                //  Throws SessionNotFoundException if session is not found.
                userSession = await userSessionService.GetUserSession();
                activeAccountSession = await userControlledSessionService
                    .GetActiveAccountSessionAsync(userSession);
                accountId = activeAccountSession.AccountId;

                //  Get transaction list from database.
                await FilterTransactionsAsync();

                if (transactionListPage.Any())
                    pageNumber = 1;

                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect user to CLIENT_HOME if there is no ongoing user session.
                redirectService.redirectWithNavigationManager(PageRoutes.CLIENT_HOME);
            }
        }
    }

    private async Task NextPage()
    {
        if (pageNumber < masterListAvailablePages)
        {
            pageNumber++;
            LoadTransactionListPage(pageNumber);
        }
        else if (masterListPageNumber < masterListAvailablePages)
        {
            masterListPageNumber++;
            await TemporaryListAsync();
            if (tempTransactions.Any())
            {
                transactionMasterList = tempTransactions;
                masterListAvailablePages = tempTransactionsAvailablePages;
                transactionListPage = tempTransactionsPage;
                pageNumber = 1;
                return;
            }
            else
            {
                masterListPageNumber--;
                return;
            }
        }

        //await FilterTransactionsAsync();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            LoadTransactionListPage(pageNumber);
        }
        else if (masterListPageNumber > 1)
        {
            masterListPageNumber--;
            pageNumber = masterListAvailablePages;
            await FilterTransactionsAsync();
        }
    }

    private async Task ClearFilterAsync()
    {
        startDate = null;
        endDate = null;
        selectedTransactionType = "";
        pageNumber = 1;
        masterListPageNumber = 1;
        await FilterTransactionsAsync();
    }

    private async Task FilterTransactionsAsync()
    {
        //  Load the filtered transaction list from the database.
        int transactionType = !string.IsNullOrWhiteSpace(selectedTransactionType) 
            ? Convert.ToInt32(selectedTransactionType)
            : 0;
        transactionMasterList = await userDataService.GetRecentAccountTransactionsAsync(
            accountId,
            transactionTypeId: transactionType,
            pageSize: masterListPageSize,
            pageNumber: masterListPageNumber,
            transactionStartDate: startDate,
            transactionEndDate: endDate
        );
        masterListAvailablePages = (int)Math.Ceiling((double)transactionMasterList.Count / pageSize);
        LoadTransactionListPage(pageNumber);
    }
    private void LoadTransactionListPage(int page = 1)
    {
        if (transactionMasterList.Any())
        {
            transactionListPage = userDataService
                .GetTransactionListPage(
                    transactionMasterList,
                    pageNumber: page,
                    pageSize: pageSize
                );
        }
    }

    private List<Transaction> tempTransactions { get; set; } = new();
    private int tempTransactionsAvailablePages { get; set; } = 0;
    private List<Transaction> tempTransactionsPage { get; set; } = new();

    private async Task TemporaryListAsync()
    {
        int transactionType = !string.IsNullOrWhiteSpace(selectedTransactionType)
            ? Convert.ToInt32(selectedTransactionType)
            : 0;
        tempTransactions = await userDataService.GetRecentAccountTransactionsAsync(
            accountId,
            transactionTypeId: transactionType,
            pageSize: masterListPageSize,
            pageNumber: masterListPageNumber,
            transactionStartDate: startDate,
            transactionEndDate: endDate
        ); 
        tempTransactionsAvailablePages = (int)Math.Ceiling((double)tempTransactions.Count / pageSize);
        LoadTempTransactionsPage(1);
    }

    private void LoadTempTransactionsPage(int page=1)
    {
        if (tempTransactions.Any())
        {
            tempTransactionsPage = userDataService
                .GetTransactionListPage(
                    tempTransactions,
                    pageNumber: page,
                    pageSize: pageSize
                );
        }
    }
}