@page "/Deposit_confirmation"
@attribute [Authorize(Roles = "User")]

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ClaimsHelperService _claimsHelper
@inject PageRedirectService _redirectService
@inject SessionStorageService _storageService
@inject TransactionService _transactionService
@inject UserDataService _userDataService
@using Helpers;

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Deposit</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @currentBalance
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column my-4 p-3">
                <div class="mx-auto text-center p-4">
                    <h5>Deposit Amount</h5>
                    <h1 class="fw-bolder py-3 mb-2">@depositAmount</h1>
                </div>

                <div class="d-flex justify-content-between mx-5">
                    <div class="d-flex flex-column text-start text-light mb-0">
                        <h5 class="mb-1 fw-bold">@clientName</h5>
                        <p class="m-0">@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                        <p class="m-0">@date</p>
                        <p class="m-0">@transactionNumber</p>
                    </div>

                    <section class="d-flex flex-column justify-content-end mt-3 w-25">
                        <div class="text-end mt-3 w-100">
                            <div>
                                <button class="btn btn-primary btn-lg mb-2 w-100" @onclick="ConfirmDeposit">Confirm</button>
                            </div>
                            <div>
                                <button class="btn btn-warning btn-lg mb-3 w-100" @onclick="CancelDeposit">Go Back</button>
                            </div>
                        </div>
                    </section>

                </div>

                <div class="d-flex justify-content-end pb-2 mx-5">
                    <input class="form-check-input mx-2" type="checkbox" id="termsAndConditions required">
                    <label class="form-check-label text-light mb-2" for="withdrawAmountVerification">
                        Confirm the details are correct.
                    </label>
                </div>

            </section>
        </div>

    </main>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    private ClaimsPrincipal? user;
    private Account? Account;

    private int accountId;
    private string accountNumber = string.Empty;
    private string clientName = string.Empty;
    private decimal currentBalance = 0.00m;
    private decimal depositAmount = 0.00m;
    private string transactionNumber = string.Empty;
    private DateTime? date;

    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //  Get Authentication State
        AuthenticationState authState = await authenticationState;
        user = authState.User;

        //  Retrieve userAuth id from claims.
        var userAuthId = Convert.ToInt32(_claimsHelper.GetClaimValue(user, ClaimTypes.NameIdentifier) ?? "0");

        // //  Retrieve account id list from userAuthObject
        // List<int>? accountIds = await _userDataService.GetAccountIdListAsync(userAuthId);

        // //  Retreive account id from list.
        // var accountId = accountIds?[0] ?? 5;

        accountId = await _userDataService.GetFirstAccountAsync(userAuthId) ?? 0;

        //  Retriev account from db.
        Account = await _userDataService.GetAccountAsync(accountId);

        if (Account is not null)
        {
            accountNumber = Account.AccountNumber;
            clientName = Account.AccountName;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender) 
        {
            try 
            {
                //  Fetch transaction session details from session storage.
                //  Throws SessionNotFoundException if sesion is not found.
                TransactionSession transactionSession = await _storageService.FetchSessionAsync<TransactionSession>(SessionSchemes.DepositScheme);

                //  Set display data.
                currentBalance = transactionSession.CurrentBalance;
                depositAmount = transactionSession.Amount;
                date = transactionSession.TransactionDate;
                transactionNumber = transactionSession.TransactionNumber;

                //  Reload component.
                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect user to client home if there is no ongoing transaction session.
                _redirectService.redirectWithNavigationManager(PageRoutes.ClientHome);
            }
        }
    }

    private async Task ConfirmDeposit() 
    {
        try
        {
            //  Process deposit transaction.
            await _transactionService.ProcessTransactionAsync(SessionSchemes.DepositScheme);

            //  Redirect to deposit receipt page.
            _redirectService.redirectWithNavigationManager(PageRoutes.DepositReceipt);
        } catch (AccountNotFoundException)
        {
            error = "Error resolving database. Please try again later.";
        }
    }

    private async Task CancelDeposit()
    {
        //  Persist cancelled transaction to database and delete transaction details from session.
        await _storageService.DeleteSessionAsync(SessionSchemes.DepositScheme);

        _redirectService.redirectWithNavigationManager(PageRoutes.ClientHome);
    }
}