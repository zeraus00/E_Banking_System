@using Helpers;

@page "/Deposit_amount"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject PageRedirectService redirectService
@inject TransactionService transactionService
@inject UserDataService userDataService
@inject UserSessionService userSessionService

<div class="page">
    <main>
        <header class="custom-card-clientpage clientheader py-4 align-items-start">
            <div class="px-5">
                <div class="d-flex align-items-center my-4">
                    <h2>Deposit</h2>
                </div>
            </div>
            <section class="d-flex justify-content-end align-items-end mx-5 gap-2">
                <p class="fs-6 fw-lighter align-text-bottom">Current Balance: </p>
                <div class="custom-card-clientpage current-balance d-flex align-items-center justify-content-center">
                    @currentBalance
                </div>
            </section>
        </header>

        <div class="container">
            <section class="card registration shadow-lg d-flex flex-column mt-4 p-3">
                <h3 class="mx-3 my-3 ">Enter Deposit Amount</h3>
                <div class="input-group px-4 mb-4">
                    <span class="input-group-text fs-2">$</span>
                    <input type="number" class="form-control form-control-custom form-control-lg fs-2" @bind="@depositAmount" placeholder="000-000" />
                </div>

                <div class="d-flex justify-content-between mx-5">
                    <div class="d-flex flex-column text-start mb-0">
                        <h5 class="mb-1">@clientName</h5>
                        <p class="mb-0">@FormatHelper.AccountNumberFormatter(accountNumber)</p>
                    </div>             

                    <div class="text-end mt-3 w-25">
                        <div class="w-100">
                            <button class="btn btn-primary btn-lg w-100 mb-2" @onclick="InitiateDepositProcess">Continue</button>
                        </div>
                        <NavLink class="w-100" href="/Client_home">
                            <button class="btn btn-danger btn-lg w-100">Cancel</button>
                        </NavLink>
                    </div>

                </div>

            </section>
        </div>
    </main>
</div>

@code {
    private Account? Account;

    private int accountId;
    private string accountNumber = "Loading...";
    private string clientName = "Loading...";
    private decimal currentBalance = 0.00m;
    private decimal depositAmount = 0.00m;

    private string error = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //  Get user session details from session storage.
                //  Throws SessionNotFoundException is session is not found.
                UserSession userSession = await userSessionService.GetUserSession();
                accountId = userSession.ActiveAccountId;
                accountNumber = userSession.ActiveAccountNumber;
                clientName = userSession.ActiveAccountName;

                //  Get account from database.
                //  Throws AccountNotFoundException if account is not found.
                Account = await userDataService.GetAccountAsync(accountId);
                currentBalance = Account.Balance;

                StateHasChanged();
            }
            catch (SessionNotFoundException)
            {
                //  Redirect to LOGGING_IN_PAGE page
                redirectService.redirectWithNavigationManager(PageRoutes.LOGGING_IN_PAGE);
            }
            catch (AccountNotFoundException)
            {
                currentBalance = 0.00m;
                error = "Error resolving database. Please try again later.";
            }
        }
    }

    private async Task InitiateDepositProcess() 
    {
        try 
        {
            if (depositAmount > 0)
            {
                //  Save transaction session to session storage.
                await transactionService.InitiateTransaction(SessionSchemes.DEPOSIT_SESSION, accountId, (int)TransactionTypes.Deposit, depositAmount);

                //  Redirect to DEPOSIT_CONFIRMATION page.
                redirectService.redirectWithNavigationManager(PageRoutes.DEPOSIT_CONFIRMATION);
            } else 
            {
                error = "Deposit amount must be greater than 0.";
            }
        }
        catch (AccountNotFoundException)
        {
            error = "Error resolving database. Please try again later.";
        }
    }
}