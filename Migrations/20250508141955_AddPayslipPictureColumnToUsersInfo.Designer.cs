// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBankingSystem.Migrations
{
    [DbContext(typeof(EBankingContext))]
    [Migration("20250508141955_AddPayslipPictureColumnToUsersInfo")]
    partial class AddPayslipPictureColumnToUsersInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Auth.AccessRole", b =>
                {
                    b.Property<int>("AccessRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessRoleId"));

                    b.Property<string>("AccessRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessRoleId");

                    b.ToTable("AccessRoles", "AuthSchema");
                });

            modelBuilder.Entity("Data.Models.Authentication.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", "AuthSchema");
                });

            modelBuilder.Entity("Data.Models.Authentication.UserAuth", b =>
                {
                    b.Property<int>("UserAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAuthId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserAuthId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UsersAuth", "AuthSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("ATMNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.Property<string>("AccountContactNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength();

                    b.Property<int>("AccountProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(18,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("DateOpened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<int?>("LinkedBeneficiaryId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountProductTypeId");

                    b.HasIndex("AccountStatusTypeId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("LinkedBeneficiaryId");

                    b.ToTable("Accounts", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountProductType", b =>
                {
                    b.Property<int>("AccountProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountProductTypeId"));

                    b.Property<string>("AccountProductTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountProductTypeId");

                    b.ToTable("AccountProductTypes", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountStatusType", b =>
                {
                    b.Property<int>("AccountStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountStatusTypeId"));

                    b.Property<string>("AccountStatusTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountStatusTypeId");

                    b.ToTable("AccountStatusTypes", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.ExternalVendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("VendorId");

                    b.ToTable("ExternalVendors", "FinanceSchema");

                    b.HasData(
                        new
                        {
                            VendorId = 1,
                            VendorName = "GCash"
                        },
                        new
                        {
                            VendorId = 2,
                            VendorName = "Paymaya"
                        },
                        new
                        {
                            VendorId = 3,
                            VendorName = "GoTyme"
                        });
                });

            modelBuilder.Entity("Data.Models.Finance.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)")
                        .IsFixedLength();

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("DECIMAL (5, 2)");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR (20)")
                        .IsFixedLength();

                    b.Property<string>("LoanPurpose")
                        .IsRequired()
                        .HasColumnType("VARCHAR (30)");

                    b.Property<string>("LoanStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("LoanTermMonths")
                        .HasColumnType("int");

                    b.Property<int>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingLoanBalance")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("AccountId");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Loans", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.LoanTransaction", b =>
                {
                    b.Property<int>("LoanTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanTransactionId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATE");

                    b.Property<decimal>("InterestAmount")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<decimal>("RemainingLoanBalance")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<TimeSpan>("TransactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIME")
                        .HasDefaultValueSql("CAST(GETDATE() AS TIME)");

                    b.HasKey("LoanTransactionId");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanTransactions", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.LoanType", b =>
                {
                    b.Property<int>("LoanTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanTypeId"));

                    b.Property<decimal>("InterestRatePerAnnum")
                        .HasColumnType("DECIMAL (5, 2)");

                    b.Property<int>("LoanTermInMonths")
                        .HasColumnType("int");

                    b.Property<string>("LoanTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("MinimumLoanAmount")
                        .HasColumnType("Decimal(18, 2)");

                    b.HasKey("LoanTypeId");

                    b.ToTable("LoanTypes", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("ConfirmationNumber")
                        .HasMaxLength(28)
                        .HasColumnType("nchar(28)")
                        .IsFixedLength();

                    b.Property<int?>("CounterAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalVendorId")
                        .HasColumnType("int");

                    b.Property<int>("MainAccountId")
                        .HasMaxLength(28)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<decimal>("NewBalance")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("PreviousBalance")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<decimal>("TransactionFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(18,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nchar(32)")
                        .IsFixedLength();

                    b.Property<TimeSpan>("TransactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIME")
                        .HasDefaultValueSql("CAST(GETDATE() AS TIME)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("CounterAccountId");

                    b.HasIndex("ExternalVendorId");

                    b.HasIndex("MainAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.Finance.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes", "FinanceSchema");
                });

            modelBuilder.Entity("Data.Models.JoinEntity.UserInfoAccount", b =>
                {
                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccessRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLinkedToOnlineAccount")
                        .HasColumnType("bit");

                    b.HasKey("UserInfoId", "AccountId");

                    b.HasIndex("AccessRoleId");

                    b.HasIndex("AccountId");

                    b.ToTable("UsersInfoAccounts", "JoinEntitySchema");
                });

            modelBuilder.Entity("Data.Models.Place.Barangay", b =>
                {
                    b.Property<int>("BarangayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarangayId"));

                    b.Property<string>("BarangayCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarangayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.HasKey("BarangayId");

                    b.HasIndex("CityId");

                    b.ToTable("Barangays", "PlaceSchema");
                });

            modelBuilder.Entity("Data.Models.Place.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities", "PlaceSchema");
                });

            modelBuilder.Entity("Data.Models.Place.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Provinces", "PlaceSchema");
                });

            modelBuilder.Entity("Data.Models.Place.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions", "PlaceSchema");
                });

            modelBuilder.Entity("Data.Models.User.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("BarangayId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("House")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Addresses", "UserSchema");
                });

            modelBuilder.Entity("Data.Models.User.BirthInfo", b =>
                {
                    b.Property<int>("BirthInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirthInfoId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("BirthInfoId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("BirthsInfo", "UserSchema");
                });

            modelBuilder.Entity("Data.Models.User.Name", b =>
                {
                    b.Property<int>("NameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NameId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("NameId");

                    b.ToTable("Names", "UserSchema");
                });

            modelBuilder.Entity("Data.Models.User.Religion", b =>
                {
                    b.Property<int>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReligionId"));

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReligionId");

                    b.ToTable("Religions", "UserSchema");
                });

            modelBuilder.Entity("Data.Models.User.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("BirthInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<int>("FatherNameId")
                        .HasColumnType("int");

                    b.Property<byte[]>("GovernmentId")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("MotherNameId")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PayslipPicture")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("UserAuthId")
                        .HasColumnType("int");

                    b.Property<int>("UserNameId")
                        .HasColumnType("int");

                    b.HasKey("UserInfoId");

                    b.HasIndex("AddressId");

                    b.HasIndex("BirthInfoId");

                    b.HasIndex("FatherNameId");

                    b.HasIndex("MotherNameId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("UserAuthId")
                        .IsUnique();

                    b.HasIndex("UserNameId")
                        .IsUnique();

                    b.ToTable("UsersInfo", "UserSchema");
                });

            modelBuilder.Entity("Data.Models.Authentication.UserAuth", b =>
                {
                    b.HasOne("Data.Models.Authentication.Role", "Role")
                        .WithMany("UsersAuth")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Models.Finance.Account", b =>
                {
                    b.HasOne("Data.Models.Finance.AccountProductType", "AccountProductType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.AccountStatusType", "AccountStatusType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.Account", "LinkedBeneficiaryAccount")
                        .WithMany("LinkedSourceAccounts")
                        .HasForeignKey("LinkedBeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountProductType");

                    b.Navigation("AccountStatusType");

                    b.Navigation("AccountType");

                    b.Navigation("LinkedBeneficiaryAccount");
                });

            modelBuilder.Entity("Data.Models.Finance.Loan", b =>
                {
                    b.HasOne("Data.Models.Finance.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.LoanType", "LoanType")
                        .WithMany("Loans")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User.UserInfo", "UserInfo")
                        .WithMany("Loans")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LoanType");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Data.Models.Finance.LoanTransaction", b =>
                {
                    b.HasOne("Data.Models.Finance.Loan", "Loan")
                        .WithMany("LoanTransactions")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Data.Models.Finance.Transaction", b =>
                {
                    b.HasOne("Data.Models.Finance.Account", "CounterAccount")
                        .WithMany("CounterTransactions")
                        .HasForeignKey("CounterAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Models.Finance.ExternalVendor", "ExternalVendor")
                        .WithMany("Transactions")
                        .HasForeignKey("ExternalVendorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Models.Finance.Account", "MainAccount")
                        .WithMany("MainTransactions")
                        .HasForeignKey("MainAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CounterAccount");

                    b.Navigation("ExternalVendor");

                    b.Navigation("MainAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Data.Models.JoinEntity.UserInfoAccount", b =>
                {
                    b.HasOne("Data.Models.Auth.AccessRole", "AccessRole")
                        .WithMany("UsersInfoAccounts")
                        .HasForeignKey("AccessRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Finance.Account", "Account")
                        .WithMany("UsersInfoAccount")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User.UserInfo", "UserInfo")
                        .WithMany("UserInfoAccounts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessRole");

                    b.Navigation("Account");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Data.Models.Place.Barangay", b =>
                {
                    b.HasOne("Data.Models.Place.City", "City")
                        .WithMany("Barangays")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Data.Models.Place.City", b =>
                {
                    b.HasOne("Data.Models.Place.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Data.Models.Place.Province", b =>
                {
                    b.HasOne("Data.Models.Place.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Data.Models.User.Address", b =>
                {
                    b.HasOne("Data.Models.Place.Barangay", "Barangay")
                        .WithMany("Addresses")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Barangay");

                    b.Navigation("City");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Data.Models.User.BirthInfo", b =>
                {
                    b.HasOne("Data.Models.Place.City", "City")
                        .WithMany("BirthInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.Province", "Province")
                        .WithMany("BirthsInfo")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Place.Region", "Region")
                        .WithMany("BirthsInfo")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Data.Models.User.UserInfo", b =>
                {
                    b.HasOne("Data.Models.User.Address", "Address")
                        .WithMany("UsersInfo")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.User.BirthInfo", "BirthInfo")
                        .WithMany("UsersInfo")
                        .HasForeignKey("BirthInfoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.User.Name", "FatherName")
                        .WithMany("FatherInUsersInfo")
                        .HasForeignKey("FatherNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User.Name", "MotherName")
                        .WithMany("MotherInUsersInfo")
                        .HasForeignKey("MotherNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User.Religion", "Religion")
                        .WithMany("UsersInfo")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Authentication.UserAuth", "UserAuth")
                        .WithOne("UserInfo")
                        .HasForeignKey("Data.Models.User.UserInfo", "UserAuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User.Name", "UserName")
                        .WithOne("UserInUsersInfo")
                        .HasForeignKey("Data.Models.User.UserInfo", "UserNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("BirthInfo");

                    b.Navigation("FatherName");

                    b.Navigation("MotherName");

                    b.Navigation("Religion");

                    b.Navigation("UserAuth");

                    b.Navigation("UserName");
                });

            modelBuilder.Entity("Data.Models.Auth.AccessRole", b =>
                {
                    b.Navigation("UsersInfoAccounts");
                });

            modelBuilder.Entity("Data.Models.Authentication.Role", b =>
                {
                    b.Navigation("UsersAuth");
                });

            modelBuilder.Entity("Data.Models.Authentication.UserAuth", b =>
                {
                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Finance.Account", b =>
                {
                    b.Navigation("CounterTransactions");

                    b.Navigation("LinkedSourceAccounts");

                    b.Navigation("Loans");

                    b.Navigation("MainTransactions");

                    b.Navigation("UsersInfoAccount");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountProductType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountStatusType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Data.Models.Finance.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Data.Models.Finance.ExternalVendor", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Data.Models.Finance.Loan", b =>
                {
                    b.Navigation("LoanTransactions");
                });

            modelBuilder.Entity("Data.Models.Finance.LoanType", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Data.Models.Finance.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Data.Models.Place.Barangay", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Data.Models.Place.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Barangays");

                    b.Navigation("BirthInfos");
                });

            modelBuilder.Entity("Data.Models.Place.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BirthsInfo");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Data.Models.Place.Region", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BirthsInfo");

                    b.Navigation("Cities");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Data.Models.User.Address", b =>
                {
                    b.Navigation("UsersInfo");
                });

            modelBuilder.Entity("Data.Models.User.BirthInfo", b =>
                {
                    b.Navigation("UsersInfo");
                });

            modelBuilder.Entity("Data.Models.User.Name", b =>
                {
                    b.Navigation("FatherInUsersInfo");

                    b.Navigation("MotherInUsersInfo");

                    b.Navigation("UserInUsersInfo");
                });

            modelBuilder.Entity("Data.Models.User.Religion", b =>
                {
                    b.Navigation("UsersInfo");
                });

            modelBuilder.Entity("Data.Models.User.UserInfo", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("UserInfoAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
